{"version":3,"sources":["../bower_components/js-sha1/src/sha1.js","../bower_components/datatables/media/js/jquery.dataTables.js","../bower_components/datatables-tabletools/js/dataTables.tableTools.js","../assets/scripts/settings.js","../assets/scripts/globals.js","../assets/scripts/config.js","../assets/scripts/calendar_events.js"],"names":["root","undefined","NODE_JS","global","HEX_CHARS","split","EXTRA","SHIFT","blocks","sha1","message","notString","constructor","ArrayBuffer","Uint8Array","h0","h1","h2","h3","h4","code","t","f","i","j","block","end","index","start","bytes","length","charCodeAt","a","b","c","d","e","JS_SHA1_TEST","crypto","require","Buffer","module","exports","createHash","update","digest","this","factory","define","amd","$","window","document","jQuery","_fnHungarianMap","o","match","newKey","hungarian","map","each","key","val","indexOf","replace","toLowerCase","_hungarianMap","_fnCamelToHungarian","src","user","force","hungarianKey","charAt","extend","_fnLanguageCompat","lang","defaults","DataTable","oLanguage","zeroRecords","sZeroRecords","sEmptyTable","_fnMap","sLoadingRecords","sInfoThousands","sThousands","decimal","sDecimal","_addNumericSort","_fnCompatOpts","init","_fnCompatMap","sScrollX","scrollX","searchCols","aoSearchCols","ien","models","oSearch","_fnCompatCols","dataSort","aDataSort","isArray","_fnBrowserDetect","settings","__browser","browser","n","css","position","top","left","scrollLeft","height","width","overflow","append","appendTo","outer","children","inner","barWidth","offsetWidth","clientWidth","bScrollOversize","bScrollbarLeft","Math","round","offset","bBounding","getBoundingClientRect","remove","oBrowser","oScroll","iBarWidth","_fnReduce","that","fn","inc","value","isSet","hasOwnProperty","_fnAddColumn","oSettings","nTh","oDefaults","column","iCol","aoColumns","oCol","oColumn","createElement","sTitle","innerHTML","mData","idx","push","aoPreSearchCols","_fnColumnOptions","data","oOptions","oClasses","th","sWidthOrig","attr","mDataProp","sType","_sManualType","className","sClass","addClass","iDataSort","mDataSrc","_fnGetObjectDataFn","mRender","attrTest","_bAttrSrc","isPlainObject","sort","type","filter","_setter","fnGetData","rowData","meta","innerData","fnSetData","_fnSetObjectDataFn","_rowReadObject","oFeatures","bSort","bSortable","sSortableNone","bAsc","inArray","asSorting","bDesc","sSortingClass","sSortableAsc","sSortingClassJUI","sSortJUIAscAllowed","sSortableDesc","sSortJUIDescAllowed","sSortable","sSortJUI","_fnAdjustColumnSizing","bAutoWidth","columns","_fnCalculateColumnWidths","iLen","style","sWidth","scroll","sY","sX","_fnScrollDraw","_fnCallbackFire","_fnVisibleToColumnIndex","iMatch","aiVis","_fnGetColumns","_fnColumnIndexToVisible","iPos","_fnVisbleColumns","vis","col","bVisible","sParam","_fnColumnTypes","jen","k","ken","detectedType","cache","aoData","types","ext","detect","_fnGetCellData","_fnApplyColumnDefs","aoColDefs","aoCols","jLen","kLen","def","aTargets","targets","hasClass","_fnAddData","aDataIn","nTr","anTds","iRow","oData","oRow","_aData","aiDisplayMaster","id","rowIdFn","aIds","bDeferRender","_fnCreateTr","_fnAddTr","trs","row","el","_fnGetRowElements","cells","_fnNodeToDataIndex","_DT_RowIndex","_fnNodeToColumnIndex","anCells","rowIdx","colIdx","draw","iDraw","defaultContent","sDefaultContent","cellData","iDrawError","_fnLog","call","_fnSetCellData","_fnSplitObjNotation","str","s","mSource","_","fetchData","arrayNotation","funcNotation","out","innerSrc","__reArray","__reFn","splice","join","substring","setData","aLast","slice","_fnGetDataMaster","_pluck","_fnClearTable","aiDisplay","_fnDeleteIndex","iTarget","iTargetIndex","_fnInvalidate","cellWrite","cell","childNodes","removeChild","firstChild","_aSortData","_aFilterData","cols","_fnRowAttributes","name","contents","tds","td","objectRead","setter","getAttribute","cellProcess","trim","nodeName","toUpperCase","nextSibling","rowNode","rowId","nTrIn","nTd","sCellType","_DT_CellIndex","appendChild","parentNode","fnCreatedCell","oInstance","setAttribute","tr","DT_RowClass","__rowc","_unique","concat","removeClass","DT_RowAttr","DT_RowData","_fnBuildHead","thead","nTHead","tfoot","nTFoot","createHeader","classes","iTabIndex","sTableId","_fnSortAttachListener","html","_fnRenderer","_fnDetectHeader","aoHeader","find","sHeaderTH","sFooterTH","aoFooter","nTf","_fnDrawHead","aoSource","bIncludeHidden","nLocalTr","iRowspan","iColspan","aoLocal","aApplied","iColumns","_fnDraw","aPreDraw","_fnProcessingDisplay","anRows","iRowCount","asStripeClasses","iStripes","oLang","aoOpenRows","iInitDisplayStart","bServerSide","_fnDataSource","bDrawing","_iDisplayStart","fnRecordsDisplay","iDisplayStart","iDisplayEnd","fnDisplayEnd","bDeferLoading","bDestroying","_fnAjaxUpdate","iStart","iEnd","iDataIndex","nRow","sStripe","_sRowStripe","sZero","fnRecordsTotal","class","valign","colSpan","sRowEmpty","body","nTBody","detach","bSorted","bFiltered","_fnReDraw","holdPosition","features","bFilter","_fnSort","_fnFilterComplete","oPreviousSearch","_drawHold","_fnAddOptionsHtml","table","nTable","holding","insertBefore","insert","sWrapper","sNoFooter","nHolding","nTableWrapper","nTableReinsertBefore","featureNode","cOption","nNewNode","cNext","sAttr","aDom","sDom","sJUIHeader","sJUIFooter","aSplit","substr","parent","bPaginate","bLengthChange","_fnFeatureHtmlLength","_fnFeatureHtmlFilter","bProcessing","_fnFeatureHtmlProcessing","_fnFeatureHtmlTable","bInfo","_fnFeatureHtmlInfo","_fnFeatureHtmlPaginate","feature","aoFeatures","cFeature","fnInit","aanFeatures","replaceWith","aLayout","nThead","nCell","l","iColShifted","iColumn","bUnique","nTrs","fnShiftCol","unique","_fnGetUniqueThs","nHeader","aReturn","bSortCellsTop","_fnBuildAjax","tmp","rbracket","ajaxData","ajax","instance","callback","json","jqXHR","newData","isFunction","baseAjax","success","error","sError","dataType","sServerMethod","xhr","thrown","ret","readyState","oAjaxData","fnServerData","sAjaxSource","url","bAjaxDataGet","_fnAjaxParameters","_fnAjaxUpdateDraw","dataProp","columnSearch","columnCount","preSearch","preColSearch","_fnSortFlatten","displayStart","displayLength","_iDisplayLength","param","order","search","sSearch","regex","bRegex","sName","searchable","bSearchable","orderable","dir","legacy","compat","old","modern","_fnAjaxDataSrc","recordsTotal","recordsFiltered","_iRecordsTotal","parseInt","_iRecordsDisplay","_bInitComplete","_fnInitComplete","dataSrc","sAjaxDataProp","aaData","tableId","language","previousSearch","input","sFilterInput","sFilter","searchFn","bSmart","bCaseInsensitive","searchDelay","jqFilter","sSearchPlaceholder","on","_fnThrottle","keyCode","ev","activeElement","oInput","iForce","oPrevSearch","aoPrevSearch","fnSaveFilter","oFilter","fnRegex","bEscapeRegex","_fnFilter","_fnFilterColumn","_fnFilterCustom","filters","displayRows","rows","merge","searchStr","smart","caseInsensitive","display","rpSearch","_fnFilterCreateSearch","test","invalidated","prevSearch","displayMaster","filtered","_fnFilterData","_sFilterRow","_fnEscapeRegex","word","m","RegExp","filterData","fomatters","wasInvalidated","toString","__filter_div","__filter_div_textContent","textContent","innerText","_fnSearchToCamel","obj","_fnSearchToHung","tid","nodes","sInfo","aoDrawCallback","_fnUpdateInfo","max","total","sInfoEmpty","sInfoFiltered","sInfoPostFix","_fnInfoMacros","fnInfoCallback","formatter","fnFormatNumber","len","all","ceil","_fnInitialise","iAjaxStart","deferLoading","bInitialised","setTimeout","_fnStringToCss","aData","oInit","_fnLengthChange","_fnLengthOverflow","menu","aLengthMenu","d2","lengths","select","aria-controls","sLengthSelect","Option","div","sLength","sLengthMenu","outerHTML","sPaginationType","plugin","pager","redraw","node","sPaging","p","visRecords","page","pages","buttons","fnUpdate","_fnPageChange","action","records","floor","changed","r","sProcessing","show","scrollY","caption","captionSide","_captionSide","headerClone","cloneNode","footerClone","footer","_div","size","scroller","sScrollWrapper","sScrollHead","border","sScrollHeadInner","box-sizing","sXInner","removeAttr","sScrollBody","sScrollFoot","sScrollFootInner","scrollHead","scrollBody","scrollFoot","bCollapse","nScrollHead","nScrollBody","nScrollFoot","headerTrgEls","footerTrgEls","headerSrcEls","footerSrcEls","headerCopy","footerCopy","correction","sanityWidth","scrollXInner","divHeader","divHeaderStyle","divHeaderInner","divHeaderInnerStyle","divHeaderTable","divBodyEl","divBody","divBodyStyle","divFooter","divFooterInner","divFooterTable","header","tableEl","tableStyle","ie67","dtHeaderCells","headerWidths","footerWidths","headerContent","footerContent","zeroOut","nSizer","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","scrollBarVis","scrollHeight","clientHeight","clone","prependTo","_fnApplyToChildren","outerWidth","offsetHeight","nToSize","iOuterWidth","bScrolling","padding","scrollTop","an1","an2","nNode1","nNode2","nodeType","columnIdx","visibleColumns","headerCells","tableWidthAttr","tableContainer","userInputs","styleWidth","_fnConvertToWidth","eq","tmpTable","margin","_fnGetWidestNode","sContentPadding","holder","right","bounding","_reszEvt","bindResize","sInstance","_fnGetMaxLenString","maxIdx","__re_html_remove","srcCol","aSort","fixed","aaSortingFixed","fixedObj","nestedSort","add","pre","aaSorting","post","_idx","sortCol","aiOrig","oExtSort","formatters","_fnSortData","x","y","dataA","dataB","_fnSortAria","label","nextSort","oAria","removeAttribute","sSortAscending","sSortDescending","_fnSortListener","nextSortIdx","sorting","next","bSortMulti","sortIdx","attachTo","_fnBindAction","shiftKey","_fnSortingClasses","oldSort","aLastSort","sortClass","sSortColumn","bSortClasses","customData","customSort","sSortDataType","_fnSaveState","bStateSave","state","time","Date","visible","oSavedState","fnStateSaveCallback","_fnLoadState","loaded","abStateLoad","duration","iStateDuration","oLoadedState","fnStateLoadCallback","_fnSettingsFromNode","level","msg","tn","console","log","sErrMode","errMode","alert","Error","mappedName","_fnExtend","extender","breakRefs","prop","blur","which","preventDefault","_fnCallbackReg","sStore","callbackArr","eventName","args","reverse","apply","Event","trigger","result","renderer","host","_numbers","numbers","extPagination","numbers_length","half","_range","DT_el","decimalPlace","num","__numericReplace","num-fmt","_re_formatted_numeric","html-num","_re_html","html-num-fmt","_ext","_fnExternApiFunc","iApiIndex","Array","prototype","arguments","internal","_Api","_api_register","_api_registerPlural","options","sSelector","oOpts","api","traditional","fnAddData","flatten","toArray","fnAdjustColumnSizing","bRedraw","adjust","fnClearTable","clear","fnClose","child","hide","fnDeleteRow","target","fnDestroy","destroy","fnDraw","complete","fnFilter","sInput","bShowGlobal","fnGetNodes","fnGetPosition","columnVisible","fnIsOpen","isShown","fnOpen","mHtml","fnPageChange","mAction","fnSetColumnVis","bShow","fnSettings","fnSort","aaSort","fnSortListener","nNode","fnCallback","listener","mRow","bAction","fnVersionCheck","_that","emptyInit","oApi","sId","bInitHandedOff","$this","allSettings","bRetrieve","bDestroy","sDestroyWidth","dataTable","iDisplayLength","fnDrawCallback","fnServerParams","fnStateSaveParams","fnStateLoadParams","fnStateLoaded","fnRowCallback","fnCreatedRow","fnHeaderCallback","fnFooterCallback","fnInitComplete","fnPreDrawCallback","sTable","iDeferLoading","sUrl","sStripeOdd","sStripeEven","stripeClasses","rowOne","asDestroyStripes","aoColumnsInit","anThs","getElementsByTagName","aoColumnDefs","oDef","loadedInit","sortedColumns","captions","tbody","_re_dic","_re_new_lines","_re_date","_re_escape_regex","_empty","_intVal","integer","isNaN","isFinite","_numToDecimal","decimalPoint","_isNumber","formatted","strType","parseFloat","_isHtml","_htmlNumeric","_stripHtml","prop2","_pluck_order","_removeEmpty","_areAllUnique","sorted","last","again","util","throttle","freq","timer","frequency","now","clearTimeout","escapeRegex","knew","__apiStruct","__arrayProto","_toSettings","mixed","jq","tables","context","ctxSettings","selector","opts","Api","any","count","ctx","iterator","alwaysNew","items","item","apiInst","_selector_row_indexes","apiSelector","lastIndexOf","pluck","pop","reduce","reduceRight","shift","to$","toJQuery","unshift","scope","__dt_wrapper","struct","methodScoping","struc","methodExt","propExt","register","method","heir","registerPlural","pluralName","singularName","__table_selector","paging","info","recordsDisplay","serverSide","__reload","one","abort","resetPaging","_selector_run","selectFn","res","selectorType","_selector_opts","_selector_first","inst","displayFiltered","__row_selector","run","sel","selInt","closest","rowObj","hash","thatIdx","loopRow","loopCells","newRows","modRows","__details_add","klass","addRow","created","_details","_detailsShow","insertAfter","__details_remove","__details_display","__details_events","namespace","drawEvent","colvisEvent","destroyEvent","off","_emp","_child_obj","_child_mth","__re_column_selector","__columnData","r1","r2","__column_selector","names","visColumns","jqResult","__setColumnVis","calc","__cell_selector","allCells","fnSelector","rowSelector","columnSelector","set","caseInsen","versionCheck","version","iThis","iThat","aThis","aThat","isDataTable","fnIsDataTable","get","is","head","foot","fnTables","camelToHungarian","jqRows","orig","jqTable","jqTbody","jqWrapper","removedMethod","arg1","arg2","arg3","arg4","token","plural","resolved","bScrollCollapse","toFormat","JSON","parse","sessionStorage","localStorage","getItem","location","pathname","setItem","stringify","oPaginate","sFirst","sLast","sNext","sPrevious","sScrollXInner","sScrollY","aoRowCallback","aoHeaderCallback","aoFooterCallback","aoRowCreatedCallback","aoPreDrawCallback","aoInitComplete","aoStateSaveParams","aoStateLoadParams","aoStateLoaded","aoStateSave","aoStateLoad","aoServerParams","aoDestroyCallback","paginate","min","oPlugins","builder","pageButton","oJUIClasses","sVersion","afnFiltering","aTypes","ofnSearch","oSort","afnSortData","oStdClasses","oPagination","sPageButton","sPageButtonActive","sPageButtonDisabled","sSortAsc","sSortDesc","sSortJUIAsc","sSortJUIDesc","sSortJUIWrapper","sSortIcon","simple","full","simple_numbers","full_numbers","first_last_numbers","btnDisplay","btnClass","activeEl","aria","counter","attach","container","button","clickHandler","aria-label","data-dt-idx","tabindex","empty","focus","parsed","string","re1","re2","Infinity","date-pre","html-pre","string-pre","string-asc","string-desc","jqueryui","__htmlEscapeEntities","render","number","thousands","precision","prefix","postfix","negative","flo","toFixed","abs","intPart","floatPart","text","_fnCalculateEnd","dataTableSettings","dataTableExt","TableTools","ZeroClipboard_TableTools","clients","moviePath","nextId","thingy","getElementById","setMoviePath","path","dispatch","client","receiveEvent","getDOMObjectPosition","offsetLeft","offsetTop","offsetParent","Client","elem","handlers","movieId","glue","ready","movie","clipText","fileName","handCursorEnabled","cssEffects","sized","title","domElement","zIndex","box","getHTML","positionElement","flash","flashvars","navigator","userAgent","protocol","href","reposition","clearText","appendText","newText","setText","setCharSet","charSet","setBomInc","bomInc","incBom","setFileName","setAction","addEventListener","func","setHandCursor","enabled","setCSSEffects","self","recoverActive","oDT","dtSettings","dt","print","saveStart","saveLength","saveScroll","funcEnd","buttonCounter","selected","preRowSelect","postSelected","postDeselected","selectedClass","custom","swfPath","buttonSet","master","tags","dom","hidden","collection","background","bJUI","classes_themeroller","_aInstances","_fnConstruct","fnGetSelected","displayed","_DTTT_selected","fnGetSelectedData","fnGetSelectedIndexes","fnIsSelected","pos","fnSelectAll","_fnRowSelect","fnSelectNone","_fnRowDeselect","fnSelect","fnDeselect","fnGetTitle","oConfig","anTitle","fnCalcColRatios","aColumnsInc","_fnColumnTargets","mColumns","aColWidths","iWidth","iTotal","fnGetTableData","_fnGetDataTablesData","fnSetText","clip","_fnFlashSetText","fnResizeButtons","cli","fnResizeRequired","fnPrint","bView","_fnPrintStart","_fnPrintEnd","fnInfo","fadeOut","fnContainer","_fnCustomiseSettings","_fnRowSelectConfig","_fnButtonDefinations","sRowSelector","_TableToolsInit","DEFAULTS","sSwfPath","sRowSelect","fnPreRowSelect","fnRowSelected","fnRowDeselected","sSelectedClass","oTags","aButtons","wrapper","buttonDef","BUTTONS","sExtends","_fnCreateButton","bCollectionButton","nButton","_fnButtonBase","sAction","_fnHasFlash","_fnFlashConfig","_fnTextConfig","_fnCollectionConfig","stopPropagation","sTag","sLiner","sLinerTag","liner","normal","nSpan","masterS","_fnGetMasterSettings","sButtonClass","sButtonText","instances","nHidden","_collection","_fnCollectionShow","oPos","iDivX","iDivY","outerHeight","iWinHeight","iDocHeight","iWinWidth","iDocWidth","nBackground","iDivWidth","iDivHeight","animate","opacity","click","_fnCollectionHide","parents","ctrlKey","metaKey","rowIdxs","idx1","lastRow","idx2","_fnSelectData","anSelected","_fnEventDispatch","anDeselectedTrs","sToolTip","hover","fnMouseover","fnMouseout","_fnEventListen","fnClick","fnComplete","fo","ActiveXObject","mimeTypes","enabledPlugin","sCharSet","bBomInc","sFileName","_fnFlashGlue","sData","asData","_fnChunkData","aColumns","_fnNewline","sNewLine","aRow","arr","sLoopData","sFieldBoundary","bSelectedOnly","bHeader","_fnHtmlDecode","_fnBoundData","sFieldSeperator","aDataIndex","aSelected","oSelectorOpts","indexes","mTypeData","fnCellRender","bOpenRows","grep","nParent","bFooter","_sLastData","sBoundary","iSize","asReturn","iStrlen","match2","String","fromCharCode","Number","nodeValue","oSetDT","_fnPrintHideNodes","bShowAll","_fnPrintScrollStart","bind","anFeature","sMessage","scrollTo","oSetPrint","_fnPrintShowNodes","unbind","_fnPrintScrollEnd","nTheadSize","nTfootSize","nScrollHeadInner","anHidden","nChildren","sDisplay","_aListeners","fnGetMasters","fnGetInstance","listeners","buttonBase","csv","xls","copy","lines","pdf","sPdfOrientation","sPdfSize","sPdfMessage","disabled","select_single","iSelected","select_all","select_none","sAjaxUrl","fnAjaxComplete","CLASS","tt","oDTSettings","tableTools","oTableTools","sFeature","oTT","serialize","app_url","showErrorMessage","showSuccessMessage","request","base","app_name","base_url","delay","createDoorsEventsResultBody","event_datetime","unix_event_datetime","event_datetime_formated","fname","lname","tam","event_type","moment","x_timestamp","unix","format","x_fname","x_lname","x_hist_type","x_term_name","createPermissionTableBody","created_datetime","unix_created_datetime","created_datetime_formated","department","c_s_timestamp","c_fname","c_lname","dept_name","createDataTable","selectorExist","createCallsDataTable","orderArray","destroyDataTable","table_var","reinitialiseDataTable","getGeneralUpdateTime","async","response","updateDefaultTable","lastDoorMovTable","events","lastDoorMov","generalRefreshTime","setInterval","fadeIn","valor","dropdown","checkbox","tab","calendar","date","day","getDate","month","getMonth","year","getFullYear","ampm","monthFirst","fullCalendar","locale","contentHeight","aspectRatio","googleCalendarApiKey","eventSources","googleCalendarId","eventClick","calEvent","jsEvent","view","showEventDetailsModal","vegas","slides","overlay","event","gMapSearchBasePathES","description","formatedLocation","mapUrl","mapLink","diff","durationHours","asHours","modal","blurring","show_single_event","show_ve_holidays_event","show_christian_event","show_birthday_event","show_wedding_event","show_executive_event","show_bank_event"],"mappings":"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","file":"main.js","sourcesContent":["/*\r\n * js-sha1 v0.3.0\r\n * https://github.com/emn178/js-sha1\r\n *\r\n * Copyright 2014-2015, emn178@gmail.com\r\n *\r\n * Licensed under the MIT license:\r\n * http://www.opensource.org/licenses/MIT\r\n */\r\n;(function(root, undefined){\r\n  'use strict';\r\n\r\n  var NODE_JS = typeof(module) != 'undefined';\r\n  if(NODE_JS) {\r\n    root = global;\r\n  }\r\n  var HEX_CHARS = '0123456789abcdef'.split('');\r\n  var EXTRA = [-2147483648, 8388608, 32768, 128];\r\n  var SHIFT = [24, 16, 8, 0];\r\n\r\n  var blocks = [];\r\n\r\n  var sha1 = function(message) {\r\n    var notString = typeof(message) != 'string';\r\n    if(notString && message.constructor == ArrayBuffer) {\r\n      message = new Uint8Array(message);\r\n    }\r\n\r\n    var h0, h1, h2, h3, h4, block = 0, code, end = false, t, f,\r\n        i, j, index = 0, start = 0, bytes = 0, length = message.length;\r\n\r\n    h0 = 0x67452301;\r\n    h1 = 0xEFCDAB89;\r\n    h2 = 0x98BADCFE;\r\n    h3 = 0x10325476;\r\n    h4 = 0xC3D2E1F0;\r\n\r\n    do {\r\n      blocks[0] = block;\r\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\r\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\r\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\r\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\r\n      if(notString) {\r\n        for (i = start;index < length && i < 64; ++index) {\r\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\r\n        }\r\n      } else {\r\n        for (i = start;index < length && i < 64; ++index) {\r\n          code = message.charCodeAt(index);\r\n          if (code < 0x80) {\r\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\r\n          } else if (code < 0x800) {\r\n            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n          } else if (code < 0xd800 || code >= 0xe000) {\r\n            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n          } else {\r\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\r\n            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n          }\r\n        }\r\n      }\r\n      bytes += i - start;\r\n      start = i - 64;\r\n      if(index == length) {\r\n        blocks[i >> 2] |= EXTRA[i & 3];\r\n        ++index;\r\n      }\r\n      block = blocks[16];\r\n      if(index > length && i < 56) {\r\n        blocks[15] = bytes << 3;\r\n        end = true;\r\n      }\r\n\r\n      for(j = 16;j < 80;++j) {\r\n        t = blocks[j - 3] ^ blocks[j - 8] ^ blocks[j - 14] ^ blocks[j - 16];\r\n        blocks[j] =  (t << 1) | (t >>> 31);\r\n      }\r\n\r\n      var a = h0, b = h1, c = h2, d = h3, e = h4;\r\n      for(j = 0;j < 20;j += 5) {\r\n        f = (b & c) | ((~b) & d);\r\n        t = (a << 5) | (a >>> 27);\r\n        e = t + f + e + 1518500249 + blocks[j] << 0;\r\n        b = (b << 30) | (b >>> 2);\r\n\r\n        f = (a & b) | ((~a) & c);\r\n        t = (e << 5) | (e >>> 27);\r\n        d = t + f + d + 1518500249 + blocks[j + 1] << 0;\r\n        a = (a << 30) | (a >>> 2);\r\n\r\n        f = (e & a) | ((~e) & b);\r\n        t = (d << 5) | (d >>> 27);\r\n        c = t + f + c + 1518500249 + blocks[j + 2] << 0;\r\n        e = (e << 30) | (e >>> 2);\r\n\r\n        f = (d & e) | ((~d) & a);\r\n        t = (c << 5) | (c >>> 27);\r\n        b = t + f + b + 1518500249 + blocks[j + 3] << 0;\r\n        d = (d << 30) | (d >>> 2);\r\n\r\n        f = (c & d) | ((~c) & e);\r\n        t = (b << 5) | (b >>> 27);\r\n        a = t + f + a + 1518500249 + blocks[j + 4] << 0;\r\n        c = (c << 30) | (c >>> 2);\r\n      }\r\n\r\n      for(;j < 40;j += 5) {\r\n        f = b ^ c ^ d;\r\n        t = (a << 5) | (a >>> 27);\r\n        e = t + f + e + 1859775393 + blocks[j] << 0;\r\n        b = (b << 30) | (b >>> 2);\r\n\r\n        f = a ^ b ^ c;\r\n        t = (e << 5) | (e >>> 27);\r\n        d = t + f + d + 1859775393 + blocks[j + 1] << 0;\r\n        a = (a << 30) | (a >>> 2);\r\n\r\n        f = e ^ a ^ b;\r\n        t = (d << 5) | (d >>> 27);\r\n        c = t + f + c + 1859775393 + blocks[j + 2] << 0;\r\n        e = (e << 30) | (e >>> 2);\r\n\r\n        f = d ^ e ^ a;\r\n        t = (c << 5) | (c >>> 27);\r\n        b = t + f + b + 1859775393 + blocks[j + 3] << 0;\r\n        d = (d << 30) | (d >>> 2);\r\n\r\n        f = c ^ d ^ e;\r\n        t = (b << 5) | (b >>> 27);\r\n        a = t + f + a + 1859775393 + blocks[j + 4] << 0;\r\n        c = (c << 30) | (c >>> 2);\r\n      }\r\n\r\n      for(;j < 60;j += 5) {\r\n        f = (b & c) | (b & d) | (c & d);\r\n        t = (a << 5) | (a >>> 27);\r\n        e = t + f + e - 1894007588 + blocks[j] << 0;\r\n        b = (b << 30) | (b >>> 2);\r\n\r\n        f = (a & b) | (a & c) | (b & c);\r\n        t = (e << 5) | (e >>> 27);\r\n        d = t + f + d - 1894007588 + blocks[j + 1] << 0;\r\n        a = (a << 30) | (a >>> 2);\r\n\r\n        f = (e & a) | (e & b) | (a & b);\r\n        t = (d << 5) | (d >>> 27);\r\n        c = t + f + c - 1894007588 + blocks[j + 2] << 0;\r\n        e = (e << 30) | (e >>> 2);\r\n\r\n        f = (d & e) | (d & a) | (e & a);\r\n        t = (c << 5) | (c >>> 27);\r\n        b = t + f + b - 1894007588 + blocks[j + 3] << 0;\r\n        d = (d << 30) | (d >>> 2);\r\n\r\n        f = (c & d) | (c & e) | (d & e);\r\n        t = (b << 5) | (b >>> 27);\r\n        a = t + f + a - 1894007588 + blocks[j + 4] << 0;\r\n        c = (c << 30) | (c >>> 2);\r\n      }\r\n\r\n      for(;j < 80;j += 5) {\r\n        f = b ^ c ^ d;\r\n        t = (a << 5) | (a >>> 27);\r\n        e = t + f + e - 899497514 + blocks[j] << 0;\r\n        b = (b << 30) | (b >>> 2);\r\n\r\n        f = a ^ b ^ c;\r\n        t = (e << 5) | (e >>> 27);\r\n        d = t + f + d - 899497514 + blocks[j + 1] << 0;\r\n        a = (a << 30) | (a >>> 2);\r\n\r\n        f = e ^ a ^ b;\r\n        t = (d << 5) | (d >>> 27);\r\n        c = t + f + c - 899497514 + blocks[j + 2] << 0;\r\n        e = (e << 30) | (e >>> 2);\r\n\r\n        f = d ^ e ^ a;\r\n        t = (c << 5) | (c >>> 27);\r\n        b = t + f + b - 899497514 + blocks[j + 3] << 0;\r\n        d = (d << 30) | (d >>> 2);\r\n\r\n        f = c ^ d ^ e;\r\n        t = (b << 5) | (b >>> 27);\r\n        a = t + f + a - 899497514 + blocks[j + 4] << 0;\r\n        c = (c << 30) | (c >>> 2);\r\n      }\r\n\r\n      h0 = h0 + a << 0;\r\n      h1 = h1 + b << 0;\r\n      h2 = h2 + c << 0;\r\n      h3 = h3 + d << 0;\r\n      h4 = h4 + e << 0;\r\n    } while(!end);\r\n\r\n    return HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\r\n           HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\r\n           HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\r\n           HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\r\n           HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\r\n           HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\r\n           HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\r\n           HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\r\n           HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\r\n           HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\r\n           HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\r\n           HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\r\n           HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +\r\n           HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\r\n           HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\r\n           HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\r\n           HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +\r\n           HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +\r\n           HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +\r\n           HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F];\r\n  };\r\n\r\n  if(!root.JS_SHA1_TEST && typeof(module) != 'undefined') {\r\n    var crypto = require('crypto');\r\n    var Buffer = require('buffer').Buffer;\r\n\r\n    module.exports = function(message) {\r\n      if(typeof(message) == 'string') {\r\n        return crypto.createHash('sha1').update(message, 'utf8').digest('hex');\r\n      }\r\n      if(message.constructor == ArrayBuffer) {\r\n        message = new Uint8Array(message);\r\n      }\r\n      return crypto.createHash('sha1').update(new Buffer(message)).digest('hex');\r\n    };\r\n  } else if(root) {\r\n    root.sha1 = sha1;\r\n  }\r\n}(this));\r\n","/*! DataTables 1.10.16\n * ©2008-2017 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * @summary     DataTables\n * @description Paginate, search and order HTML tables\n * @version     1.10.16\n * @file        jquery.dataTables.js\n * @author      SpryMedia Ltd\n * @contact     www.datatables.net\n * @copyright   Copyright 2008-2017 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n\n/*jslint evil: true, undef: true, browser: true */\n/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/\n\n(function( factory ) {\n\t\"use strict\";\n\n\tif ( typeof define === 'function' && define.amd ) {\n\t\t// AMD\n\t\tdefine( ['jquery'], function ( $ ) {\n\t\t\treturn factory( $, window, document );\n\t\t} );\n\t}\n\telse if ( typeof exports === 'object' ) {\n\t\t// CommonJS\n\t\tmodule.exports = function (root, $) {\n\t\t\tif ( ! root ) {\n\t\t\t\t// CommonJS environments without a window global must pass a\n\t\t\t\t// root. This will give an error otherwise\n\t\t\t\troot = window;\n\t\t\t}\n\n\t\t\tif ( ! $ ) {\n\t\t\t\t$ = typeof window !== 'undefined' ? // jQuery's factory checks for a global window\n\t\t\t\t\trequire('jquery') :\n\t\t\t\t\trequire('jquery')( root );\n\t\t\t}\n\n\t\t\treturn factory( $, root, root.document );\n\t\t};\n\t}\n\telse {\n\t\t// Browser\n\t\tfactory( jQuery, window, document );\n\t}\n}\n(function( $, window, document, undefined ) {\n\t\"use strict\";\n\n\t/**\n\t * DataTables is a plug-in for the jQuery Javascript library. It is a highly\n\t * flexible tool, based upon the foundations of progressive enhancement,\n\t * which will add advanced interaction controls to any HTML table. For a\n\t * full list of features please refer to\n\t * [DataTables.net](href=\"http://datatables.net).\n\t *\n\t * Note that the `DataTable` object is not a global variable but is aliased\n\t * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may\n\t * be  accessed.\n\t *\n\t *  @class\n\t *  @param {object} [init={}] Configuration object for DataTables. Options\n\t *    are defined by {@link DataTable.defaults}\n\t *  @requires jQuery 1.7+\n\t *\n\t *  @example\n\t *    // Basic initialisation\n\t *    $(document).ready( function {\n\t *      $('#example').dataTable();\n\t *    } );\n\t *\n\t *  @example\n\t *    // Initialisation with configuration options - in this case, disable\n\t *    // pagination and sorting.\n\t *    $(document).ready( function {\n\t *      $('#example').dataTable( {\n\t *        \"paginate\": false,\n\t *        \"sort\": false\n\t *      } );\n\t *    } );\n\t */\n\tvar DataTable = function ( options )\n\t{\n\t\t/**\n\t\t * Perform a jQuery selector action on the table's TR elements (from the tbody) and\n\t\t * return the resulting jQuery object.\n\t\t *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n\t\t *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n\t\t *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter\n\t\t *    criterion (\"applied\") or all TR elements (i.e. no filter).\n\t\t *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.\n\t\t *    Can be either 'current', whereby the current sorting of the table is used, or\n\t\t *    'original' whereby the original order the data was read into the table is used.\n\t\t *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n\t\t *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n\t\t *    'current' and filter is 'applied', regardless of what they might be given as.\n\t\t *  @returns {object} jQuery object, filtered by the given selector.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Highlight every second row\n\t\t *      oTable.$('tr:odd').css('backgroundColor', 'blue');\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Filter to rows with 'Webkit' in them, add a background colour and then\n\t\t *      // remove the filter, thus highlighting the 'Webkit' rows only.\n\t\t *      oTable.fnFilter('Webkit');\n\t\t *      oTable.$('tr', {\"search\": \"applied\"}).css('backgroundColor', 'blue');\n\t\t *      oTable.fnFilter('');\n\t\t *    } );\n\t\t */\n\t\tthis.$ = function ( sSelector, oOpts )\n\t\t{\n\t\t\treturn this.api(true).$( sSelector, oOpts );\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Almost identical to $ in operation, but in this case returns the data for the matched\n\t\t * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes\n\t\t * rather than any descendants, so the data can be obtained for the row/cell. If matching\n\t\t * rows are found, the data returned is the original data array/object that was used to\n\t\t * create the row (or a generated array if from a DOM source).\n\t\t *\n\t\t * This method is often useful in-combination with $ where both functions are given the\n\t\t * same parameters and the array indexes will match identically.\n\t\t *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n\t\t *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n\t\t *  @param {string} [oOpts.filter=none] Select elements that meet the current filter\n\t\t *    criterion (\"applied\") or all elements (i.e. no filter).\n\t\t *  @param {string} [oOpts.order=current] Order of the data in the processed array.\n\t\t *    Can be either 'current', whereby the current sorting of the table is used, or\n\t\t *    'original' whereby the original order the data was read into the table is used.\n\t\t *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n\t\t *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n\t\t *    'current' and filter is 'applied', regardless of what they might be given as.\n\t\t *  @returns {array} Data for the matched elements. If any elements, as a result of the\n\t\t *    selector, were not TR, TD or TH elements in the DataTable, they will have a null\n\t\t *    entry in the array.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Get the data from the first row in the table\n\t\t *      var data = oTable._('tr:first');\n\t\t *\n\t\t *      // Do something useful with the data\n\t\t *      alert( \"First cell is: \"+data[0] );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Filter to 'Webkit' and get all data for\n\t\t *      oTable.fnFilter('Webkit');\n\t\t *      var data = oTable._('tr', {\"search\": \"applied\"});\n\t\t *\n\t\t *      // Do something with the data\n\t\t *      alert( data.length+\" rows matched the search\" );\n\t\t *    } );\n\t\t */\n\t\tthis._ = function ( sSelector, oOpts )\n\t\t{\n\t\t\treturn this.api(true).rows( sSelector, oOpts ).data();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Create a DataTables Api instance, with the currently selected tables for\n\t\t * the Api's context.\n\t\t * @param {boolean} [traditional=false] Set the API instance's context to be\n\t\t *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was\n\t\t *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),\n\t\t *   or if all tables captured in the jQuery object should be used.\n\t\t * @return {DataTables.Api}\n\t\t */\n\t\tthis.api = function ( traditional )\n\t\t{\n\t\t\treturn traditional ?\n\t\t\t\tnew _Api(\n\t\t\t\t\t_fnSettingsFromNode( this[ _ext.iApiIndex ] )\n\t\t\t\t) :\n\t\t\t\tnew _Api( this );\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Add a single new row or multiple rows of data to the table. Please note\n\t\t * that this is suitable for client-side processing only - if you are using\n\t\t * server-side processing (i.e. \"bServerSide\": true), then to add data, you\n\t\t * must add it to the data source, i.e. the server-side, through an Ajax call.\n\t\t *  @param {array|object} data The data to be added to the table. This can be:\n\t\t *    <ul>\n\t\t *      <li>1D array of data - add a single row with the data provided</li>\n\t\t *      <li>2D array of arrays - add multiple rows in a single call</li>\n\t\t *      <li>object - data object when using <i>mData</i></li>\n\t\t *      <li>array of objects - multiple data objects when using <i>mData</i></li>\n\t\t *    </ul>\n\t\t *  @param {bool} [redraw=true] redraw the table or not\n\t\t *  @returns {array} An array of integers, representing the list of indexes in\n\t\t *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to\n\t\t *    the table.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    // Global var for counter\n\t\t *    var giCount = 2;\n\t\t *\n\t\t *    $(document).ready(function() {\n\t\t *      $('#example').dataTable();\n\t\t *    } );\n\t\t *\n\t\t *    function fnClickAddRow() {\n\t\t *      $('#example').dataTable().fnAddData( [\n\t\t *        giCount+\".1\",\n\t\t *        giCount+\".2\",\n\t\t *        giCount+\".3\",\n\t\t *        giCount+\".4\" ]\n\t\t *      );\n\t\t *\n\t\t *      giCount++;\n\t\t *    }\n\t\t */\n\t\tthis.fnAddData = function( data, redraw )\n\t\t{\n\t\t\tvar api = this.api( true );\n\t\t\n\t\t\t/* Check if we want to add multiple rows or not */\n\t\t\tvar rows = $.isArray(data) && ( $.isArray(data[0]) || $.isPlainObject(data[0]) ) ?\n\t\t\t\tapi.rows.add( data ) :\n\t\t\t\tapi.row.add( data );\n\t\t\n\t\t\tif ( redraw === undefined || redraw ) {\n\t\t\t\tapi.draw();\n\t\t\t}\n\t\t\n\t\t\treturn rows.flatten().toArray();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * This function will make DataTables recalculate the column sizes, based on the data\n\t\t * contained in the table and the sizes applied to the columns (in the DOM, CSS or\n\t\t * through the sWidth parameter). This can be useful when the width of the table's\n\t\t * parent element changes (for example a window resize).\n\t\t *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable( {\n\t\t *        \"sScrollY\": \"200px\",\n\t\t *        \"bPaginate\": false\n\t\t *      } );\n\t\t *\n\t\t *      $(window).on('resize', function () {\n\t\t *        oTable.fnAdjustColumnSizing();\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\tthis.fnAdjustColumnSizing = function ( bRedraw )\n\t\t{\n\t\t\tvar api = this.api( true ).columns.adjust();\n\t\t\tvar settings = api.settings()[0];\n\t\t\tvar scroll = settings.oScroll;\n\t\t\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\t\tapi.draw( false );\n\t\t\t}\n\t\t\telse if ( scroll.sX !== \"\" || scroll.sY !== \"\" ) {\n\t\t\t\t/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */\n\t\t\t\t_fnScrollDraw( settings );\n\t\t\t}\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Quickly and simply clear a table\n\t\t *  @param {bool} [bRedraw=true] redraw the table or not\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)\n\t\t *      oTable.fnClearTable();\n\t\t *    } );\n\t\t */\n\t\tthis.fnClearTable = function( bRedraw )\n\t\t{\n\t\t\tvar api = this.api( true ).clear();\n\t\t\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\t\tapi.draw();\n\t\t\t}\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * The exact opposite of 'opening' a row, this function will close any rows which\n\t\t * are currently 'open'.\n\t\t *  @param {node} nTr the table row to 'close'\n\t\t *  @returns {int} 0 on success, or 1 if failed (can't find the row)\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable;\n\t\t *\n\t\t *      // 'open' an information row when a row is clicked on\n\t\t *      $('#example tbody tr').click( function () {\n\t\t *        if ( oTable.fnIsOpen(this) ) {\n\t\t *          oTable.fnClose( this );\n\t\t *        } else {\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n\t\t *        }\n\t\t *      } );\n\t\t *\n\t\t *      oTable = $('#example').dataTable();\n\t\t *    } );\n\t\t */\n\t\tthis.fnClose = function( nTr )\n\t\t{\n\t\t\tthis.api( true ).row( nTr ).child.hide();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Remove a row for the table\n\t\t *  @param {mixed} target The index of the row from aoData to be deleted, or\n\t\t *    the TR element you want to delete\n\t\t *  @param {function|null} [callBack] Callback function\n\t\t *  @param {bool} [redraw=true] Redraw the table or not\n\t\t *  @returns {array} The row that was deleted\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Immediately remove the first row\n\t\t *      oTable.fnDeleteRow( 0 );\n\t\t *    } );\n\t\t */\n\t\tthis.fnDeleteRow = function( target, callback, redraw )\n\t\t{\n\t\t\tvar api = this.api( true );\n\t\t\tvar rows = api.rows( target );\n\t\t\tvar settings = rows.settings()[0];\n\t\t\tvar data = settings.aoData[ rows[0][0] ];\n\t\t\n\t\t\trows.remove();\n\t\t\n\t\t\tif ( callback ) {\n\t\t\t\tcallback.call( this, settings, data );\n\t\t\t}\n\t\t\n\t\t\tif ( redraw === undefined || redraw ) {\n\t\t\t\tapi.draw();\n\t\t\t}\n\t\t\n\t\t\treturn data;\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Restore the table to it's original state in the DOM by removing all of DataTables\n\t\t * enhancements, alterations to the DOM structure of the table and event listeners.\n\t\t *  @param {boolean} [remove=false] Completely remove the table from the DOM\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      // This example is fairly pointless in reality, but shows how fnDestroy can be used\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      oTable.fnDestroy();\n\t\t *    } );\n\t\t */\n\t\tthis.fnDestroy = function ( remove )\n\t\t{\n\t\t\tthis.api( true ).destroy( remove );\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Redraw the table\n\t\t *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)\n\t\t *      oTable.fnDraw();\n\t\t *    } );\n\t\t */\n\t\tthis.fnDraw = function( complete )\n\t\t{\n\t\t\t// Note that this isn't an exact match to the old call to _fnDraw - it takes\n\t\t\t// into account the new data, but can hold position.\n\t\t\tthis.api( true ).draw( complete );\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Filter the input based on data\n\t\t *  @param {string} sInput String to filter the table on\n\t\t *  @param {int|null} [iColumn] Column to limit filtering to\n\t\t *  @param {bool} [bRegex=false] Treat as regular expression or not\n\t\t *  @param {bool} [bSmart=true] Perform smart filtering or not\n\t\t *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)\n\t\t *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Sometime later - filter...\n\t\t *      oTable.fnFilter( 'test string' );\n\t\t *    } );\n\t\t */\n\t\tthis.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )\n\t\t{\n\t\t\tvar api = this.api( true );\n\t\t\n\t\t\tif ( iColumn === null || iColumn === undefined ) {\n\t\t\t\tapi.search( sInput, bRegex, bSmart, bCaseInsensitive );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tapi.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );\n\t\t\t}\n\t\t\n\t\t\tapi.draw();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Get the data for the whole table, an individual row or an individual cell based on the\n\t\t * provided parameters.\n\t\t *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as\n\t\t *    a TR node then the data source for the whole row will be returned. If given as a\n\t\t *    TD/TH cell node then iCol will be automatically calculated and the data for the\n\t\t *    cell returned. If given as an integer, then this is treated as the aoData internal\n\t\t *    data index for the row (see fnGetPosition) and the data for that row used.\n\t\t *  @param {int} [col] Optional column index that you want the data of.\n\t\t *  @returns {array|object|string} If mRow is undefined, then the data for all rows is\n\t\t *    returned. If mRow is defined, just data for that row, and is iCol is\n\t\t *    defined, only data for the designated cell is returned.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    // Row data\n\t\t *    $(document).ready(function() {\n\t\t *      oTable = $('#example').dataTable();\n\t\t *\n\t\t *      oTable.$('tr').click( function () {\n\t\t *        var data = oTable.fnGetData( this );\n\t\t *        // ... do something with the array / object of data for the row\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Individual cell data\n\t\t *    $(document).ready(function() {\n\t\t *      oTable = $('#example').dataTable();\n\t\t *\n\t\t *      oTable.$('td').click( function () {\n\t\t *        var sData = oTable.fnGetData( this );\n\t\t *        alert( 'The cell clicked on had the value of '+sData );\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\tthis.fnGetData = function( src, col )\n\t\t{\n\t\t\tvar api = this.api( true );\n\t\t\n\t\t\tif ( src !== undefined ) {\n\t\t\t\tvar type = src.nodeName ? src.nodeName.toLowerCase() : '';\n\t\t\n\t\t\t\treturn col !== undefined || type == 'td' || type == 'th' ?\n\t\t\t\t\tapi.cell( src, col ).data() :\n\t\t\t\t\tapi.row( src ).data() || null;\n\t\t\t}\n\t\t\n\t\t\treturn api.data().toArray();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Get an array of the TR nodes that are used in the table's body. Note that you will\n\t\t * typically want to use the '$' API method in preference to this as it is more\n\t\t * flexible.\n\t\t *  @param {int} [iRow] Optional row index for the TR element you want\n\t\t *  @returns {array|node} If iRow is undefined, returns an array of all TR elements\n\t\t *    in the table's body, or iRow is defined, just the TR element requested.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Get the nodes from the table\n\t\t *      var nNodes = oTable.fnGetNodes( );\n\t\t *    } );\n\t\t */\n\t\tthis.fnGetNodes = function( iRow )\n\t\t{\n\t\t\tvar api = this.api( true );\n\t\t\n\t\t\treturn iRow !== undefined ?\n\t\t\t\tapi.row( iRow ).node() :\n\t\t\t\tapi.rows().nodes().flatten().toArray();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Get the array indexes of a particular cell from it's DOM element\n\t\t * and column index including hidden columns\n\t\t *  @param {node} node this can either be a TR, TD or TH in the table's body\n\t\t *  @returns {int} If nNode is given as a TR, then a single index is returned, or\n\t\t *    if given as a cell, an array of [row index, column index (visible),\n\t\t *    column index (all)] is given.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      $('#example tbody td').click( function () {\n\t\t *        // Get the position of the current data from the node\n\t\t *        var aPos = oTable.fnGetPosition( this );\n\t\t *\n\t\t *        // Get the data array for this row\n\t\t *        var aData = oTable.fnGetData( aPos[0] );\n\t\t *\n\t\t *        // Update the data array and return the value\n\t\t *        aData[ aPos[1] ] = 'clicked';\n\t\t *        this.innerHTML = 'clicked';\n\t\t *      } );\n\t\t *\n\t\t *      // Init DataTables\n\t\t *      oTable = $('#example').dataTable();\n\t\t *    } );\n\t\t */\n\t\tthis.fnGetPosition = function( node )\n\t\t{\n\t\t\tvar api = this.api( true );\n\t\t\tvar nodeName = node.nodeName.toUpperCase();\n\t\t\n\t\t\tif ( nodeName == 'TR' ) {\n\t\t\t\treturn api.row( node ).index();\n\t\t\t}\n\t\t\telse if ( nodeName == 'TD' || nodeName == 'TH' ) {\n\t\t\t\tvar cell = api.cell( node ).index();\n\t\t\n\t\t\t\treturn [\n\t\t\t\t\tcell.row,\n\t\t\t\t\tcell.columnVisible,\n\t\t\t\t\tcell.column\n\t\t\t\t];\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Check to see if a row is 'open' or not.\n\t\t *  @param {node} nTr the table row to check\n\t\t *  @returns {boolean} true if the row is currently open, false otherwise\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable;\n\t\t *\n\t\t *      // 'open' an information row when a row is clicked on\n\t\t *      $('#example tbody tr').click( function () {\n\t\t *        if ( oTable.fnIsOpen(this) ) {\n\t\t *          oTable.fnClose( this );\n\t\t *        } else {\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n\t\t *        }\n\t\t *      } );\n\t\t *\n\t\t *      oTable = $('#example').dataTable();\n\t\t *    } );\n\t\t */\n\t\tthis.fnIsOpen = function( nTr )\n\t\t{\n\t\t\treturn this.api( true ).row( nTr ).child.isShown();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * This function will place a new row directly after a row which is currently\n\t\t * on display on the page, with the HTML contents that is passed into the\n\t\t * function. This can be used, for example, to ask for confirmation that a\n\t\t * particular record should be deleted.\n\t\t *  @param {node} nTr The table row to 'open'\n\t\t *  @param {string|node|jQuery} mHtml The HTML to put into the row\n\t\t *  @param {string} sClass Class to give the new TD cell\n\t\t *  @returns {node} The row opened. Note that if the table row passed in as the\n\t\t *    first parameter, is not found in the table, this method will silently\n\t\t *    return.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable;\n\t\t *\n\t\t *      // 'open' an information row when a row is clicked on\n\t\t *      $('#example tbody tr').click( function () {\n\t\t *        if ( oTable.fnIsOpen(this) ) {\n\t\t *          oTable.fnClose( this );\n\t\t *        } else {\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n\t\t *        }\n\t\t *      } );\n\t\t *\n\t\t *      oTable = $('#example').dataTable();\n\t\t *    } );\n\t\t */\n\t\tthis.fnOpen = function( nTr, mHtml, sClass )\n\t\t{\n\t\t\treturn this.api( true )\n\t\t\t\t.row( nTr )\n\t\t\t\t.child( mHtml, sClass )\n\t\t\t\t.show()\n\t\t\t\t.child()[0];\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Change the pagination - provides the internal logic for pagination in a simple API\n\t\t * function. With this function you can have a DataTables table go to the next,\n\t\t * previous, first or last pages.\n\t\t *  @param {string|int} mAction Paging action to take: \"first\", \"previous\", \"next\" or \"last\"\n\t\t *    or page number to jump to (integer), note that page 0 is the first page.\n\t\t *  @param {bool} [bRedraw=true] Redraw the table or not\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      oTable.fnPageChange( 'next' );\n\t\t *    } );\n\t\t */\n\t\tthis.fnPageChange = function ( mAction, bRedraw )\n\t\t{\n\t\t\tvar api = this.api( true ).page( mAction );\n\t\t\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\t\tapi.draw(false);\n\t\t\t}\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Show a particular column\n\t\t *  @param {int} iCol The column whose display should be changed\n\t\t *  @param {bool} bShow Show (true) or hide (false) the column\n\t\t *  @param {bool} [bRedraw=true] Redraw the table or not\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Hide the second column after initialisation\n\t\t *      oTable.fnSetColumnVis( 1, false );\n\t\t *    } );\n\t\t */\n\t\tthis.fnSetColumnVis = function ( iCol, bShow, bRedraw )\n\t\t{\n\t\t\tvar api = this.api( true ).column( iCol ).visible( bShow );\n\t\t\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\t\tapi.columns.adjust().draw();\n\t\t\t}\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Get the settings for a particular table for external manipulation\n\t\t *  @returns {object} DataTables settings object. See\n\t\t *    {@link DataTable.models.oSettings}\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      var oSettings = oTable.fnSettings();\n\t\t *\n\t\t *      // Show an example parameter from the settings\n\t\t *      alert( oSettings._iDisplayStart );\n\t\t *    } );\n\t\t */\n\t\tthis.fnSettings = function()\n\t\t{\n\t\t\treturn _fnSettingsFromNode( this[_ext.iApiIndex] );\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Sort the table by a particular column\n\t\t *  @param {int} iCol the data index to sort on. Note that this will not match the\n\t\t *    'display index' if you have hidden data entries\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Sort immediately with columns 0 and 1\n\t\t *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );\n\t\t *    } );\n\t\t */\n\t\tthis.fnSort = function( aaSort )\n\t\t{\n\t\t\tthis.api( true ).order( aaSort ).draw();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Attach a sort listener to an element for a given column\n\t\t *  @param {node} nNode the element to attach the sort listener to\n\t\t *  @param {int} iColumn the column that a click on this node will sort on\n\t\t *  @param {function} [fnCallback] callback function when sort is run\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Sort on column 1, when 'sorter' is clicked on\n\t\t *      oTable.fnSortListener( document.getElementById('sorter'), 1 );\n\t\t *    } );\n\t\t */\n\t\tthis.fnSortListener = function( nNode, iColumn, fnCallback )\n\t\t{\n\t\t\tthis.api( true ).order.listener( nNode, iColumn, fnCallback );\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Update a table cell or row - this method will accept either a single value to\n\t\t * update the cell with, an array of values with one element for each column or\n\t\t * an object in the same format as the original data source. The function is\n\t\t * self-referencing in order to make the multi column updates easier.\n\t\t *  @param {object|array|string} mData Data to update the cell/row with\n\t\t *  @param {node|int} mRow TR element you want to update or the aoData index\n\t\t *  @param {int} [iColumn] The column to update, give as null or undefined to\n\t\t *    update a whole row.\n\t\t *  @param {bool} [bRedraw=true] Redraw the table or not\n\t\t *  @param {bool} [bAction=true] Perform pre-draw actions or not\n\t\t *  @returns {int} 0 on success, 1 on error\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell\n\t\t *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row\n\t\t *    } );\n\t\t */\n\t\tthis.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )\n\t\t{\n\t\t\tvar api = this.api( true );\n\t\t\n\t\t\tif ( iColumn === undefined || iColumn === null ) {\n\t\t\t\tapi.row( mRow ).data( mData );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tapi.cell( mRow, iColumn ).data( mData );\n\t\t\t}\n\t\t\n\t\t\tif ( bAction === undefined || bAction ) {\n\t\t\t\tapi.columns.adjust();\n\t\t\t}\n\t\t\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\t\tapi.draw();\n\t\t\t}\n\t\t\treturn 0;\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Provide a common method for plug-ins to check the version of DataTables being used, in order\n\t\t * to ensure compatibility.\n\t\t *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note that the\n\t\t *    formats \"X\" and \"X.Y\" are also acceptable.\n\t\t *  @returns {boolean} true if this version of DataTables is greater or equal to the required\n\t\t *    version, or false if this version of DataTales is not suitable\n\t\t *  @method\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      alert( oTable.fnVersionCheck( '1.9.0' ) );\n\t\t *    } );\n\t\t */\n\t\tthis.fnVersionCheck = _ext.fnVersionCheck;\n\t\t\n\n\t\tvar _that = this;\n\t\tvar emptyInit = options === undefined;\n\t\tvar len = this.length;\n\n\t\tif ( emptyInit ) {\n\t\t\toptions = {};\n\t\t}\n\n\t\tthis.oApi = this.internal = _ext.internal;\n\n\t\t// Extend with old style plug-in API methods\n\t\tfor ( var fn in DataTable.ext.internal ) {\n\t\t\tif ( fn ) {\n\t\t\t\tthis[fn] = _fnExternApiFunc(fn);\n\t\t\t}\n\t\t}\n\n\t\tthis.each(function() {\n\t\t\t// For each initialisation we want to give it a clean initialisation\n\t\t\t// object that can be bashed around\n\t\t\tvar o = {};\n\t\t\tvar oInit = len > 1 ? // optimisation for single table case\n\t\t\t\t_fnExtend( o, options, true ) :\n\t\t\t\toptions;\n\n\t\t\t/*global oInit,_that,emptyInit*/\n\t\t\tvar i=0, iLen, j, jLen, k, kLen;\n\t\t\tvar sId = this.getAttribute( 'id' );\n\t\t\tvar bInitHandedOff = false;\n\t\t\tvar defaults = DataTable.defaults;\n\t\t\tvar $this = $(this);\n\t\t\t\n\t\t\t\n\t\t\t/* Sanity check */\n\t\t\tif ( this.nodeName.toLowerCase() != 'table' )\n\t\t\t{\n\t\t\t\t_fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t/* Backwards compatibility for the defaults */\n\t\t\t_fnCompatOpts( defaults );\n\t\t\t_fnCompatCols( defaults.column );\n\t\t\t\n\t\t\t/* Convert the camel-case defaults to Hungarian */\n\t\t\t_fnCamelToHungarian( defaults, defaults, true );\n\t\t\t_fnCamelToHungarian( defaults.column, defaults.column, true );\n\t\t\t\n\t\t\t/* Setting up the initialisation object */\n\t\t\t_fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ) );\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t/* Check to see if we are re-initialising a table */\n\t\t\tvar allSettings = DataTable.settings;\n\t\t\tfor ( i=0, iLen=allSettings.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\tvar s = allSettings[i];\n\t\t\t\n\t\t\t\t/* Base check on table node */\n\t\t\t\tif ( s.nTable == this || s.nTHead.parentNode == this || (s.nTFoot && s.nTFoot.parentNode == this) )\n\t\t\t\t{\n\t\t\t\t\tvar bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;\n\t\t\t\t\tvar bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;\n\t\t\t\n\t\t\t\t\tif ( emptyInit || bRetrieve )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn s.oInstance;\n\t\t\t\t\t}\n\t\t\t\t\telse if ( bDestroy )\n\t\t\t\t\t{\n\t\t\t\t\t\ts.oInstance.fnDestroy();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t_fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\t/* If the element we are initialising has the same ID as a table which was previously\n\t\t\t\t * initialised, but the table nodes don't match (from before) then we destroy the old\n\t\t\t\t * instance by simply deleting it. This is under the assumption that the table has been\n\t\t\t\t * destroyed by other methods. Anyone using non-id selectors will need to do this manually\n\t\t\t\t */\n\t\t\t\tif ( s.sTableId == this.id )\n\t\t\t\t{\n\t\t\t\t\tallSettings.splice( i, 1 );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/* Ensure the table has an ID - required for accessibility */\n\t\t\tif ( sId === null || sId === \"\" )\n\t\t\t{\n\t\t\t\tsId = \"DataTables_Table_\"+(DataTable.ext._unique++);\n\t\t\t\tthis.id = sId;\n\t\t\t}\n\t\t\t\n\t\t\t/* Create the settings object for this table and set some of the default parameters */\n\t\t\tvar oSettings = $.extend( true, {}, DataTable.models.oSettings, {\n\t\t\t\t\"sDestroyWidth\": $this[0].style.width,\n\t\t\t\t\"sInstance\":     sId,\n\t\t\t\t\"sTableId\":      sId\n\t\t\t} );\n\t\t\toSettings.nTable = this;\n\t\t\toSettings.oApi   = _that.internal;\n\t\t\toSettings.oInit  = oInit;\n\t\t\t\n\t\t\tallSettings.push( oSettings );\n\t\t\t\n\t\t\t// Need to add the instance after the instance after the settings object has been added\n\t\t\t// to the settings array, so we can self reference the table instance if more than one\n\t\t\toSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();\n\t\t\t\n\t\t\t// Backwards compatibility, before we apply all the defaults\n\t\t\t_fnCompatOpts( oInit );\n\t\t\t\n\t\t\tif ( oInit.oLanguage )\n\t\t\t{\n\t\t\t\t_fnLanguageCompat( oInit.oLanguage );\n\t\t\t}\n\t\t\t\n\t\t\t// If the length menu is given, but the init display length is not, use the length menu\n\t\t\tif ( oInit.aLengthMenu && ! oInit.iDisplayLength )\n\t\t\t{\n\t\t\t\toInit.iDisplayLength = $.isArray( oInit.aLengthMenu[0] ) ?\n\t\t\t\t\toInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];\n\t\t\t}\n\t\t\t\n\t\t\t// Apply the defaults and init options to make a single init object will all\n\t\t\t// options defined from defaults and instance options.\n\t\t\toInit = _fnExtend( $.extend( true, {}, defaults ), oInit );\n\t\t\t\n\t\t\t\n\t\t\t// Map the initialisation options onto the settings object\n\t\t\t_fnMap( oSettings.oFeatures, oInit, [\n\t\t\t\t\"bPaginate\",\n\t\t\t\t\"bLengthChange\",\n\t\t\t\t\"bFilter\",\n\t\t\t\t\"bSort\",\n\t\t\t\t\"bSortMulti\",\n\t\t\t\t\"bInfo\",\n\t\t\t\t\"bProcessing\",\n\t\t\t\t\"bAutoWidth\",\n\t\t\t\t\"bSortClasses\",\n\t\t\t\t\"bServerSide\",\n\t\t\t\t\"bDeferRender\"\n\t\t\t] );\n\t\t\t_fnMap( oSettings, oInit, [\n\t\t\t\t\"asStripeClasses\",\n\t\t\t\t\"ajax\",\n\t\t\t\t\"fnServerData\",\n\t\t\t\t\"fnFormatNumber\",\n\t\t\t\t\"sServerMethod\",\n\t\t\t\t\"aaSorting\",\n\t\t\t\t\"aaSortingFixed\",\n\t\t\t\t\"aLengthMenu\",\n\t\t\t\t\"sPaginationType\",\n\t\t\t\t\"sAjaxSource\",\n\t\t\t\t\"sAjaxDataProp\",\n\t\t\t\t\"iStateDuration\",\n\t\t\t\t\"sDom\",\n\t\t\t\t\"bSortCellsTop\",\n\t\t\t\t\"iTabIndex\",\n\t\t\t\t\"fnStateLoadCallback\",\n\t\t\t\t\"fnStateSaveCallback\",\n\t\t\t\t\"renderer\",\n\t\t\t\t\"searchDelay\",\n\t\t\t\t\"rowId\",\n\t\t\t\t[ \"iCookieDuration\", \"iStateDuration\" ], // backwards compat\n\t\t\t\t[ \"oSearch\", \"oPreviousSearch\" ],\n\t\t\t\t[ \"aoSearchCols\", \"aoPreSearchCols\" ],\n\t\t\t\t[ \"iDisplayLength\", \"_iDisplayLength\" ]\n\t\t\t] );\n\t\t\t_fnMap( oSettings.oScroll, oInit, [\n\t\t\t\t[ \"sScrollX\", \"sX\" ],\n\t\t\t\t[ \"sScrollXInner\", \"sXInner\" ],\n\t\t\t\t[ \"sScrollY\", \"sY\" ],\n\t\t\t\t[ \"bScrollCollapse\", \"bCollapse\" ]\n\t\t\t] );\n\t\t\t_fnMap( oSettings.oLanguage, oInit, \"fnInfoCallback\" );\n\t\t\t\n\t\t\t/* Callback functions which are array driven */\n\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );\n\t\t\t\n\t\t\toSettings.rowIdFn = _fnGetObjectDataFn( oInit.rowId );\n\t\t\t\n\t\t\t/* Browser support detection */\n\t\t\t_fnBrowserDetect( oSettings );\n\t\t\t\n\t\t\tvar oClasses = oSettings.oClasses;\n\t\t\t\n\t\t\t$.extend( oClasses, DataTable.ext.classes, oInit.oClasses );\n\t\t\t$this.addClass( oClasses.sTable );\n\t\t\t\n\t\t\t\n\t\t\tif ( oSettings.iInitDisplayStart === undefined )\n\t\t\t{\n\t\t\t\t/* Display start point, taking into account the save saving */\n\t\t\t\toSettings.iInitDisplayStart = oInit.iDisplayStart;\n\t\t\t\toSettings._iDisplayStart = oInit.iDisplayStart;\n\t\t\t}\n\t\t\t\n\t\t\tif ( oInit.iDeferLoading !== null )\n\t\t\t{\n\t\t\t\toSettings.bDeferLoading = true;\n\t\t\t\tvar tmp = $.isArray( oInit.iDeferLoading );\n\t\t\t\toSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;\n\t\t\t\toSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;\n\t\t\t}\n\t\t\t\n\t\t\t/* Language definitions */\n\t\t\tvar oLanguage = oSettings.oLanguage;\n\t\t\t$.extend( true, oLanguage, oInit.oLanguage );\n\t\t\t\n\t\t\tif ( oLanguage.sUrl )\n\t\t\t{\n\t\t\t\t/* Get the language definitions from a file - because this Ajax call makes the language\n\t\t\t\t * get async to the remainder of this function we use bInitHandedOff to indicate that\n\t\t\t\t * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor\n\t\t\t\t */\n\t\t\t\t$.ajax( {\n\t\t\t\t\tdataType: 'json',\n\t\t\t\t\turl: oLanguage.sUrl,\n\t\t\t\t\tsuccess: function ( json ) {\n\t\t\t\t\t\t_fnLanguageCompat( json );\n\t\t\t\t\t\t_fnCamelToHungarian( defaults.oLanguage, json );\n\t\t\t\t\t\t$.extend( true, oLanguage, json );\n\t\t\t\t\t\t_fnInitialise( oSettings );\n\t\t\t\t\t},\n\t\t\t\t\terror: function () {\n\t\t\t\t\t\t// Error occurred loading language file, continue on as best we can\n\t\t\t\t\t\t_fnInitialise( oSettings );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tbInitHandedOff = true;\n\t\t\t}\n\t\t\t\n\t\t\t/*\n\t\t\t * Stripes\n\t\t\t */\n\t\t\tif ( oInit.asStripeClasses === null )\n\t\t\t{\n\t\t\t\toSettings.asStripeClasses =[\n\t\t\t\t\toClasses.sStripeOdd,\n\t\t\t\t\toClasses.sStripeEven\n\t\t\t\t];\n\t\t\t}\n\t\t\t\n\t\t\t/* Remove row stripe classes if they are already on the table row */\n\t\t\tvar stripeClasses = oSettings.asStripeClasses;\n\t\t\tvar rowOne = $this.children('tbody').find('tr').eq(0);\n\t\t\tif ( $.inArray( true, $.map( stripeClasses, function(el, i) {\n\t\t\t\treturn rowOne.hasClass(el);\n\t\t\t} ) ) !== -1 ) {\n\t\t\t\t$('tbody tr', this).removeClass( stripeClasses.join(' ') );\n\t\t\t\toSettings.asDestroyStripes = stripeClasses.slice();\n\t\t\t}\n\t\t\t\n\t\t\t/*\n\t\t\t * Columns\n\t\t\t * See if we should load columns automatically or use defined ones\n\t\t\t */\n\t\t\tvar anThs = [];\n\t\t\tvar aoColumnsInit;\n\t\t\tvar nThead = this.getElementsByTagName('thead');\n\t\t\tif ( nThead.length !== 0 )\n\t\t\t{\n\t\t\t\t_fnDetectHeader( oSettings.aoHeader, nThead[0] );\n\t\t\t\tanThs = _fnGetUniqueThs( oSettings );\n\t\t\t}\n\t\t\t\n\t\t\t/* If not given a column array, generate one with nulls */\n\t\t\tif ( oInit.aoColumns === null )\n\t\t\t{\n\t\t\t\taoColumnsInit = [];\n\t\t\t\tfor ( i=0, iLen=anThs.length ; i<iLen ; i++ )\n\t\t\t\t{\n\t\t\t\t\taoColumnsInit.push( null );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\taoColumnsInit = oInit.aoColumns;\n\t\t\t}\n\t\t\t\n\t\t\t/* Add the columns */\n\t\t\tfor ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\t_fnAddColumn( oSettings, anThs ? anThs[i] : null );\n\t\t\t}\n\t\t\t\n\t\t\t/* Apply the column definitions */\n\t\t\t_fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {\n\t\t\t\t_fnColumnOptions( oSettings, iCol, oDef );\n\t\t\t} );\n\t\t\t\n\t\t\t/* HTML5 attribute detection - build an mData object automatically if the\n\t\t\t * attributes are found\n\t\t\t */\n\t\t\tif ( rowOne.length ) {\n\t\t\t\tvar a = function ( cell, name ) {\n\t\t\t\t\treturn cell.getAttribute( 'data-'+name ) !== null ? name : null;\n\t\t\t\t};\n\t\t\t\n\t\t\t\t$( rowOne[0] ).children('th, td').each( function (i, cell) {\n\t\t\t\t\tvar col = oSettings.aoColumns[i];\n\t\t\t\n\t\t\t\t\tif ( col.mData === i ) {\n\t\t\t\t\t\tvar sort = a( cell, 'sort' ) || a( cell, 'order' );\n\t\t\t\t\t\tvar filter = a( cell, 'filter' ) || a( cell, 'search' );\n\t\t\t\n\t\t\t\t\t\tif ( sort !== null || filter !== null ) {\n\t\t\t\t\t\t\tcol.mData = {\n\t\t\t\t\t\t\t\t_:      i+'.display',\n\t\t\t\t\t\t\t\tsort:   sort !== null   ? i+'.@data-'+sort   : undefined,\n\t\t\t\t\t\t\t\ttype:   sort !== null   ? i+'.@data-'+sort   : undefined,\n\t\t\t\t\t\t\t\tfilter: filter !== null ? i+'.@data-'+filter : undefined\n\t\t\t\t\t\t\t};\n\t\t\t\n\t\t\t\t\t\t\t_fnColumnOptions( oSettings, i );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t\t\n\t\t\tvar features = oSettings.oFeatures;\n\t\t\tvar loadedInit = function () {\n\t\t\t\t/*\n\t\t\t\t * Sorting\n\t\t\t\t * @todo For modularisation (1.11) this needs to do into a sort start up handler\n\t\t\t\t */\n\t\t\t\n\t\t\t\t// If aaSorting is not defined, then we use the first indicator in asSorting\n\t\t\t\t// in case that has been altered, so the default sort reflects that option\n\t\t\t\tif ( oInit.aaSorting === undefined ) {\n\t\t\t\t\tvar sorting = oSettings.aaSorting;\n\t\t\t\t\tfor ( i=0, iLen=sorting.length ; i<iLen ; i++ ) {\n\t\t\t\t\t\tsorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\t/* Do a first pass on the sorting classes (allows any size changes to be taken into\n\t\t\t\t * account, and also will apply sorting disabled classes if disabled\n\t\t\t\t */\n\t\t\t\t_fnSortingClasses( oSettings );\n\t\t\t\n\t\t\t\tif ( features.bSort ) {\n\t\t\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', function () {\n\t\t\t\t\t\tif ( oSettings.bSorted ) {\n\t\t\t\t\t\t\tvar aSort = _fnSortFlatten( oSettings );\n\t\t\t\t\t\t\tvar sortedColumns = {};\n\t\t\t\n\t\t\t\t\t\t\t$.each( aSort, function (i, val) {\n\t\t\t\t\t\t\t\tsortedColumns[ val.src ] = val.dir;\n\t\t\t\t\t\t\t} );\n\t\t\t\n\t\t\t\t\t\t\t_fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );\n\t\t\t\t\t\t\t_fnSortAria( oSettings );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\n\t\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', function () {\n\t\t\t\t\tif ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {\n\t\t\t\t\t\t_fnSortingClasses( oSettings );\n\t\t\t\t\t}\n\t\t\t\t}, 'sc' );\n\t\t\t\n\t\t\t\n\t\t\t\t/*\n\t\t\t\t * Final init\n\t\t\t\t * Cache the header, body and footer as required, creating them if needed\n\t\t\t\t */\n\t\t\t\n\t\t\t\t// Work around for Webkit bug 83867 - store the caption-side before removing from doc\n\t\t\t\tvar captions = $this.children('caption').each( function () {\n\t\t\t\t\tthis._captionSide = $(this).css('caption-side');\n\t\t\t\t} );\n\t\t\t\n\t\t\t\tvar thead = $this.children('thead');\n\t\t\t\tif ( thead.length === 0 ) {\n\t\t\t\t\tthead = $('<thead/>').appendTo($this);\n\t\t\t\t}\n\t\t\t\toSettings.nTHead = thead[0];\n\t\t\t\n\t\t\t\tvar tbody = $this.children('tbody');\n\t\t\t\tif ( tbody.length === 0 ) {\n\t\t\t\t\ttbody = $('<tbody/>').appendTo($this);\n\t\t\t\t}\n\t\t\t\toSettings.nTBody = tbody[0];\n\t\t\t\n\t\t\t\tvar tfoot = $this.children('tfoot');\n\t\t\t\tif ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\") ) {\n\t\t\t\t\t// If we are a scrolling table, and no footer has been given, then we need to create\n\t\t\t\t\t// a tfoot element for the caption element to be appended to\n\t\t\t\t\ttfoot = $('<tfoot/>').appendTo($this);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif ( tfoot.length === 0 || tfoot.children().length === 0 ) {\n\t\t\t\t\t$this.addClass( oClasses.sNoFooter );\n\t\t\t\t}\n\t\t\t\telse if ( tfoot.length > 0 ) {\n\t\t\t\t\toSettings.nTFoot = tfoot[0];\n\t\t\t\t\t_fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );\n\t\t\t\t}\n\t\t\t\n\t\t\t\t/* Check if there is data passing into the constructor */\n\t\t\t\tif ( oInit.aaData ) {\n\t\t\t\t\tfor ( i=0 ; i<oInit.aaData.length ; i++ ) {\n\t\t\t\t\t\t_fnAddData( oSettings, oInit.aaData[ i ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' ) {\n\t\t\t\t\t/* Grab the data from the page - only do this when deferred loading or no Ajax\n\t\t\t\t\t * source since there is no point in reading the DOM data if we are then going\n\t\t\t\t\t * to replace it with Ajax data\n\t\t\t\t\t */\n\t\t\t\t\t_fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );\n\t\t\t\t}\n\t\t\t\n\t\t\t\t/* Copy the data index array */\n\t\t\t\toSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\n\t\t\t\n\t\t\t\t/* Initialisation complete - table can be drawn */\n\t\t\t\toSettings.bInitialised = true;\n\t\t\t\n\t\t\t\t/* Check if we need to initialise the table (it might not have been handed off to the\n\t\t\t\t * language processor)\n\t\t\t\t */\n\t\t\t\tif ( bInitHandedOff === false ) {\n\t\t\t\t\t_fnInitialise( oSettings );\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\t/* Must be done after everything which can be overridden by the state saving! */\n\t\t\tif ( oInit.bStateSave )\n\t\t\t{\n\t\t\t\tfeatures.bStateSave = true;\n\t\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );\n\t\t\t\t_fnLoadState( oSettings, oInit, loadedInit );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tloadedInit();\n\t\t\t}\n\t\t\t\n\t\t} );\n\t\t_that = null;\n\t\treturn this;\n\t};\n\n\t\n\t/*\n\t * It is useful to have variables which are scoped locally so only the\n\t * DataTables functions can access them and they don't leak into global space.\n\t * At the same time these functions are often useful over multiple files in the\n\t * core and API, so we list, or at least document, all variables which are used\n\t * by DataTables as private variables here. This also ensures that there is no\n\t * clashing of variable names and that they can easily referenced for reuse.\n\t */\n\t\n\t\n\t// Defined else where\n\t//  _selector_run\n\t//  _selector_opts\n\t//  _selector_first\n\t//  _selector_row_indexes\n\t\n\tvar _ext; // DataTable.ext\n\tvar _Api; // DataTable.Api\n\tvar _api_register; // DataTable.Api.register\n\tvar _api_registerPlural; // DataTable.Api.registerPlural\n\t\n\tvar _re_dic = {};\n\tvar _re_new_lines = /[\\r\\n]/g;\n\tvar _re_html = /<.*?>/g;\n\t\n\t// This is not strict ISO8601 - Date.parse() is quite lax, although\n\t// implementations differ between browsers.\n\tvar _re_date = /^\\d{2,4}[\\.\\/\\-]\\d{1,2}[\\.\\/\\-]\\d{1,2}([T ]{1}\\d{1,2}[:\\.]\\d{2}([\\.:]\\d{2})?)?$/;\n\t\n\t// Escape regular expression special characters\n\tvar _re_escape_regex = new RegExp( '(\\\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\', '$', '^', '-' ].join('|\\\\') + ')', 'g' );\n\t\n\t// http://en.wikipedia.org/wiki/Foreign_exchange_market\n\t// - \\u20BD - Russian ruble.\n\t// - \\u20a9 - South Korean Won\n\t// - \\u20BA - Turkish Lira\n\t// - \\u20B9 - Indian Rupee\n\t// - R - Brazil (R$) and South Africa\n\t// - fr - Swiss Franc\n\t// - kr - Swedish krona, Norwegian krone and Danish krone\n\t// - \\u2009 is thin space and \\u202F is narrow no-break space, both used in many\n\t//   standards as thousands separators.\n\tvar _re_formatted_numeric = /[',$£€¥%\\u2009\\u202F\\u20BD\\u20a9\\u20BArfk]/gi;\n\t\n\t\n\tvar _empty = function ( d ) {\n\t\treturn !d || d === true || d === '-' ? true : false;\n\t};\n\t\n\t\n\tvar _intVal = function ( s ) {\n\t\tvar integer = parseInt( s, 10 );\n\t\treturn !isNaN(integer) && isFinite(s) ? integer : null;\n\t};\n\t\n\t// Convert from a formatted number with characters other than `.` as the\n\t// decimal place, to a Javascript number\n\tvar _numToDecimal = function ( num, decimalPoint ) {\n\t\t// Cache created regular expressions for speed as this function is called often\n\t\tif ( ! _re_dic[ decimalPoint ] ) {\n\t\t\t_re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );\n\t\t}\n\t\treturn typeof num === 'string' && decimalPoint !== '.' ?\n\t\t\tnum.replace( /\\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :\n\t\t\tnum;\n\t};\n\t\n\t\n\tvar _isNumber = function ( d, decimalPoint, formatted ) {\n\t\tvar strType = typeof d === 'string';\n\t\n\t\t// If empty return immediately so there must be a number if it is a\n\t\t// formatted string (this stops the string \"k\", or \"kr\", etc being detected\n\t\t// as a formatted number for currency\n\t\tif ( _empty( d ) ) {\n\t\t\treturn true;\n\t\t}\n\t\n\t\tif ( decimalPoint && strType ) {\n\t\t\td = _numToDecimal( d, decimalPoint );\n\t\t}\n\t\n\t\tif ( formatted && strType ) {\n\t\t\td = d.replace( _re_formatted_numeric, '' );\n\t\t}\n\t\n\t\treturn !isNaN( parseFloat(d) ) && isFinite( d );\n\t};\n\t\n\t\n\t// A string without HTML in it can be considered to be HTML still\n\tvar _isHtml = function ( d ) {\n\t\treturn _empty( d ) || typeof d === 'string';\n\t};\n\t\n\t\n\tvar _htmlNumeric = function ( d, decimalPoint, formatted ) {\n\t\tif ( _empty( d ) ) {\n\t\t\treturn true;\n\t\t}\n\t\n\t\tvar html = _isHtml( d );\n\t\treturn ! html ?\n\t\t\tnull :\n\t\t\t_isNumber( _stripHtml( d ), decimalPoint, formatted ) ?\n\t\t\t\ttrue :\n\t\t\t\tnull;\n\t};\n\t\n\t\n\tvar _pluck = function ( a, prop, prop2 ) {\n\t\tvar out = [];\n\t\tvar i=0, ien=a.length;\n\t\n\t\t// Could have the test in the loop for slightly smaller code, but speed\n\t\t// is essential here\n\t\tif ( prop2 !== undefined ) {\n\t\t\tfor ( ; i<ien ; i++ ) {\n\t\t\t\tif ( a[i] && a[i][ prop ] ) {\n\t\t\t\t\tout.push( a[i][ prop ][ prop2 ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor ( ; i<ien ; i++ ) {\n\t\t\t\tif ( a[i] ) {\n\t\t\t\t\tout.push( a[i][ prop ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn out;\n\t};\n\t\n\t\n\t// Basically the same as _pluck, but rather than looping over `a` we use `order`\n\t// as the indexes to pick from `a`\n\tvar _pluck_order = function ( a, order, prop, prop2 )\n\t{\n\t\tvar out = [];\n\t\tvar i=0, ien=order.length;\n\t\n\t\t// Could have the test in the loop for slightly smaller code, but speed\n\t\t// is essential here\n\t\tif ( prop2 !== undefined ) {\n\t\t\tfor ( ; i<ien ; i++ ) {\n\t\t\t\tif ( a[ order[i] ][ prop ] ) {\n\t\t\t\t\tout.push( a[ order[i] ][ prop ][ prop2 ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor ( ; i<ien ; i++ ) {\n\t\t\t\tout.push( a[ order[i] ][ prop ] );\n\t\t\t}\n\t\t}\n\t\n\t\treturn out;\n\t};\n\t\n\t\n\tvar _range = function ( len, start )\n\t{\n\t\tvar out = [];\n\t\tvar end;\n\t\n\t\tif ( start === undefined ) {\n\t\t\tstart = 0;\n\t\t\tend = len;\n\t\t}\n\t\telse {\n\t\t\tend = start;\n\t\t\tstart = len;\n\t\t}\n\t\n\t\tfor ( var i=start ; i<end ; i++ ) {\n\t\t\tout.push( i );\n\t\t}\n\t\n\t\treturn out;\n\t};\n\t\n\t\n\tvar _removeEmpty = function ( a )\n\t{\n\t\tvar out = [];\n\t\n\t\tfor ( var i=0, ien=a.length ; i<ien ; i++ ) {\n\t\t\tif ( a[i] ) { // careful - will remove all falsy values!\n\t\t\t\tout.push( a[i] );\n\t\t\t}\n\t\t}\n\t\n\t\treturn out;\n\t};\n\t\n\t\n\tvar _stripHtml = function ( d ) {\n\t\treturn d.replace( _re_html, '' );\n\t};\n\t\n\t\n\t/**\n\t * Determine if all values in the array are unique. This means we can short\n\t * cut the _unique method at the cost of a single loop. A sorted array is used\n\t * to easily check the values.\n\t *\n\t * @param  {array} src Source array\n\t * @return {boolean} true if all unique, false otherwise\n\t * @ignore\n\t */\n\tvar _areAllUnique = function ( src ) {\n\t\tif ( src.length < 2 ) {\n\t\t\treturn true;\n\t\t}\n\t\n\t\tvar sorted = src.slice().sort();\n\t\tvar last = sorted[0];\n\t\n\t\tfor ( var i=1, ien=sorted.length ; i<ien ; i++ ) {\n\t\t\tif ( sorted[i] === last ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\tlast = sorted[i];\n\t\t}\n\t\n\t\treturn true;\n\t};\n\t\n\t\n\t/**\n\t * Find the unique elements in a source array.\n\t *\n\t * @param  {array} src Source array\n\t * @return {array} Array of unique items\n\t * @ignore\n\t */\n\tvar _unique = function ( src )\n\t{\n\t\tif ( _areAllUnique( src ) ) {\n\t\t\treturn src.slice();\n\t\t}\n\t\n\t\t// A faster unique method is to use object keys to identify used values,\n\t\t// but this doesn't work with arrays or objects, which we must also\n\t\t// consider. See jsperf.com/compare-array-unique-versions/4 for more\n\t\t// information.\n\t\tvar\n\t\t\tout = [],\n\t\t\tval,\n\t\t\ti, ien=src.length,\n\t\t\tj, k=0;\n\t\n\t\tagain: for ( i=0 ; i<ien ; i++ ) {\n\t\t\tval = src[i];\n\t\n\t\t\tfor ( j=0 ; j<k ; j++ ) {\n\t\t\t\tif ( out[j] === val ) {\n\t\t\t\t\tcontinue again;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tout.push( val );\n\t\t\tk++;\n\t\t}\n\t\n\t\treturn out;\n\t};\n\t\n\t\n\t/**\n\t * DataTables utility methods\n\t * \n\t * This namespace provides helper methods that DataTables uses internally to\n\t * create a DataTable, but which are not exclusively used only for DataTables.\n\t * These methods can be used by extension authors to save the duplication of\n\t * code.\n\t *\n\t *  @namespace\n\t */\n\tDataTable.util = {\n\t\t/**\n\t\t * Throttle the calls to a function. Arguments and context are maintained\n\t\t * for the throttled function.\n\t\t *\n\t\t * @param {function} fn Function to be called\n\t\t * @param {integer} freq Call frequency in mS\n\t\t * @return {function} Wrapped function\n\t\t */\n\t\tthrottle: function ( fn, freq ) {\n\t\t\tvar\n\t\t\t\tfrequency = freq !== undefined ? freq : 200,\n\t\t\t\tlast,\n\t\t\t\ttimer;\n\t\n\t\t\treturn function () {\n\t\t\t\tvar\n\t\t\t\t\tthat = this,\n\t\t\t\t\tnow  = +new Date(),\n\t\t\t\t\targs = arguments;\n\t\n\t\t\t\tif ( last && now < last + frequency ) {\n\t\t\t\t\tclearTimeout( timer );\n\t\n\t\t\t\t\ttimer = setTimeout( function () {\n\t\t\t\t\t\tlast = undefined;\n\t\t\t\t\t\tfn.apply( that, args );\n\t\t\t\t\t}, frequency );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlast = now;\n\t\t\t\t\tfn.apply( that, args );\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * Escape a string such that it can be used in a regular expression\n\t\t *\n\t\t *  @param {string} val string to escape\n\t\t *  @returns {string} escaped string\n\t\t */\n\t\tescapeRegex: function ( val ) {\n\t\t\treturn val.replace( _re_escape_regex, '\\\\$1' );\n\t\t}\n\t};\n\t\n\t\n\t\n\t/**\n\t * Create a mapping object that allows camel case parameters to be looked up\n\t * for their Hungarian counterparts. The mapping is stored in a private\n\t * parameter called `_hungarianMap` which can be accessed on the source object.\n\t *  @param {object} o\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnHungarianMap ( o )\n\t{\n\t\tvar\n\t\t\thungarian = 'a aa ai ao as b fn i m o s ',\n\t\t\tmatch,\n\t\t\tnewKey,\n\t\t\tmap = {};\n\t\n\t\t$.each( o, function (key, val) {\n\t\t\tmatch = key.match(/^([^A-Z]+?)([A-Z])/);\n\t\n\t\t\tif ( match && hungarian.indexOf(match[1]+' ') !== -1 )\n\t\t\t{\n\t\t\t\tnewKey = key.replace( match[0], match[2].toLowerCase() );\n\t\t\t\tmap[ newKey ] = key;\n\t\n\t\t\t\tif ( match[1] === 'o' )\n\t\t\t\t{\n\t\t\t\t\t_fnHungarianMap( o[key] );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\n\t\to._hungarianMap = map;\n\t}\n\t\n\t\n\t/**\n\t * Convert from camel case parameters to Hungarian, based on a Hungarian map\n\t * created by _fnHungarianMap.\n\t *  @param {object} src The model object which holds all parameters that can be\n\t *    mapped.\n\t *  @param {object} user The object to convert from camel case to Hungarian.\n\t *  @param {boolean} force When set to `true`, properties which already have a\n\t *    Hungarian value in the `user` object will be overwritten. Otherwise they\n\t *    won't be.\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnCamelToHungarian ( src, user, force )\n\t{\n\t\tif ( ! src._hungarianMap ) {\n\t\t\t_fnHungarianMap( src );\n\t\t}\n\t\n\t\tvar hungarianKey;\n\t\n\t\t$.each( user, function (key, val) {\n\t\t\thungarianKey = src._hungarianMap[ key ];\n\t\n\t\t\tif ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )\n\t\t\t{\n\t\t\t\t// For objects, we need to buzz down into the object to copy parameters\n\t\t\t\tif ( hungarianKey.charAt(0) === 'o' )\n\t\t\t\t{\n\t\t\t\t\t// Copy the camelCase options over to the hungarian\n\t\t\t\t\tif ( ! user[ hungarianKey ] ) {\n\t\t\t\t\t\tuser[ hungarianKey ] = {};\n\t\t\t\t\t}\n\t\t\t\t\t$.extend( true, user[hungarianKey], user[key] );\n\t\n\t\t\t\t\t_fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tuser[hungarianKey] = user[ key ];\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\t\n\t\n\t/**\n\t * Language compatibility - when certain options are given, and others aren't, we\n\t * need to duplicate the values over, in order to provide backwards compatibility\n\t * with older language files.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnLanguageCompat( lang )\n\t{\n\t\tvar defaults = DataTable.defaults.oLanguage;\n\t\tvar zeroRecords = lang.sZeroRecords;\n\t\n\t\t/* Backwards compatibility - if there is no sEmptyTable given, then use the same as\n\t\t * sZeroRecords - assuming that is given.\n\t\t */\n\t\tif ( ! lang.sEmptyTable && zeroRecords &&\n\t\t\tdefaults.sEmptyTable === \"No data available in table\" )\n\t\t{\n\t\t\t_fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );\n\t\t}\n\t\n\t\t/* Likewise with loading records */\n\t\tif ( ! lang.sLoadingRecords && zeroRecords &&\n\t\t\tdefaults.sLoadingRecords === \"Loading...\" )\n\t\t{\n\t\t\t_fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );\n\t\t}\n\t\n\t\t// Old parameter name of the thousands separator mapped onto the new\n\t\tif ( lang.sInfoThousands ) {\n\t\t\tlang.sThousands = lang.sInfoThousands;\n\t\t}\n\t\n\t\tvar decimal = lang.sDecimal;\n\t\tif ( decimal ) {\n\t\t\t_addNumericSort( decimal );\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Map one parameter onto another\n\t *  @param {object} o Object to map\n\t *  @param {*} knew The new parameter name\n\t *  @param {*} old The old parameter name\n\t */\n\tvar _fnCompatMap = function ( o, knew, old ) {\n\t\tif ( o[ knew ] !== undefined ) {\n\t\t\to[ old ] = o[ knew ];\n\t\t}\n\t};\n\t\n\t\n\t/**\n\t * Provide backwards compatibility for the main DT options. Note that the new\n\t * options are mapped onto the old parameters, so this is an external interface\n\t * change only.\n\t *  @param {object} init Object to map\n\t */\n\tfunction _fnCompatOpts ( init )\n\t{\n\t\t_fnCompatMap( init, 'ordering',      'bSort' );\n\t\t_fnCompatMap( init, 'orderMulti',    'bSortMulti' );\n\t\t_fnCompatMap( init, 'orderClasses',  'bSortClasses' );\n\t\t_fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );\n\t\t_fnCompatMap( init, 'order',         'aaSorting' );\n\t\t_fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );\n\t\t_fnCompatMap( init, 'paging',        'bPaginate' );\n\t\t_fnCompatMap( init, 'pagingType',    'sPaginationType' );\n\t\t_fnCompatMap( init, 'pageLength',    'iDisplayLength' );\n\t\t_fnCompatMap( init, 'searching',     'bFilter' );\n\t\n\t\t// Boolean initialisation of x-scrolling\n\t\tif ( typeof init.sScrollX === 'boolean' ) {\n\t\t\tinit.sScrollX = init.sScrollX ? '100%' : '';\n\t\t}\n\t\tif ( typeof init.scrollX === 'boolean' ) {\n\t\t\tinit.scrollX = init.scrollX ? '100%' : '';\n\t\t}\n\t\n\t\t// Column search objects are in an array, so it needs to be converted\n\t\t// element by element\n\t\tvar searchCols = init.aoSearchCols;\n\t\n\t\tif ( searchCols ) {\n\t\t\tfor ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {\n\t\t\t\tif ( searchCols[i] ) {\n\t\t\t\t\t_fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Provide backwards compatibility for column options. Note that the new options\n\t * are mapped onto the old parameters, so this is an external interface change\n\t * only.\n\t *  @param {object} init Object to map\n\t */\n\tfunction _fnCompatCols ( init )\n\t{\n\t\t_fnCompatMap( init, 'orderable',     'bSortable' );\n\t\t_fnCompatMap( init, 'orderData',     'aDataSort' );\n\t\t_fnCompatMap( init, 'orderSequence', 'asSorting' );\n\t\t_fnCompatMap( init, 'orderDataType', 'sortDataType' );\n\t\n\t\t// orderData can be given as an integer\n\t\tvar dataSort = init.aDataSort;\n\t\tif ( typeof dataSort === 'number' && ! $.isArray( dataSort ) ) {\n\t\t\tinit.aDataSort = [ dataSort ];\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Browser feature detection for capabilities, quirks\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnBrowserDetect( settings )\n\t{\n\t\t// We don't need to do this every time DataTables is constructed, the values\n\t\t// calculated are specific to the browser and OS configuration which we\n\t\t// don't expect to change between initialisations\n\t\tif ( ! DataTable.__browser ) {\n\t\t\tvar browser = {};\n\t\t\tDataTable.__browser = browser;\n\t\n\t\t\t// Scrolling feature / quirks detection\n\t\t\tvar n = $('<div/>')\n\t\t\t\t.css( {\n\t\t\t\t\tposition: 'fixed',\n\t\t\t\t\ttop: 0,\n\t\t\t\t\tleft: $(window).scrollLeft()*-1, // allow for scrolling\n\t\t\t\t\theight: 1,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\toverflow: 'hidden'\n\t\t\t\t} )\n\t\t\t\t.append(\n\t\t\t\t\t$('<div/>')\n\t\t\t\t\t\t.css( {\n\t\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\t\ttop: 1,\n\t\t\t\t\t\t\tleft: 1,\n\t\t\t\t\t\t\twidth: 100,\n\t\t\t\t\t\t\toverflow: 'scroll'\n\t\t\t\t\t\t} )\n\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\t$('<div/>')\n\t\t\t\t\t\t\t\t.css( {\n\t\t\t\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t\t\t\t\theight: 10\n\t\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t.appendTo( 'body' );\n\t\n\t\t\tvar outer = n.children();\n\t\t\tvar inner = outer.children();\n\t\n\t\t\t// Numbers below, in order, are:\n\t\t\t// inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth\n\t\t\t//\n\t\t\t// IE6 XP:                           100 100 100  83\n\t\t\t// IE7 Vista:                        100 100 100  83\n\t\t\t// IE 8+ Windows:                     83  83 100  83\n\t\t\t// Evergreen Windows:                 83  83 100  83\n\t\t\t// Evergreen Mac with scrollbars:     85  85 100  85\n\t\t\t// Evergreen Mac without scrollbars: 100 100 100 100\n\t\n\t\t\t// Get scrollbar width\n\t\t\tbrowser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;\n\t\n\t\t\t// IE6/7 will oversize a width 100% element inside a scrolling element, to\n\t\t\t// include the width of the scrollbar, while other browsers ensure the inner\n\t\t\t// element is contained without forcing scrolling\n\t\t\tbrowser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;\n\t\n\t\t\t// In rtl text layout, some browsers (most, but not all) will place the\n\t\t\t// scrollbar on the left, rather than the right.\n\t\t\tbrowser.bScrollbarLeft = Math.round( inner.offset().left ) !== 1;\n\t\n\t\t\t// IE8- don't provide height and width for getBoundingClientRect\n\t\t\tbrowser.bBounding = n[0].getBoundingClientRect().width ? true : false;\n\t\n\t\t\tn.remove();\n\t\t}\n\t\n\t\t$.extend( settings.oBrowser, DataTable.__browser );\n\t\tsettings.oScroll.iBarWidth = DataTable.__browser.barWidth;\n\t}\n\t\n\t\n\t/**\n\t * Array.prototype reduce[Right] method, used for browsers which don't support\n\t * JS 1.6. Done this way to reduce code size, since we iterate either way\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnReduce ( that, fn, init, start, end, inc )\n\t{\n\t\tvar\n\t\t\ti = start,\n\t\t\tvalue,\n\t\t\tisSet = false;\n\t\n\t\tif ( init !== undefined ) {\n\t\t\tvalue = init;\n\t\t\tisSet = true;\n\t\t}\n\t\n\t\twhile ( i !== end ) {\n\t\t\tif ( ! that.hasOwnProperty(i) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\tvalue = isSet ?\n\t\t\t\tfn( value, that[i], i, that ) :\n\t\t\t\tthat[i];\n\t\n\t\t\tisSet = true;\n\t\t\ti += inc;\n\t\t}\n\t\n\t\treturn value;\n\t}\n\t\n\t/**\n\t * Add a column to the list used for the table with default values\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {node} nTh The th element for this column\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAddColumn( oSettings, nTh )\n\t{\n\t\t// Add column to aoColumns array\n\t\tvar oDefaults = DataTable.defaults.column;\n\t\tvar iCol = oSettings.aoColumns.length;\n\t\tvar oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {\n\t\t\t\"nTh\": nTh ? nTh : document.createElement('th'),\n\t\t\t\"sTitle\":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',\n\t\t\t\"aDataSort\": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],\n\t\t\t\"mData\": oDefaults.mData ? oDefaults.mData : iCol,\n\t\t\tidx: iCol\n\t\t} );\n\t\toSettings.aoColumns.push( oCol );\n\t\n\t\t// Add search object for column specific search. Note that the `searchCols[ iCol ]`\n\t\t// passed into extend can be undefined. This allows the user to give a default\n\t\t// with only some of the parameters defined, and also not give a default\n\t\tvar searchCols = oSettings.aoPreSearchCols;\n\t\tsearchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );\n\t\n\t\t// Use the default column options function to initialise classes etc\n\t\t_fnColumnOptions( oSettings, iCol, $(nTh).data() );\n\t}\n\t\n\t\n\t/**\n\t * Apply options for a column\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {int} iCol column index to consider\n\t *  @param {object} oOptions object with sType, bVisible and bSearchable etc\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnColumnOptions( oSettings, iCol, oOptions )\n\t{\n\t\tvar oCol = oSettings.aoColumns[ iCol ];\n\t\tvar oClasses = oSettings.oClasses;\n\t\tvar th = $(oCol.nTh);\n\t\n\t\t// Try to get width information from the DOM. We can't get it from CSS\n\t\t// as we'd need to parse the CSS stylesheet. `width` option can override\n\t\tif ( ! oCol.sWidthOrig ) {\n\t\t\t// Width attribute\n\t\t\toCol.sWidthOrig = th.attr('width') || null;\n\t\n\t\t\t// Style attribute\n\t\t\tvar t = (th.attr('style') || '').match(/width:\\s*(\\d+[pxem%]+)/);\n\t\t\tif ( t ) {\n\t\t\t\toCol.sWidthOrig = t[1];\n\t\t\t}\n\t\t}\n\t\n\t\t/* User specified column options */\n\t\tif ( oOptions !== undefined && oOptions !== null )\n\t\t{\n\t\t\t// Backwards compatibility\n\t\t\t_fnCompatCols( oOptions );\n\t\n\t\t\t// Map camel case parameters to their Hungarian counterparts\n\t\t\t_fnCamelToHungarian( DataTable.defaults.column, oOptions );\n\t\n\t\t\t/* Backwards compatibility for mDataProp */\n\t\t\tif ( oOptions.mDataProp !== undefined && !oOptions.mData )\n\t\t\t{\n\t\t\t\toOptions.mData = oOptions.mDataProp;\n\t\t\t}\n\t\n\t\t\tif ( oOptions.sType )\n\t\t\t{\n\t\t\t\toCol._sManualType = oOptions.sType;\n\t\t\t}\n\t\n\t\t\t// `class` is a reserved word in Javascript, so we need to provide\n\t\t\t// the ability to use a valid name for the camel case input\n\t\t\tif ( oOptions.className && ! oOptions.sClass )\n\t\t\t{\n\t\t\t\toOptions.sClass = oOptions.className;\n\t\t\t}\n\t\t\tif ( oOptions.sClass ) {\n\t\t\t\tth.addClass( oOptions.sClass );\n\t\t\t}\n\t\n\t\t\t$.extend( oCol, oOptions );\n\t\t\t_fnMap( oCol, oOptions, \"sWidth\", \"sWidthOrig\" );\n\t\n\t\t\t/* iDataSort to be applied (backwards compatibility), but aDataSort will take\n\t\t\t * priority if defined\n\t\t\t */\n\t\t\tif ( oOptions.iDataSort !== undefined )\n\t\t\t{\n\t\t\t\toCol.aDataSort = [ oOptions.iDataSort ];\n\t\t\t}\n\t\t\t_fnMap( oCol, oOptions, \"aDataSort\" );\n\t\t}\n\t\n\t\t/* Cache the data get and set functions for speed */\n\t\tvar mDataSrc = oCol.mData;\n\t\tvar mData = _fnGetObjectDataFn( mDataSrc );\n\t\tvar mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;\n\t\n\t\tvar attrTest = function( src ) {\n\t\t\treturn typeof src === 'string' && src.indexOf('@') !== -1;\n\t\t};\n\t\toCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (\n\t\t\tattrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)\n\t\t);\n\t\toCol._setter = null;\n\t\n\t\toCol.fnGetData = function (rowData, type, meta) {\n\t\t\tvar innerData = mData( rowData, type, undefined, meta );\n\t\n\t\t\treturn mRender && type ?\n\t\t\t\tmRender( innerData, type, rowData, meta ) :\n\t\t\t\tinnerData;\n\t\t};\n\t\toCol.fnSetData = function ( rowData, val, meta ) {\n\t\t\treturn _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );\n\t\t};\n\t\n\t\t// Indicate if DataTables should read DOM data as an object or array\n\t\t// Used in _fnGetRowElements\n\t\tif ( typeof mDataSrc !== 'number' ) {\n\t\t\toSettings._rowReadObject = true;\n\t\t}\n\t\n\t\t/* Feature sorting overrides column specific when off */\n\t\tif ( !oSettings.oFeatures.bSort )\n\t\t{\n\t\t\toCol.bSortable = false;\n\t\t\tth.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called\n\t\t}\n\t\n\t\t/* Check that the class assignment is correct for sorting */\n\t\tvar bAsc = $.inArray('asc', oCol.asSorting) !== -1;\n\t\tvar bDesc = $.inArray('desc', oCol.asSorting) !== -1;\n\t\tif ( !oCol.bSortable || (!bAsc && !bDesc) )\n\t\t{\n\t\t\toCol.sSortingClass = oClasses.sSortableNone;\n\t\t\toCol.sSortingClassJUI = \"\";\n\t\t}\n\t\telse if ( bAsc && !bDesc )\n\t\t{\n\t\t\toCol.sSortingClass = oClasses.sSortableAsc;\n\t\t\toCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;\n\t\t}\n\t\telse if ( !bAsc && bDesc )\n\t\t{\n\t\t\toCol.sSortingClass = oClasses.sSortableDesc;\n\t\t\toCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;\n\t\t}\n\t\telse\n\t\t{\n\t\t\toCol.sSortingClass = oClasses.sSortable;\n\t\t\toCol.sSortingClassJUI = oClasses.sSortJUI;\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Adjust the table column widths for new data. Note: you would probably want to\n\t * do a redraw after calling this function!\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAdjustColumnSizing ( settings )\n\t{\n\t\t/* Not interested in doing column width calculation if auto-width is disabled */\n\t\tif ( settings.oFeatures.bAutoWidth !== false )\n\t\t{\n\t\t\tvar columns = settings.aoColumns;\n\t\n\t\t\t_fnCalculateColumnWidths( settings );\n\t\t\tfor ( var i=0 , iLen=columns.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\tcolumns[i].nTh.style.width = columns[i].sWidth;\n\t\t\t}\n\t\t}\n\t\n\t\tvar scroll = settings.oScroll;\n\t\tif ( scroll.sY !== '' || scroll.sX !== '')\n\t\t{\n\t\t\t_fnScrollDraw( settings );\n\t\t}\n\t\n\t\t_fnCallbackFire( settings, null, 'column-sizing', [settings] );\n\t}\n\t\n\t\n\t/**\n\t * Covert the index of a visible column to the index in the data array (take account\n\t * of hidden columns)\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {int} iMatch Visible column index to lookup\n\t *  @returns {int} i the data index\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnVisibleToColumnIndex( oSettings, iMatch )\n\t{\n\t\tvar aiVis = _fnGetColumns( oSettings, 'bVisible' );\n\t\n\t\treturn typeof aiVis[iMatch] === 'number' ?\n\t\t\taiVis[iMatch] :\n\t\t\tnull;\n\t}\n\t\n\t\n\t/**\n\t * Covert the index of an index in the data array and convert it to the visible\n\t *   column index (take account of hidden columns)\n\t *  @param {int} iMatch Column index to lookup\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns {int} i the data index\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnColumnIndexToVisible( oSettings, iMatch )\n\t{\n\t\tvar aiVis = _fnGetColumns( oSettings, 'bVisible' );\n\t\tvar iPos = $.inArray( iMatch, aiVis );\n\t\n\t\treturn iPos !== -1 ? iPos : null;\n\t}\n\t\n\t\n\t/**\n\t * Get the number of visible columns\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns {int} i the number of visible columns\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnVisbleColumns( oSettings )\n\t{\n\t\tvar vis = 0;\n\t\n\t\t// No reduce in IE8, use a loop for now\n\t\t$.each( oSettings.aoColumns, function ( i, col ) {\n\t\t\tif ( col.bVisible && $(col.nTh).css('display') !== 'none' ) {\n\t\t\t\tvis++;\n\t\t\t}\n\t\t} );\n\t\n\t\treturn vis;\n\t}\n\t\n\t\n\t/**\n\t * Get an array of column indexes that match a given property\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {string} sParam Parameter in aoColumns to look for - typically\n\t *    bVisible or bSearchable\n\t *  @returns {array} Array of indexes with matched properties\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetColumns( oSettings, sParam )\n\t{\n\t\tvar a = [];\n\t\n\t\t$.map( oSettings.aoColumns, function(val, i) {\n\t\t\tif ( val[sParam] ) {\n\t\t\t\ta.push( i );\n\t\t\t}\n\t\t} );\n\t\n\t\treturn a;\n\t}\n\t\n\t\n\t/**\n\t * Calculate the 'type' of a column\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnColumnTypes ( settings )\n\t{\n\t\tvar columns = settings.aoColumns;\n\t\tvar data = settings.aoData;\n\t\tvar types = DataTable.ext.type.detect;\n\t\tvar i, ien, j, jen, k, ken;\n\t\tvar col, cell, detectedType, cache;\n\t\n\t\t// For each column, spin over the \n\t\tfor ( i=0, ien=columns.length ; i<ien ; i++ ) {\n\t\t\tcol = columns[i];\n\t\t\tcache = [];\n\t\n\t\t\tif ( ! col.sType && col._sManualType ) {\n\t\t\t\tcol.sType = col._sManualType;\n\t\t\t}\n\t\t\telse if ( ! col.sType ) {\n\t\t\t\tfor ( j=0, jen=types.length ; j<jen ; j++ ) {\n\t\t\t\t\tfor ( k=0, ken=data.length ; k<ken ; k++ ) {\n\t\t\t\t\t\t// Use a cache array so we only need to get the type data\n\t\t\t\t\t\t// from the formatter once (when using multiple detectors)\n\t\t\t\t\t\tif ( cache[k] === undefined ) {\n\t\t\t\t\t\t\tcache[k] = _fnGetCellData( settings, k, i, 'type' );\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tdetectedType = types[j]( cache[k], settings );\n\t\n\t\t\t\t\t\t// If null, then this type can't apply to this column, so\n\t\t\t\t\t\t// rather than testing all cells, break out. There is an\n\t\t\t\t\t\t// exception for the last type which is `html`. We need to\n\t\t\t\t\t\t// scan all rows since it is possible to mix string and HTML\n\t\t\t\t\t\t// types\n\t\t\t\t\t\tif ( ! detectedType && j !== types.length-1 ) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// Only a single match is needed for html type since it is\n\t\t\t\t\t\t// bottom of the pile and very similar to string\n\t\t\t\t\t\tif ( detectedType === 'html' ) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Type is valid for all data points in the column - use this\n\t\t\t\t\t// type\n\t\t\t\t\tif ( detectedType ) {\n\t\t\t\t\t\tcol.sType = detectedType;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t// Fall back - if no type was detected, always use string\n\t\t\t\tif ( ! col.sType ) {\n\t\t\t\t\tcol.sType = 'string';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Take the column definitions and static columns arrays and calculate how\n\t * they relate to column indexes. The callback function will then apply the\n\t * definition found for a column to a suitable configuration object.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {array} aoColDefs The aoColumnDefs array that is to be applied\n\t *  @param {array} aoCols The aoColumns array that defines columns individually\n\t *  @param {function} fn Callback function - takes two parameters, the calculated\n\t *    column index and the definition for that column.\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )\n\t{\n\t\tvar i, iLen, j, jLen, k, kLen, def;\n\t\tvar columns = oSettings.aoColumns;\n\t\n\t\t// Column definitions with aTargets\n\t\tif ( aoColDefs )\n\t\t{\n\t\t\t/* Loop over the definitions array - loop in reverse so first instance has priority */\n\t\t\tfor ( i=aoColDefs.length-1 ; i>=0 ; i-- )\n\t\t\t{\n\t\t\t\tdef = aoColDefs[i];\n\t\n\t\t\t\t/* Each definition can target multiple columns, as it is an array */\n\t\t\t\tvar aTargets = def.targets !== undefined ?\n\t\t\t\t\tdef.targets :\n\t\t\t\t\tdef.aTargets;\n\t\n\t\t\t\tif ( ! $.isArray( aTargets ) )\n\t\t\t\t{\n\t\t\t\t\taTargets = [ aTargets ];\n\t\t\t\t}\n\t\n\t\t\t\tfor ( j=0, jLen=aTargets.length ; j<jLen ; j++ )\n\t\t\t\t{\n\t\t\t\t\tif ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\t/* Add columns that we don't yet know about */\n\t\t\t\t\t\twhile( columns.length <= aTargets[j] )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_fnAddColumn( oSettings );\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t/* Integer, basic index */\n\t\t\t\t\t\tfn( aTargets[j], def );\n\t\t\t\t\t}\n\t\t\t\t\telse if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\t/* Negative integer, right to left column counting */\n\t\t\t\t\t\tfn( columns.length+aTargets[j], def );\n\t\t\t\t\t}\n\t\t\t\t\telse if ( typeof aTargets[j] === 'string' )\n\t\t\t\t\t{\n\t\t\t\t\t\t/* Class name matching on TH element */\n\t\t\t\t\t\tfor ( k=0, kLen=columns.length ; k<kLen ; k++ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( aTargets[j] == \"_all\" ||\n\t\t\t\t\t\t\t     $(columns[k].nTh).hasClass( aTargets[j] ) )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfn( k, def );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t// Statically defined columns array\n\t\tif ( aoCols )\n\t\t{\n\t\t\tfor ( i=0, iLen=aoCols.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\tfn( i, aoCols[i] );\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Add a data array to the table, creating DOM node etc. This is the parallel to\n\t * _fnGatherData, but for adding rows from a Javascript source, rather than a\n\t * DOM source.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {array} aData data array to be added\n\t *  @param {node} [nTr] TR element to add to the table - optional. If not given,\n\t *    DataTables will create a row automatically\n\t *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n\t *    if nTr is.\n\t *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAddData ( oSettings, aDataIn, nTr, anTds )\n\t{\n\t\t/* Create the object for storing information about this new row */\n\t\tvar iRow = oSettings.aoData.length;\n\t\tvar oData = $.extend( true, {}, DataTable.models.oRow, {\n\t\t\tsrc: nTr ? 'dom' : 'data',\n\t\t\tidx: iRow\n\t\t} );\n\t\n\t\toData._aData = aDataIn;\n\t\toSettings.aoData.push( oData );\n\t\n\t\t/* Create the cells */\n\t\tvar nTd, sThisType;\n\t\tvar columns = oSettings.aoColumns;\n\t\n\t\t// Invalidate the column types as the new data needs to be revalidated\n\t\tfor ( var i=0, iLen=columns.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tcolumns[i].sType = null;\n\t\t}\n\t\n\t\t/* Add to the display array */\n\t\toSettings.aiDisplayMaster.push( iRow );\n\t\n\t\tvar id = oSettings.rowIdFn( aDataIn );\n\t\tif ( id !== undefined ) {\n\t\t\toSettings.aIds[ id ] = oData;\n\t\t}\n\t\n\t\t/* Create the DOM information, or register it if already present */\n\t\tif ( nTr || ! oSettings.oFeatures.bDeferRender )\n\t\t{\n\t\t\t_fnCreateTr( oSettings, iRow, nTr, anTds );\n\t\t}\n\t\n\t\treturn iRow;\n\t}\n\t\n\t\n\t/**\n\t * Add one or more TR elements to the table. Generally we'd expect to\n\t * use this for reading data from a DOM sourced table, but it could be\n\t * used for an TR element. Note that if a TR is given, it is used (i.e.\n\t * it is not cloned).\n\t *  @param {object} settings dataTables settings object\n\t *  @param {array|node|jQuery} trs The TR element(s) to add to the table\n\t *  @returns {array} Array of indexes for the added rows\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAddTr( settings, trs )\n\t{\n\t\tvar row;\n\t\n\t\t// Allow an individual node to be passed in\n\t\tif ( ! (trs instanceof $) ) {\n\t\t\ttrs = $(trs);\n\t\t}\n\t\n\t\treturn trs.map( function (i, el) {\n\t\t\trow = _fnGetRowElements( settings, el );\n\t\t\treturn _fnAddData( settings, row.data, el, row.cells );\n\t\t} );\n\t}\n\t\n\t\n\t/**\n\t * Take a TR element and convert it to an index in aoData\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {node} n the TR element to find\n\t *  @returns {int} index if the node is found, null if not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnNodeToDataIndex( oSettings, n )\n\t{\n\t\treturn (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;\n\t}\n\t\n\t\n\t/**\n\t * Take a TD element and convert it into a column data index (not the visible index)\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {int} iRow The row number the TD/TH can be found in\n\t *  @param {node} n The TD/TH element to find\n\t *  @returns {int} index if the node is found, -1 if not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnNodeToColumnIndex( oSettings, iRow, n )\n\t{\n\t\treturn $.inArray( n, oSettings.aoData[ iRow ].anCells );\n\t}\n\t\n\t\n\t/**\n\t * Get the data for a given cell from the internal cache, taking into account data mapping\n\t *  @param {object} settings dataTables settings object\n\t *  @param {int} rowIdx aoData row id\n\t *  @param {int} colIdx Column index\n\t *  @param {string} type data get type ('display', 'type' 'filter' 'sort')\n\t *  @returns {*} Cell data\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetCellData( settings, rowIdx, colIdx, type )\n\t{\n\t\tvar draw           = settings.iDraw;\n\t\tvar col            = settings.aoColumns[colIdx];\n\t\tvar rowData        = settings.aoData[rowIdx]._aData;\n\t\tvar defaultContent = col.sDefaultContent;\n\t\tvar cellData       = col.fnGetData( rowData, type, {\n\t\t\tsettings: settings,\n\t\t\trow:      rowIdx,\n\t\t\tcol:      colIdx\n\t\t} );\n\t\n\t\tif ( cellData === undefined ) {\n\t\t\tif ( settings.iDrawError != draw && defaultContent === null ) {\n\t\t\t\t_fnLog( settings, 0, \"Requested unknown parameter \"+\n\t\t\t\t\t(typeof col.mData=='function' ? '{function}' : \"'\"+col.mData+\"'\")+\n\t\t\t\t\t\" for row \"+rowIdx+\", column \"+colIdx, 4 );\n\t\t\t\tsettings.iDrawError = draw;\n\t\t\t}\n\t\t\treturn defaultContent;\n\t\t}\n\t\n\t\t// When the data source is null and a specific data type is requested (i.e.\n\t\t// not the original data), we can use default column data\n\t\tif ( (cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined ) {\n\t\t\tcellData = defaultContent;\n\t\t}\n\t\telse if ( typeof cellData === 'function' ) {\n\t\t\t// If the data source is a function, then we run it and use the return,\n\t\t\t// executing in the scope of the data object (for instances)\n\t\t\treturn cellData.call( rowData );\n\t\t}\n\t\n\t\tif ( cellData === null && type == 'display' ) {\n\t\t\treturn '';\n\t\t}\n\t\treturn cellData;\n\t}\n\t\n\t\n\t/**\n\t * Set the value for a specific cell, into the internal data cache\n\t *  @param {object} settings dataTables settings object\n\t *  @param {int} rowIdx aoData row id\n\t *  @param {int} colIdx Column index\n\t *  @param {*} val Value to set\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSetCellData( settings, rowIdx, colIdx, val )\n\t{\n\t\tvar col     = settings.aoColumns[colIdx];\n\t\tvar rowData = settings.aoData[rowIdx]._aData;\n\t\n\t\tcol.fnSetData( rowData, val, {\n\t\t\tsettings: settings,\n\t\t\trow:      rowIdx,\n\t\t\tcol:      colIdx\n\t\t}  );\n\t}\n\t\n\t\n\t// Private variable that is used to match action syntax in the data property object\n\tvar __reArray = /\\[.*?\\]$/;\n\tvar __reFn = /\\(\\)$/;\n\t\n\t/**\n\t * Split string on periods, taking into account escaped periods\n\t * @param  {string} str String to split\n\t * @return {array} Split string\n\t */\n\tfunction _fnSplitObjNotation( str )\n\t{\n\t\treturn $.map( str.match(/(\\\\.|[^\\.])+/g) || [''], function ( s ) {\n\t\t\treturn s.replace(/\\\\\\./g, '.');\n\t\t} );\n\t}\n\t\n\t\n\t/**\n\t * Return a function that can be used to get data from a source object, taking\n\t * into account the ability to use nested objects as a source\n\t *  @param {string|int|function} mSource The data source for the object\n\t *  @returns {function} Data get function\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetObjectDataFn( mSource )\n\t{\n\t\tif ( $.isPlainObject( mSource ) )\n\t\t{\n\t\t\t/* Build an object of get functions, and wrap them in a single call */\n\t\t\tvar o = {};\n\t\t\t$.each( mSource, function (key, val) {\n\t\t\t\tif ( val ) {\n\t\t\t\t\to[key] = _fnGetObjectDataFn( val );\n\t\t\t\t}\n\t\t\t} );\n\t\n\t\t\treturn function (data, type, row, meta) {\n\t\t\t\tvar t = o[type] || o._;\n\t\t\t\treturn t !== undefined ?\n\t\t\t\t\tt(data, type, row, meta) :\n\t\t\t\t\tdata;\n\t\t\t};\n\t\t}\n\t\telse if ( mSource === null )\n\t\t{\n\t\t\t/* Give an empty string for rendering / sorting etc */\n\t\t\treturn function (data) { // type, row and meta also passed, but not used\n\t\t\t\treturn data;\n\t\t\t};\n\t\t}\n\t\telse if ( typeof mSource === 'function' )\n\t\t{\n\t\t\treturn function (data, type, row, meta) {\n\t\t\t\treturn mSource( data, type, row, meta );\n\t\t\t};\n\t\t}\n\t\telse if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||\n\t\t\t      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )\n\t\t{\n\t\t\t/* If there is a . in the source string then the data source is in a\n\t\t\t * nested object so we loop over the data for each level to get the next\n\t\t\t * level down. On each loop we test for undefined, and if found immediately\n\t\t\t * return. This allows entire objects to be missing and sDefaultContent to\n\t\t\t * be used if defined, rather than throwing an error\n\t\t\t */\n\t\t\tvar fetchData = function (data, type, src) {\n\t\t\t\tvar arrayNotation, funcNotation, out, innerSrc;\n\t\n\t\t\t\tif ( src !== \"\" )\n\t\t\t\t{\n\t\t\t\t\tvar a = _fnSplitObjNotation( src );\n\t\n\t\t\t\t\tfor ( var i=0, iLen=a.length ; i<iLen ; i++ )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Check if we are dealing with special notation\n\t\t\t\t\t\tarrayNotation = a[i].match(__reArray);\n\t\t\t\t\t\tfuncNotation = a[i].match(__reFn);\n\t\n\t\t\t\t\t\tif ( arrayNotation )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Array notation\n\t\t\t\t\t\t\ta[i] = a[i].replace(__reArray, '');\n\t\n\t\t\t\t\t\t\t// Condition allows simply [] to be passed in\n\t\t\t\t\t\t\tif ( a[i] !== \"\" ) {\n\t\t\t\t\t\t\t\tdata = data[ a[i] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout = [];\n\t\n\t\t\t\t\t\t\t// Get the remainder of the nested object to get\n\t\t\t\t\t\t\ta.splice( 0, i+1 );\n\t\t\t\t\t\t\tinnerSrc = a.join('.');\n\t\n\t\t\t\t\t\t\t// Traverse each entry in the array getting the properties requested\n\t\t\t\t\t\t\tif ( $.isArray( data ) ) {\n\t\t\t\t\t\t\t\tfor ( var j=0, jLen=data.length ; j<jLen ; j++ ) {\n\t\t\t\t\t\t\t\t\tout.push( fetchData( data[j], type, innerSrc ) );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// If a string is given in between the array notation indicators, that\n\t\t\t\t\t\t\t// is used to join the strings together, otherwise an array is returned\n\t\t\t\t\t\t\tvar join = arrayNotation[0].substring(1, arrayNotation[0].length-1);\n\t\t\t\t\t\t\tdata = (join===\"\") ? out : out.join(join);\n\t\n\t\t\t\t\t\t\t// The inner call to fetchData has already traversed through the remainder\n\t\t\t\t\t\t\t// of the source requested, so we exit from the loop\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ( funcNotation )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Function call\n\t\t\t\t\t\t\ta[i] = a[i].replace(__reFn, '');\n\t\t\t\t\t\t\tdata = data[ a[i] ]();\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( data === null || data[ a[i] ] === undefined )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdata = data[ a[i] ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\treturn data;\n\t\t\t};\n\t\n\t\t\treturn function (data, type) { // row and meta also passed, but not used\n\t\t\t\treturn fetchData( data, type, mSource );\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/* Array or flat object mapping */\n\t\t\treturn function (data, type) { // row and meta also passed, but not used\n\t\t\t\treturn data[mSource];\n\t\t\t};\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Return a function that can be used to set data from a source object, taking\n\t * into account the ability to use nested objects as a source\n\t *  @param {string|int|function} mSource The data source for the object\n\t *  @returns {function} Data set function\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSetObjectDataFn( mSource )\n\t{\n\t\tif ( $.isPlainObject( mSource ) )\n\t\t{\n\t\t\t/* Unlike get, only the underscore (global) option is used for for\n\t\t\t * setting data since we don't know the type here. This is why an object\n\t\t\t * option is not documented for `mData` (which is read/write), but it is\n\t\t\t * for `mRender` which is read only.\n\t\t\t */\n\t\t\treturn _fnSetObjectDataFn( mSource._ );\n\t\t}\n\t\telse if ( mSource === null )\n\t\t{\n\t\t\t/* Nothing to do when the data source is null */\n\t\t\treturn function () {};\n\t\t}\n\t\telse if ( typeof mSource === 'function' )\n\t\t{\n\t\t\treturn function (data, val, meta) {\n\t\t\t\tmSource( data, 'set', val, meta );\n\t\t\t};\n\t\t}\n\t\telse if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||\n\t\t\t      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )\n\t\t{\n\t\t\t/* Like the get, we need to get data from a nested object */\n\t\t\tvar setData = function (data, val, src) {\n\t\t\t\tvar a = _fnSplitObjNotation( src ), b;\n\t\t\t\tvar aLast = a[a.length-1];\n\t\t\t\tvar arrayNotation, funcNotation, o, innerSrc;\n\t\n\t\t\t\tfor ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )\n\t\t\t\t{\n\t\t\t\t\t// Check if we are dealing with an array notation request\n\t\t\t\t\tarrayNotation = a[i].match(__reArray);\n\t\t\t\t\tfuncNotation = a[i].match(__reFn);\n\t\n\t\t\t\t\tif ( arrayNotation )\n\t\t\t\t\t{\n\t\t\t\t\t\ta[i] = a[i].replace(__reArray, '');\n\t\t\t\t\t\tdata[ a[i] ] = [];\n\t\n\t\t\t\t\t\t// Get the remainder of the nested object to set so we can recurse\n\t\t\t\t\t\tb = a.slice();\n\t\t\t\t\t\tb.splice( 0, i+1 );\n\t\t\t\t\t\tinnerSrc = b.join('.');\n\t\n\t\t\t\t\t\t// Traverse each entry in the array setting the properties requested\n\t\t\t\t\t\tif ( $.isArray( val ) )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor ( var j=0, jLen=val.length ; j<jLen ; j++ )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\to = {};\n\t\t\t\t\t\t\t\tsetData( o, val[j], innerSrc );\n\t\t\t\t\t\t\t\tdata[ a[i] ].push( o );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// We've been asked to save data to an array, but it\n\t\t\t\t\t\t\t// isn't array data to be saved. Best that can be done\n\t\t\t\t\t\t\t// is to just save the value.\n\t\t\t\t\t\t\tdata[ a[i] ] = val;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// The inner call to setData has already traversed through the remainder\n\t\t\t\t\t\t// of the source and has set the data, thus we can exit here\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if ( funcNotation )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Function call\n\t\t\t\t\t\ta[i] = a[i].replace(__reFn, '');\n\t\t\t\t\t\tdata = data[ a[i] ]( val );\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// If the nested object doesn't currently exist - since we are\n\t\t\t\t\t// trying to set the value - create it\n\t\t\t\t\tif ( data[ a[i] ] === null || data[ a[i] ] === undefined )\n\t\t\t\t\t{\n\t\t\t\t\t\tdata[ a[i] ] = {};\n\t\t\t\t\t}\n\t\t\t\t\tdata = data[ a[i] ];\n\t\t\t\t}\n\t\n\t\t\t\t// Last item in the input - i.e, the actual set\n\t\t\t\tif ( aLast.match(__reFn ) )\n\t\t\t\t{\n\t\t\t\t\t// Function call\n\t\t\t\t\tdata = data[ aLast.replace(__reFn, '') ]( val );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// If array notation is used, we just want to strip it and use the property name\n\t\t\t\t\t// and assign the value. If it isn't used, then we get the result we want anyway\n\t\t\t\t\tdata[ aLast.replace(__reArray, '') ] = val;\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\treturn function (data, val) { // meta is also passed in, but not used\n\t\t\t\treturn setData( data, val, mSource );\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/* Array or flat object mapping */\n\t\t\treturn function (data, val) { // meta is also passed in, but not used\n\t\t\t\tdata[mSource] = val;\n\t\t\t};\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Return an array with the full table data\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns array {array} aData Master data array\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetDataMaster ( settings )\n\t{\n\t\treturn _pluck( settings.aoData, '_aData' );\n\t}\n\t\n\t\n\t/**\n\t * Nuke the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnClearTable( settings )\n\t{\n\t\tsettings.aoData.length = 0;\n\t\tsettings.aiDisplayMaster.length = 0;\n\t\tsettings.aiDisplay.length = 0;\n\t\tsettings.aIds = {};\n\t}\n\t\n\t\n\t /**\n\t * Take an array of integers (index array) and remove a target integer (value - not\n\t * the key!)\n\t *  @param {array} a Index array to target\n\t *  @param {int} iTarget value to find\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnDeleteIndex( a, iTarget, splice )\n\t{\n\t\tvar iTargetIndex = -1;\n\t\n\t\tfor ( var i=0, iLen=a.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tif ( a[i] == iTarget )\n\t\t\t{\n\t\t\t\tiTargetIndex = i;\n\t\t\t}\n\t\t\telse if ( a[i] > iTarget )\n\t\t\t{\n\t\t\t\ta[i]--;\n\t\t\t}\n\t\t}\n\t\n\t\tif ( iTargetIndex != -1 && splice === undefined )\n\t\t{\n\t\t\ta.splice( iTargetIndex, 1 );\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Mark cached data as invalid such that a re-read of the data will occur when\n\t * the cached data is next requested. Also update from the data source object.\n\t *\n\t * @param {object} settings DataTables settings object\n\t * @param {int}    rowIdx   Row index to invalidate\n\t * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'\n\t *     or 'data'\n\t * @param {int}    [colIdx] Column index to invalidate. If undefined the whole\n\t *     row will be invalidated\n\t * @memberof DataTable#oApi\n\t *\n\t * @todo For the modularisation of v1.11 this will need to become a callback, so\n\t *   the sort and filter methods can subscribe to it. That will required\n\t *   initialisation options for sorting, which is why it is not already baked in\n\t */\n\tfunction _fnInvalidate( settings, rowIdx, src, colIdx )\n\t{\n\t\tvar row = settings.aoData[ rowIdx ];\n\t\tvar i, ien;\n\t\tvar cellWrite = function ( cell, col ) {\n\t\t\t// This is very frustrating, but in IE if you just write directly\n\t\t\t// to innerHTML, and elements that are overwritten are GC'ed,\n\t\t\t// even if there is a reference to them elsewhere\n\t\t\twhile ( cell.childNodes.length ) {\n\t\t\t\tcell.removeChild( cell.firstChild );\n\t\t\t}\n\t\n\t\t\tcell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );\n\t\t};\n\t\n\t\t// Are we reading last data from DOM or the data object?\n\t\tif ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {\n\t\t\t// Read the data from the DOM\n\t\t\trow._aData = _fnGetRowElements(\n\t\t\t\t\tsettings, row, colIdx, colIdx === undefined ? undefined : row._aData\n\t\t\t\t)\n\t\t\t\t.data;\n\t\t}\n\t\telse {\n\t\t\t// Reading from data object, update the DOM\n\t\t\tvar cells = row.anCells;\n\t\n\t\t\tif ( cells ) {\n\t\t\t\tif ( colIdx !== undefined ) {\n\t\t\t\t\tcellWrite( cells[colIdx], colIdx );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfor ( i=0, ien=cells.length ; i<ien ; i++ ) {\n\t\t\t\t\t\tcellWrite( cells[i], i );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t// For both row and cell invalidation, the cached data for sorting and\n\t\t// filtering is nulled out\n\t\trow._aSortData = null;\n\t\trow._aFilterData = null;\n\t\n\t\t// Invalidate the type for a specific column (if given) or all columns since\n\t\t// the data might have changed\n\t\tvar cols = settings.aoColumns;\n\t\tif ( colIdx !== undefined ) {\n\t\t\tcols[ colIdx ].sType = null;\n\t\t}\n\t\telse {\n\t\t\tfor ( i=0, ien=cols.length ; i<ien ; i++ ) {\n\t\t\t\tcols[i].sType = null;\n\t\t\t}\n\t\n\t\t\t// Update DataTables special `DT_*` attributes for the row\n\t\t\t_fnRowAttributes( settings, row );\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Build a data source object from an HTML row, reading the contents of the\n\t * cells that are in the row.\n\t *\n\t * @param {object} settings DataTables settings object\n\t * @param {node|object} TR element from which to read data or existing row\n\t *   object from which to re-read the data from the cells\n\t * @param {int} [colIdx] Optional column index\n\t * @param {array|object} [d] Data source object. If `colIdx` is given then this\n\t *   parameter should also be given and will be used to write the data into.\n\t *   Only the column in question will be written\n\t * @returns {object} Object with two parameters: `data` the data read, in\n\t *   document order, and `cells` and array of nodes (they can be useful to the\n\t *   caller, so rather than needing a second traversal to get them, just return\n\t *   them from here).\n\t * @memberof DataTable#oApi\n\t */\n\tfunction _fnGetRowElements( settings, row, colIdx, d )\n\t{\n\t\tvar\n\t\t\ttds = [],\n\t\t\ttd = row.firstChild,\n\t\t\tname, col, o, i=0, contents,\n\t\t\tcolumns = settings.aoColumns,\n\t\t\tobjectRead = settings._rowReadObject;\n\t\n\t\t// Allow the data object to be passed in, or construct\n\t\td = d !== undefined ?\n\t\t\td :\n\t\t\tobjectRead ?\n\t\t\t\t{} :\n\t\t\t\t[];\n\t\n\t\tvar attr = function ( str, td  ) {\n\t\t\tif ( typeof str === 'string' ) {\n\t\t\t\tvar idx = str.indexOf('@');\n\t\n\t\t\t\tif ( idx !== -1 ) {\n\t\t\t\t\tvar attr = str.substring( idx+1 );\n\t\t\t\t\tvar setter = _fnSetObjectDataFn( str );\n\t\t\t\t\tsetter( d, td.getAttribute( attr ) );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\t// Read data from a cell and store into the data object\n\t\tvar cellProcess = function ( cell ) {\n\t\t\tif ( colIdx === undefined || colIdx === i ) {\n\t\t\t\tcol = columns[i];\n\t\t\t\tcontents = $.trim(cell.innerHTML);\n\t\n\t\t\t\tif ( col && col._bAttrSrc ) {\n\t\t\t\t\tvar setter = _fnSetObjectDataFn( col.mData._ );\n\t\t\t\t\tsetter( d, contents );\n\t\n\t\t\t\t\tattr( col.mData.sort, cell );\n\t\t\t\t\tattr( col.mData.type, cell );\n\t\t\t\t\tattr( col.mData.filter, cell );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Depending on the `data` option for the columns the data can\n\t\t\t\t\t// be read to either an object or an array.\n\t\t\t\t\tif ( objectRead ) {\n\t\t\t\t\t\tif ( ! col._setter ) {\n\t\t\t\t\t\t\t// Cache the setter function\n\t\t\t\t\t\t\tcol._setter = _fnSetObjectDataFn( col.mData );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcol._setter( d, contents );\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\td[i] = contents;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\ti++;\n\t\t};\n\t\n\t\tif ( td ) {\n\t\t\t// `tr` element was passed in\n\t\t\twhile ( td ) {\n\t\t\t\tname = td.nodeName.toUpperCase();\n\t\n\t\t\t\tif ( name == \"TD\" || name == \"TH\" ) {\n\t\t\t\t\tcellProcess( td );\n\t\t\t\t\ttds.push( td );\n\t\t\t\t}\n\t\n\t\t\t\ttd = td.nextSibling;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Existing row object passed in\n\t\t\ttds = row.anCells;\n\t\n\t\t\tfor ( var j=0, jen=tds.length ; j<jen ; j++ ) {\n\t\t\t\tcellProcess( tds[j] );\n\t\t\t}\n\t\t}\n\t\n\t\t// Read the ID from the DOM if present\n\t\tvar rowNode = row.firstChild ? row : row.nTr;\n\t\n\t\tif ( rowNode ) {\n\t\t\tvar id = rowNode.getAttribute( 'id' );\n\t\n\t\t\tif ( id ) {\n\t\t\t\t_fnSetObjectDataFn( settings.rowId )( d, id );\n\t\t\t}\n\t\t}\n\t\n\t\treturn {\n\t\t\tdata: d,\n\t\t\tcells: tds\n\t\t};\n\t}\n\t/**\n\t * Create a new TR element (and it's TD children) for a row\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {int} iRow Row to consider\n\t *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,\n\t *    DataTables will create a row automatically\n\t *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n\t *    if nTr is.\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnCreateTr ( oSettings, iRow, nTrIn, anTds )\n\t{\n\t\tvar\n\t\t\trow = oSettings.aoData[iRow],\n\t\t\trowData = row._aData,\n\t\t\tcells = [],\n\t\t\tnTr, nTd, oCol,\n\t\t\ti, iLen;\n\t\n\t\tif ( row.nTr === null )\n\t\t{\n\t\t\tnTr = nTrIn || document.createElement('tr');\n\t\n\t\t\trow.nTr = nTr;\n\t\t\trow.anCells = cells;\n\t\n\t\t\t/* Use a private property on the node to allow reserve mapping from the node\n\t\t\t * to the aoData array for fast look up\n\t\t\t */\n\t\t\tnTr._DT_RowIndex = iRow;\n\t\n\t\t\t/* Special parameters can be given by the data source to be used on the row */\n\t\t\t_fnRowAttributes( oSettings, row );\n\t\n\t\t\t/* Process each column */\n\t\t\tfor ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\toCol = oSettings.aoColumns[i];\n\t\n\t\t\t\tnTd = nTrIn ? anTds[i] : document.createElement( oCol.sCellType );\n\t\t\t\tnTd._DT_CellIndex = {\n\t\t\t\t\trow: iRow,\n\t\t\t\t\tcolumn: i\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tcells.push( nTd );\n\t\n\t\t\t\t// Need to create the HTML if new, or if a rendering function is defined\n\t\t\t\tif ( (!nTrIn || oCol.mRender || oCol.mData !== i) &&\n\t\t\t\t\t (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i+'.display')\n\t\t\t\t) {\n\t\t\t\t\tnTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );\n\t\t\t\t}\n\t\n\t\t\t\t/* Add user defined class */\n\t\t\t\tif ( oCol.sClass )\n\t\t\t\t{\n\t\t\t\t\tnTd.className += ' '+oCol.sClass;\n\t\t\t\t}\n\t\n\t\t\t\t// Visibility - add or remove as required\n\t\t\t\tif ( oCol.bVisible && ! nTrIn )\n\t\t\t\t{\n\t\t\t\t\tnTr.appendChild( nTd );\n\t\t\t\t}\n\t\t\t\telse if ( ! oCol.bVisible && nTrIn )\n\t\t\t\t{\n\t\t\t\t\tnTd.parentNode.removeChild( nTd );\n\t\t\t\t}\n\t\n\t\t\t\tif ( oCol.fnCreatedCell )\n\t\t\t\t{\n\t\t\t\t\toCol.fnCreatedCell.call( oSettings.oInstance,\n\t\t\t\t\t\tnTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow] );\n\t\t}\n\t\n\t\t// Remove once webkit bug 131819 and Chromium bug 365619 have been resolved\n\t\t// and deployed\n\t\trow.nTr.setAttribute( 'role', 'row' );\n\t}\n\t\n\t\n\t/**\n\t * Add attributes to a row based on the special `DT_*` parameters in a data\n\t * source object.\n\t *  @param {object} settings DataTables settings object\n\t *  @param {object} DataTables row object for the row to be modified\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnRowAttributes( settings, row )\n\t{\n\t\tvar tr = row.nTr;\n\t\tvar data = row._aData;\n\t\n\t\tif ( tr ) {\n\t\t\tvar id = settings.rowIdFn( data );\n\t\n\t\t\tif ( id ) {\n\t\t\t\ttr.id = id;\n\t\t\t}\n\t\n\t\t\tif ( data.DT_RowClass ) {\n\t\t\t\t// Remove any classes added by DT_RowClass before\n\t\t\t\tvar a = data.DT_RowClass.split(' ');\n\t\t\t\trow.__rowc = row.__rowc ?\n\t\t\t\t\t_unique( row.__rowc.concat( a ) ) :\n\t\t\t\t\ta;\n\t\n\t\t\t\t$(tr)\n\t\t\t\t\t.removeClass( row.__rowc.join(' ') )\n\t\t\t\t\t.addClass( data.DT_RowClass );\n\t\t\t}\n\t\n\t\t\tif ( data.DT_RowAttr ) {\n\t\t\t\t$(tr).attr( data.DT_RowAttr );\n\t\t\t}\n\t\n\t\t\tif ( data.DT_RowData ) {\n\t\t\t\t$(tr).data( data.DT_RowData );\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Create the HTML header for the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnBuildHead( oSettings )\n\t{\n\t\tvar i, ien, cell, row, column;\n\t\tvar thead = oSettings.nTHead;\n\t\tvar tfoot = oSettings.nTFoot;\n\t\tvar createHeader = $('th, td', thead).length === 0;\n\t\tvar classes = oSettings.oClasses;\n\t\tvar columns = oSettings.aoColumns;\n\t\n\t\tif ( createHeader ) {\n\t\t\trow = $('<tr/>').appendTo( thead );\n\t\t}\n\t\n\t\tfor ( i=0, ien=columns.length ; i<ien ; i++ ) {\n\t\t\tcolumn = columns[i];\n\t\t\tcell = $( column.nTh ).addClass( column.sClass );\n\t\n\t\t\tif ( createHeader ) {\n\t\t\t\tcell.appendTo( row );\n\t\t\t}\n\t\n\t\t\t// 1.11 move into sorting\n\t\t\tif ( oSettings.oFeatures.bSort ) {\n\t\t\t\tcell.addClass( column.sSortingClass );\n\t\n\t\t\t\tif ( column.bSortable !== false ) {\n\t\t\t\t\tcell\n\t\t\t\t\t\t.attr( 'tabindex', oSettings.iTabIndex )\n\t\t\t\t\t\t.attr( 'aria-controls', oSettings.sTableId );\n\t\n\t\t\t\t\t_fnSortAttachListener( oSettings, column.nTh, i );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif ( column.sTitle != cell[0].innerHTML ) {\n\t\t\t\tcell.html( column.sTitle );\n\t\t\t}\n\t\n\t\t\t_fnRenderer( oSettings, 'header' )(\n\t\t\t\toSettings, cell, column, classes\n\t\t\t);\n\t\t}\n\t\n\t\tif ( createHeader ) {\n\t\t\t_fnDetectHeader( oSettings.aoHeader, thead );\n\t\t}\n\t\t\n\t\t/* ARIA role for the rows */\n\t \t$(thead).find('>tr').attr('role', 'row');\n\t\n\t\t/* Deal with the footer - add classes if required */\n\t\t$(thead).find('>tr>th, >tr>td').addClass( classes.sHeaderTH );\n\t\t$(tfoot).find('>tr>th, >tr>td').addClass( classes.sFooterTH );\n\t\n\t\t// Cache the footer cells. Note that we only take the cells from the first\n\t\t// row in the footer. If there is more than one row the user wants to\n\t\t// interact with, they need to use the table().foot() method. Note also this\n\t\t// allows cells to be used for multiple columns using colspan\n\t\tif ( tfoot !== null ) {\n\t\t\tvar cells = oSettings.aoFooter[0];\n\t\n\t\t\tfor ( i=0, ien=cells.length ; i<ien ; i++ ) {\n\t\t\t\tcolumn = columns[i];\n\t\t\t\tcolumn.nTf = cells[i].cell;\n\t\n\t\t\t\tif ( column.sClass ) {\n\t\t\t\t\t$(column.nTf).addClass( column.sClass );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Draw the header (or footer) element based on the column visibility states. The\n\t * methodology here is to use the layout array from _fnDetectHeader, modified for\n\t * the instantaneous column visibility, to construct the new layout. The grid is\n\t * traversed over cell at a time in a rows x columns grid fashion, although each\n\t * cell insert can cover multiple elements in the grid - which is tracks using the\n\t * aApplied array. Cell inserts in the grid will only occur where there isn't\n\t * already a cell in that position.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param array {objects} aoSource Layout array from _fnDetectHeader\n\t *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnDrawHead( oSettings, aoSource, bIncludeHidden )\n\t{\n\t\tvar i, iLen, j, jLen, k, kLen, n, nLocalTr;\n\t\tvar aoLocal = [];\n\t\tvar aApplied = [];\n\t\tvar iColumns = oSettings.aoColumns.length;\n\t\tvar iRowspan, iColspan;\n\t\n\t\tif ( ! aoSource )\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\n\t\tif (  bIncludeHidden === undefined )\n\t\t{\n\t\t\tbIncludeHidden = false;\n\t\t}\n\t\n\t\t/* Make a copy of the master layout array, but without the visible columns in it */\n\t\tfor ( i=0, iLen=aoSource.length ; i<iLen ; i++ )\n\t\t{\n\t\t\taoLocal[i] = aoSource[i].slice();\n\t\t\taoLocal[i].nTr = aoSource[i].nTr;\n\t\n\t\t\t/* Remove any columns which are currently hidden */\n\t\t\tfor ( j=iColumns-1 ; j>=0 ; j-- )\n\t\t\t{\n\t\t\t\tif ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )\n\t\t\t\t{\n\t\t\t\t\taoLocal[i].splice( j, 1 );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t/* Prep the applied array - it needs an element for each row */\n\t\t\taApplied.push( [] );\n\t\t}\n\t\n\t\tfor ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tnLocalTr = aoLocal[i].nTr;\n\t\n\t\t\t/* All cells are going to be replaced, so empty out the row */\n\t\t\tif ( nLocalTr )\n\t\t\t{\n\t\t\t\twhile( (n = nLocalTr.firstChild) )\n\t\t\t\t{\n\t\t\t\t\tnLocalTr.removeChild( n );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfor ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )\n\t\t\t{\n\t\t\t\tiRowspan = 1;\n\t\t\t\tiColspan = 1;\n\t\n\t\t\t\t/* Check to see if there is already a cell (row/colspan) covering our target\n\t\t\t\t * insert point. If there is, then there is nothing to do.\n\t\t\t\t */\n\t\t\t\tif ( aApplied[i][j] === undefined )\n\t\t\t\t{\n\t\t\t\t\tnLocalTr.appendChild( aoLocal[i][j].cell );\n\t\t\t\t\taApplied[i][j] = 1;\n\t\n\t\t\t\t\t/* Expand the cell to cover as many rows as needed */\n\t\t\t\t\twhile ( aoLocal[i+iRowspan] !== undefined &&\n\t\t\t\t\t        aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )\n\t\t\t\t\t{\n\t\t\t\t\t\taApplied[i+iRowspan][j] = 1;\n\t\t\t\t\t\tiRowspan++;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t/* Expand the cell to cover as many columns as needed */\n\t\t\t\t\twhile ( aoLocal[i][j+iColspan] !== undefined &&\n\t\t\t\t\t        aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )\n\t\t\t\t\t{\n\t\t\t\t\t\t/* Must update the applied array over the rows for the columns */\n\t\t\t\t\t\tfor ( k=0 ; k<iRowspan ; k++ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taApplied[i+k][j+iColspan] = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tiColspan++;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t/* Do the actual expansion in the DOM */\n\t\t\t\t\t$(aoLocal[i][j].cell)\n\t\t\t\t\t\t.attr('rowspan', iRowspan)\n\t\t\t\t\t\t.attr('colspan', iColspan);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Insert the required TR nodes into the table for display\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnDraw( oSettings )\n\t{\n\t\t/* Provide a pre-callback function which can be used to cancel the draw is false is returned */\n\t\tvar aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );\n\t\tif ( $.inArray( false, aPreDraw ) !== -1 )\n\t\t{\n\t\t\t_fnProcessingDisplay( oSettings, false );\n\t\t\treturn;\n\t\t}\n\t\n\t\tvar i, iLen, n;\n\t\tvar anRows = [];\n\t\tvar iRowCount = 0;\n\t\tvar asStripeClasses = oSettings.asStripeClasses;\n\t\tvar iStripes = asStripeClasses.length;\n\t\tvar iOpenRows = oSettings.aoOpenRows.length;\n\t\tvar oLang = oSettings.oLanguage;\n\t\tvar iInitDisplayStart = oSettings.iInitDisplayStart;\n\t\tvar bServerSide = _fnDataSource( oSettings ) == 'ssp';\n\t\tvar aiDisplay = oSettings.aiDisplay;\n\t\n\t\toSettings.bDrawing = true;\n\t\n\t\t/* Check and see if we have an initial draw position from state saving */\n\t\tif ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )\n\t\t{\n\t\t\toSettings._iDisplayStart = bServerSide ?\n\t\t\t\tiInitDisplayStart :\n\t\t\t\tiInitDisplayStart >= oSettings.fnRecordsDisplay() ?\n\t\t\t\t\t0 :\n\t\t\t\t\tiInitDisplayStart;\n\t\n\t\t\toSettings.iInitDisplayStart = -1;\n\t\t}\n\t\n\t\tvar iDisplayStart = oSettings._iDisplayStart;\n\t\tvar iDisplayEnd = oSettings.fnDisplayEnd();\n\t\n\t\t/* Server-side processing draw intercept */\n\t\tif ( oSettings.bDeferLoading )\n\t\t{\n\t\t\toSettings.bDeferLoading = false;\n\t\t\toSettings.iDraw++;\n\t\t\t_fnProcessingDisplay( oSettings, false );\n\t\t}\n\t\telse if ( !bServerSide )\n\t\t{\n\t\t\toSettings.iDraw++;\n\t\t}\n\t\telse if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\n\t\tif ( aiDisplay.length !== 0 )\n\t\t{\n\t\t\tvar iStart = bServerSide ? 0 : iDisplayStart;\n\t\t\tvar iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;\n\t\n\t\t\tfor ( var j=iStart ; j<iEnd ; j++ )\n\t\t\t{\n\t\t\t\tvar iDataIndex = aiDisplay[j];\n\t\t\t\tvar aoData = oSettings.aoData[ iDataIndex ];\n\t\t\t\tif ( aoData.nTr === null )\n\t\t\t\t{\n\t\t\t\t\t_fnCreateTr( oSettings, iDataIndex );\n\t\t\t\t}\n\t\n\t\t\t\tvar nRow = aoData.nTr;\n\t\n\t\t\t\t/* Remove the old striping classes and then add the new one */\n\t\t\t\tif ( iStripes !== 0 )\n\t\t\t\t{\n\t\t\t\t\tvar sStripe = asStripeClasses[ iRowCount % iStripes ];\n\t\t\t\t\tif ( aoData._sRowStripe != sStripe )\n\t\t\t\t\t{\n\t\t\t\t\t\t$(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );\n\t\t\t\t\t\taoData._sRowStripe = sStripe;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t// Row callback functions - might want to manipulate the row\n\t\t\t\t// iRowCount and j are not currently documented. Are they at all\n\t\t\t\t// useful?\n\t\t\t\t_fnCallbackFire( oSettings, 'aoRowCallback', null,\n\t\t\t\t\t[nRow, aoData._aData, iRowCount, j] );\n\t\n\t\t\t\tanRows.push( nRow );\n\t\t\t\tiRowCount++;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/* Table is empty - create a row with an empty message in it */\n\t\t\tvar sZero = oLang.sZeroRecords;\n\t\t\tif ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )\n\t\t\t{\n\t\t\t\tsZero = oLang.sLoadingRecords;\n\t\t\t}\n\t\t\telse if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )\n\t\t\t{\n\t\t\t\tsZero = oLang.sEmptyTable;\n\t\t\t}\n\t\n\t\t\tanRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )\n\t\t\t\t.append( $('<td />', {\n\t\t\t\t\t'valign':  'top',\n\t\t\t\t\t'colSpan': _fnVisbleColumns( oSettings ),\n\t\t\t\t\t'class':   oSettings.oClasses.sRowEmpty\n\t\t\t\t} ).html( sZero ) )[0];\n\t\t}\n\t\n\t\t/* Header and footer callbacks */\n\t\t_fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],\n\t\t\t_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\n\t\n\t\t_fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],\n\t\t\t_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\n\t\n\t\tvar body = $(oSettings.nTBody);\n\t\n\t\tbody.children().detach();\n\t\tbody.append( $(anRows) );\n\t\n\t\t/* Call all required callback functions for the end of a draw */\n\t\t_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );\n\t\n\t\t/* Draw is complete, sorting and filtering must be as well */\n\t\toSettings.bSorted = false;\n\t\toSettings.bFiltered = false;\n\t\toSettings.bDrawing = false;\n\t}\n\t\n\t\n\t/**\n\t * Redraw the table - taking account of the various features which are enabled\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {boolean} [holdPosition] Keep the current paging position. By default\n\t *    the paging is reset to the first page\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnReDraw( settings, holdPosition )\n\t{\n\t\tvar\n\t\t\tfeatures = settings.oFeatures,\n\t\t\tsort     = features.bSort,\n\t\t\tfilter   = features.bFilter;\n\t\n\t\tif ( sort ) {\n\t\t\t_fnSort( settings );\n\t\t}\n\t\n\t\tif ( filter ) {\n\t\t\t_fnFilterComplete( settings, settings.oPreviousSearch );\n\t\t}\n\t\telse {\n\t\t\t// No filtering, so we want to just use the display master\n\t\t\tsettings.aiDisplay = settings.aiDisplayMaster.slice();\n\t\t}\n\t\n\t\tif ( holdPosition !== true ) {\n\t\t\tsettings._iDisplayStart = 0;\n\t\t}\n\t\n\t\t// Let any modules know about the draw hold position state (used by\n\t\t// scrolling internally)\n\t\tsettings._drawHold = holdPosition;\n\t\n\t\t_fnDraw( settings );\n\t\n\t\tsettings._drawHold = false;\n\t}\n\t\n\t\n\t/**\n\t * Add the options to the page HTML for the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAddOptionsHtml ( oSettings )\n\t{\n\t\tvar classes = oSettings.oClasses;\n\t\tvar table = $(oSettings.nTable);\n\t\tvar holding = $('<div/>').insertBefore( table ); // Holding element for speed\n\t\tvar features = oSettings.oFeatures;\n\t\n\t\t// All DataTables are wrapped in a div\n\t\tvar insert = $('<div/>', {\n\t\t\tid:      oSettings.sTableId+'_wrapper',\n\t\t\t'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)\n\t\t} );\n\t\n\t\toSettings.nHolding = holding[0];\n\t\toSettings.nTableWrapper = insert[0];\n\t\toSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;\n\t\n\t\t/* Loop over the user set positioning and place the elements as needed */\n\t\tvar aDom = oSettings.sDom.split('');\n\t\tvar featureNode, cOption, nNewNode, cNext, sAttr, j;\n\t\tfor ( var i=0 ; i<aDom.length ; i++ )\n\t\t{\n\t\t\tfeatureNode = null;\n\t\t\tcOption = aDom[i];\n\t\n\t\t\tif ( cOption == '<' )\n\t\t\t{\n\t\t\t\t/* New container div */\n\t\t\t\tnNewNode = $('<div/>')[0];\n\t\n\t\t\t\t/* Check to see if we should append an id and/or a class name to the container */\n\t\t\t\tcNext = aDom[i+1];\n\t\t\t\tif ( cNext == \"'\" || cNext == '\"' )\n\t\t\t\t{\n\t\t\t\t\tsAttr = \"\";\n\t\t\t\t\tj = 2;\n\t\t\t\t\twhile ( aDom[i+j] != cNext )\n\t\t\t\t\t{\n\t\t\t\t\t\tsAttr += aDom[i+j];\n\t\t\t\t\t\tj++;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t/* Replace jQuery UI constants @todo depreciated */\n\t\t\t\t\tif ( sAttr == \"H\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tsAttr = classes.sJUIHeader;\n\t\t\t\t\t}\n\t\t\t\t\telse if ( sAttr == \"F\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tsAttr = classes.sJUIFooter;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t/* The attribute can be in the format of \"#id.class\", \"#id\" or \"class\" This logic\n\t\t\t\t\t * breaks the string into parts and applies them as needed\n\t\t\t\t\t */\n\t\t\t\t\tif ( sAttr.indexOf('.') != -1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tvar aSplit = sAttr.split('.');\n\t\t\t\t\t\tnNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);\n\t\t\t\t\t\tnNewNode.className = aSplit[1];\n\t\t\t\t\t}\n\t\t\t\t\telse if ( sAttr.charAt(0) == \"#\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tnNewNode.id = sAttr.substr(1, sAttr.length-1);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnNewNode.className = sAttr;\n\t\t\t\t\t}\n\t\n\t\t\t\t\ti += j; /* Move along the position array */\n\t\t\t\t}\n\t\n\t\t\t\tinsert.append( nNewNode );\n\t\t\t\tinsert = $(nNewNode);\n\t\t\t}\n\t\t\telse if ( cOption == '>' )\n\t\t\t{\n\t\t\t\t/* End container div */\n\t\t\t\tinsert = insert.parent();\n\t\t\t}\n\t\t\t// @todo Move options into their own plugins?\n\t\t\telse if ( cOption == 'l' && features.bPaginate && features.bLengthChange )\n\t\t\t{\n\t\t\t\t/* Length */\n\t\t\t\tfeatureNode = _fnFeatureHtmlLength( oSettings );\n\t\t\t}\n\t\t\telse if ( cOption == 'f' && features.bFilter )\n\t\t\t{\n\t\t\t\t/* Filter */\n\t\t\t\tfeatureNode = _fnFeatureHtmlFilter( oSettings );\n\t\t\t}\n\t\t\telse if ( cOption == 'r' && features.bProcessing )\n\t\t\t{\n\t\t\t\t/* pRocessing */\n\t\t\t\tfeatureNode = _fnFeatureHtmlProcessing( oSettings );\n\t\t\t}\n\t\t\telse if ( cOption == 't' )\n\t\t\t{\n\t\t\t\t/* Table */\n\t\t\t\tfeatureNode = _fnFeatureHtmlTable( oSettings );\n\t\t\t}\n\t\t\telse if ( cOption ==  'i' && features.bInfo )\n\t\t\t{\n\t\t\t\t/* Info */\n\t\t\t\tfeatureNode = _fnFeatureHtmlInfo( oSettings );\n\t\t\t}\n\t\t\telse if ( cOption == 'p' && features.bPaginate )\n\t\t\t{\n\t\t\t\t/* Pagination */\n\t\t\t\tfeatureNode = _fnFeatureHtmlPaginate( oSettings );\n\t\t\t}\n\t\t\telse if ( DataTable.ext.feature.length !== 0 )\n\t\t\t{\n\t\t\t\t/* Plug-in features */\n\t\t\t\tvar aoFeatures = DataTable.ext.feature;\n\t\t\t\tfor ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )\n\t\t\t\t{\n\t\t\t\t\tif ( cOption == aoFeatures[k].cFeature )\n\t\t\t\t\t{\n\t\t\t\t\t\tfeatureNode = aoFeatures[k].fnInit( oSettings );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t/* Add to the 2D features array */\n\t\t\tif ( featureNode )\n\t\t\t{\n\t\t\t\tvar aanFeatures = oSettings.aanFeatures;\n\t\n\t\t\t\tif ( ! aanFeatures[cOption] )\n\t\t\t\t{\n\t\t\t\t\taanFeatures[cOption] = [];\n\t\t\t\t}\n\t\n\t\t\t\taanFeatures[cOption].push( featureNode );\n\t\t\t\tinsert.append( featureNode );\n\t\t\t}\n\t\t}\n\t\n\t\t/* Built our DOM structure - replace the holding div with what we want */\n\t\tholding.replaceWith( insert );\n\t\toSettings.nHolding = null;\n\t}\n\t\n\t\n\t/**\n\t * Use the DOM source to create up an array of header cells. The idea here is to\n\t * create a layout grid (array) of rows x columns, which contains a reference\n\t * to the cell that that point in the grid (regardless of col/rowspan), such that\n\t * any column / row could be removed and the new grid constructed\n\t *  @param array {object} aLayout Array to store the calculated layout in\n\t *  @param {node} nThead The header/footer element for the table\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnDetectHeader ( aLayout, nThead )\n\t{\n\t\tvar nTrs = $(nThead).children('tr');\n\t\tvar nTr, nCell;\n\t\tvar i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;\n\t\tvar bUnique;\n\t\tvar fnShiftCol = function ( a, i, j ) {\n\t\t\tvar k = a[i];\n\t                while ( k[j] ) {\n\t\t\t\tj++;\n\t\t\t}\n\t\t\treturn j;\n\t\t};\n\t\n\t\taLayout.splice( 0, aLayout.length );\n\t\n\t\t/* We know how many rows there are in the layout - so prep it */\n\t\tfor ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\n\t\t{\n\t\t\taLayout.push( [] );\n\t\t}\n\t\n\t\t/* Calculate a layout array */\n\t\tfor ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tnTr = nTrs[i];\n\t\t\tiColumn = 0;\n\t\n\t\t\t/* For every cell in the row... */\n\t\t\tnCell = nTr.firstChild;\n\t\t\twhile ( nCell ) {\n\t\t\t\tif ( nCell.nodeName.toUpperCase() == \"TD\" ||\n\t\t\t\t     nCell.nodeName.toUpperCase() == \"TH\" )\n\t\t\t\t{\n\t\t\t\t\t/* Get the col and rowspan attributes from the DOM and sanitise them */\n\t\t\t\t\tiColspan = nCell.getAttribute('colspan') * 1;\n\t\t\t\t\tiRowspan = nCell.getAttribute('rowspan') * 1;\n\t\t\t\t\tiColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;\n\t\t\t\t\tiRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;\n\t\n\t\t\t\t\t/* There might be colspan cells already in this row, so shift our target\n\t\t\t\t\t * accordingly\n\t\t\t\t\t */\n\t\t\t\t\tiColShifted = fnShiftCol( aLayout, i, iColumn );\n\t\n\t\t\t\t\t/* Cache calculation for unique columns */\n\t\t\t\t\tbUnique = iColspan === 1 ? true : false;\n\t\n\t\t\t\t\t/* If there is col / rowspan, copy the information into the layout grid */\n\t\t\t\t\tfor ( l=0 ; l<iColspan ; l++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tfor ( k=0 ; k<iRowspan ; k++ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taLayout[i+k][iColShifted+l] = {\n\t\t\t\t\t\t\t\t\"cell\": nCell,\n\t\t\t\t\t\t\t\t\"unique\": bUnique\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\taLayout[i+k].nTr = nTr;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnCell = nCell.nextSibling;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Get an array of unique th elements, one for each column\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {node} nHeader automatically detect the layout from this node - optional\n\t *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional\n\t *  @returns array {node} aReturn list of unique th's\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetUniqueThs ( oSettings, nHeader, aLayout )\n\t{\n\t\tvar aReturn = [];\n\t\tif ( !aLayout )\n\t\t{\n\t\t\taLayout = oSettings.aoHeader;\n\t\t\tif ( nHeader )\n\t\t\t{\n\t\t\t\taLayout = [];\n\t\t\t\t_fnDetectHeader( aLayout, nHeader );\n\t\t\t}\n\t\t}\n\t\n\t\tfor ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tfor ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )\n\t\t\t{\n\t\t\t\tif ( aLayout[i][j].unique &&\n\t\t\t\t\t (!aReturn[j] || !oSettings.bSortCellsTop) )\n\t\t\t\t{\n\t\t\t\t\taReturn[j] = aLayout[i][j].cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn aReturn;\n\t}\n\t\n\t/**\n\t * Create an Ajax call based on the table's settings, taking into account that\n\t * parameters can have multiple forms, and backwards compatibility.\n\t *\n\t * @param {object} oSettings dataTables settings object\n\t * @param {array} data Data to send to the server, required by\n\t *     DataTables - may be augmented by developer callbacks\n\t * @param {function} fn Callback function to run when data is obtained\n\t */\n\tfunction _fnBuildAjax( oSettings, data, fn )\n\t{\n\t\t// Compatibility with 1.9-, allow fnServerData and event to manipulate\n\t\t_fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );\n\t\n\t\t// Convert to object based for 1.10+ if using the old array scheme which can\n\t\t// come from server-side processing or serverParams\n\t\tif ( data && $.isArray(data) ) {\n\t\t\tvar tmp = {};\n\t\t\tvar rbracket = /(.*?)\\[\\]$/;\n\t\n\t\t\t$.each( data, function (key, val) {\n\t\t\t\tvar match = val.name.match(rbracket);\n\t\n\t\t\t\tif ( match ) {\n\t\t\t\t\t// Support for arrays\n\t\t\t\t\tvar name = match[0];\n\t\n\t\t\t\t\tif ( ! tmp[ name ] ) {\n\t\t\t\t\t\ttmp[ name ] = [];\n\t\t\t\t\t}\n\t\t\t\t\ttmp[ name ].push( val.value );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttmp[val.name] = val.value;\n\t\t\t\t}\n\t\t\t} );\n\t\t\tdata = tmp;\n\t\t}\n\t\n\t\tvar ajaxData;\n\t\tvar ajax = oSettings.ajax;\n\t\tvar instance = oSettings.oInstance;\n\t\tvar callback = function ( json ) {\n\t\t\t_fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );\n\t\t\tfn( json );\n\t\t};\n\t\n\t\tif ( $.isPlainObject( ajax ) && ajax.data )\n\t\t{\n\t\t\tajaxData = ajax.data;\n\t\n\t\t\tvar newData = $.isFunction( ajaxData ) ?\n\t\t\t\tajaxData( data, oSettings ) :  // fn can manipulate data or return\n\t\t\t\tajaxData;                      // an object object or array to merge\n\t\n\t\t\t// If the function returned something, use that alone\n\t\t\tdata = $.isFunction( ajaxData ) && newData ?\n\t\t\t\tnewData :\n\t\t\t\t$.extend( true, data, newData );\n\t\n\t\t\t// Remove the data property as we've resolved it already and don't want\n\t\t\t// jQuery to do it again (it is restored at the end of the function)\n\t\t\tdelete ajax.data;\n\t\t}\n\t\n\t\tvar baseAjax = {\n\t\t\t\"data\": data,\n\t\t\t\"success\": function (json) {\n\t\t\t\tvar error = json.error || json.sError;\n\t\t\t\tif ( error ) {\n\t\t\t\t\t_fnLog( oSettings, 0, error );\n\t\t\t\t}\n\t\n\t\t\t\toSettings.json = json;\n\t\t\t\tcallback( json );\n\t\t\t},\n\t\t\t\"dataType\": \"json\",\n\t\t\t\"cache\": false,\n\t\t\t\"type\": oSettings.sServerMethod,\n\t\t\t\"error\": function (xhr, error, thrown) {\n\t\t\t\tvar ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );\n\t\n\t\t\t\tif ( $.inArray( true, ret ) === -1 ) {\n\t\t\t\t\tif ( error == \"parsererror\" ) {\n\t\t\t\t\t\t_fnLog( oSettings, 0, 'Invalid JSON response', 1 );\n\t\t\t\t\t}\n\t\t\t\t\telse if ( xhr.readyState === 4 ) {\n\t\t\t\t\t\t_fnLog( oSettings, 0, 'Ajax error', 7 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t_fnProcessingDisplay( oSettings, false );\n\t\t\t}\n\t\t};\n\t\n\t\t// Store the data submitted for the API\n\t\toSettings.oAjaxData = data;\n\t\n\t\t// Allow plug-ins and external processes to modify the data\n\t\t_fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );\n\t\n\t\tif ( oSettings.fnServerData )\n\t\t{\n\t\t\t// DataTables 1.9- compatibility\n\t\t\toSettings.fnServerData.call( instance,\n\t\t\t\toSettings.sAjaxSource,\n\t\t\t\t$.map( data, function (val, key) { // Need to convert back to 1.9 trad format\n\t\t\t\t\treturn { name: key, value: val };\n\t\t\t\t} ),\n\t\t\t\tcallback,\n\t\t\t\toSettings\n\t\t\t);\n\t\t}\n\t\telse if ( oSettings.sAjaxSource || typeof ajax === 'string' )\n\t\t{\n\t\t\t// DataTables 1.9- compatibility\n\t\t\toSettings.jqXHR = $.ajax( $.extend( baseAjax, {\n\t\t\t\turl: ajax || oSettings.sAjaxSource\n\t\t\t} ) );\n\t\t}\n\t\telse if ( $.isFunction( ajax ) )\n\t\t{\n\t\t\t// Is a function - let the caller define what needs to be done\n\t\t\toSettings.jqXHR = ajax.call( instance, data, callback, oSettings );\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Object to extend the base settings\n\t\t\toSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );\n\t\n\t\t\t// Restore for next time around\n\t\t\tajax.data = ajaxData;\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Update the table using an Ajax call\n\t *  @param {object} settings dataTables settings object\n\t *  @returns {boolean} Block the table drawing or not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAjaxUpdate( settings )\n\t{\n\t\tif ( settings.bAjaxDataGet ) {\n\t\t\tsettings.iDraw++;\n\t\t\t_fnProcessingDisplay( settings, true );\n\t\n\t\t\t_fnBuildAjax(\n\t\t\t\tsettings,\n\t\t\t\t_fnAjaxParameters( settings ),\n\t\t\t\tfunction(json) {\n\t\t\t\t\t_fnAjaxUpdateDraw( settings, json );\n\t\t\t\t}\n\t\t\t);\n\t\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\t\n\t\n\t/**\n\t * Build up the parameters in an object needed for a server-side processing\n\t * request. Note that this is basically done twice, is different ways - a modern\n\t * method which is used by default in DataTables 1.10 which uses objects and\n\t * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if\n\t * the sAjaxSource option is used in the initialisation, or the legacyAjax\n\t * option is set.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns {bool} block the table drawing or not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAjaxParameters( settings )\n\t{\n\t\tvar\n\t\t\tcolumns = settings.aoColumns,\n\t\t\tcolumnCount = columns.length,\n\t\t\tfeatures = settings.oFeatures,\n\t\t\tpreSearch = settings.oPreviousSearch,\n\t\t\tpreColSearch = settings.aoPreSearchCols,\n\t\t\ti, data = [], dataProp, column, columnSearch,\n\t\t\tsort = _fnSortFlatten( settings ),\n\t\t\tdisplayStart = settings._iDisplayStart,\n\t\t\tdisplayLength = features.bPaginate !== false ?\n\t\t\t\tsettings._iDisplayLength :\n\t\t\t\t-1;\n\t\n\t\tvar param = function ( name, value ) {\n\t\t\tdata.push( { 'name': name, 'value': value } );\n\t\t};\n\t\n\t\t// DataTables 1.9- compatible method\n\t\tparam( 'sEcho',          settings.iDraw );\n\t\tparam( 'iColumns',       columnCount );\n\t\tparam( 'sColumns',       _pluck( columns, 'sName' ).join(',') );\n\t\tparam( 'iDisplayStart',  displayStart );\n\t\tparam( 'iDisplayLength', displayLength );\n\t\n\t\t// DataTables 1.10+ method\n\t\tvar d = {\n\t\t\tdraw:    settings.iDraw,\n\t\t\tcolumns: [],\n\t\t\torder:   [],\n\t\t\tstart:   displayStart,\n\t\t\tlength:  displayLength,\n\t\t\tsearch:  {\n\t\t\t\tvalue: preSearch.sSearch,\n\t\t\t\tregex: preSearch.bRegex\n\t\t\t}\n\t\t};\n\t\n\t\tfor ( i=0 ; i<columnCount ; i++ ) {\n\t\t\tcolumn = columns[i];\n\t\t\tcolumnSearch = preColSearch[i];\n\t\t\tdataProp = typeof column.mData==\"function\" ? 'function' : column.mData ;\n\t\n\t\t\td.columns.push( {\n\t\t\t\tdata:       dataProp,\n\t\t\t\tname:       column.sName,\n\t\t\t\tsearchable: column.bSearchable,\n\t\t\t\torderable:  column.bSortable,\n\t\t\t\tsearch:     {\n\t\t\t\t\tvalue: columnSearch.sSearch,\n\t\t\t\t\tregex: columnSearch.bRegex\n\t\t\t\t}\n\t\t\t} );\n\t\n\t\t\tparam( \"mDataProp_\"+i, dataProp );\n\t\n\t\t\tif ( features.bFilter ) {\n\t\t\t\tparam( 'sSearch_'+i,     columnSearch.sSearch );\n\t\t\t\tparam( 'bRegex_'+i,      columnSearch.bRegex );\n\t\t\t\tparam( 'bSearchable_'+i, column.bSearchable );\n\t\t\t}\n\t\n\t\t\tif ( features.bSort ) {\n\t\t\t\tparam( 'bSortable_'+i, column.bSortable );\n\t\t\t}\n\t\t}\n\t\n\t\tif ( features.bFilter ) {\n\t\t\tparam( 'sSearch', preSearch.sSearch );\n\t\t\tparam( 'bRegex', preSearch.bRegex );\n\t\t}\n\t\n\t\tif ( features.bSort ) {\n\t\t\t$.each( sort, function ( i, val ) {\n\t\t\t\td.order.push( { column: val.col, dir: val.dir } );\n\t\n\t\t\t\tparam( 'iSortCol_'+i, val.col );\n\t\t\t\tparam( 'sSortDir_'+i, val.dir );\n\t\t\t} );\n\t\n\t\t\tparam( 'iSortingCols', sort.length );\n\t\t}\n\t\n\t\t// If the legacy.ajax parameter is null, then we automatically decide which\n\t\t// form to use, based on sAjaxSource\n\t\tvar legacy = DataTable.ext.legacy.ajax;\n\t\tif ( legacy === null ) {\n\t\t\treturn settings.sAjaxSource ? data : d;\n\t\t}\n\t\n\t\t// Otherwise, if legacy has been specified then we use that to decide on the\n\t\t// form\n\t\treturn legacy ? data : d;\n\t}\n\t\n\t\n\t/**\n\t * Data the data from the server (nuking the old) and redraw the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {object} json json data return from the server.\n\t *  @param {string} json.sEcho Tracking flag for DataTables to match requests\n\t *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering\n\t *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering\n\t *  @param {array} json.aaData The data to display on this page\n\t *  @param {string} [json.sColumns] Column ordering (sName, comma separated)\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAjaxUpdateDraw ( settings, json )\n\t{\n\t\t// v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.\n\t\t// Support both\n\t\tvar compat = function ( old, modern ) {\n\t\t\treturn json[old] !== undefined ? json[old] : json[modern];\n\t\t};\n\t\n\t\tvar data = _fnAjaxDataSrc( settings, json );\n\t\tvar draw            = compat( 'sEcho',                'draw' );\n\t\tvar recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );\n\t\tvar recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );\n\t\n\t\tif ( draw ) {\n\t\t\t// Protect against out of sequence returns\n\t\t\tif ( draw*1 < settings.iDraw ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsettings.iDraw = draw * 1;\n\t\t}\n\t\n\t\t_fnClearTable( settings );\n\t\tsettings._iRecordsTotal   = parseInt(recordsTotal, 10);\n\t\tsettings._iRecordsDisplay = parseInt(recordsFiltered, 10);\n\t\n\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t_fnAddData( settings, data[i] );\n\t\t}\n\t\tsettings.aiDisplay = settings.aiDisplayMaster.slice();\n\t\n\t\tsettings.bAjaxDataGet = false;\n\t\t_fnDraw( settings );\n\t\n\t\tif ( ! settings._bInitComplete ) {\n\t\t\t_fnInitComplete( settings, json );\n\t\t}\n\t\n\t\tsettings.bAjaxDataGet = true;\n\t\t_fnProcessingDisplay( settings, false );\n\t}\n\t\n\t\n\t/**\n\t * Get the data from the JSON data source to use for drawing a table. Using\n\t * `_fnGetObjectDataFn` allows the data to be sourced from a property of the\n\t * source object, or from a processing function.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param  {object} json Data source object / array from the server\n\t *  @return {array} Array of data to use\n\t */\n\tfunction _fnAjaxDataSrc ( oSettings, json )\n\t{\n\t\tvar dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?\n\t\t\toSettings.ajax.dataSrc :\n\t\t\toSettings.sAjaxDataProp; // Compatibility with 1.9-.\n\t\n\t\t// Compatibility with 1.9-. In order to read from aaData, check if the\n\t\t// default has been changed, if not, check for aaData\n\t\tif ( dataSrc === 'data' ) {\n\t\t\treturn json.aaData || json[dataSrc];\n\t\t}\n\t\n\t\treturn dataSrc !== \"\" ?\n\t\t\t_fnGetObjectDataFn( dataSrc )( json ) :\n\t\t\tjson;\n\t}\n\t\n\t/**\n\t * Generate the node required for filtering text\n\t *  @returns {node} Filter control element\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlFilter ( settings )\n\t{\n\t\tvar classes = settings.oClasses;\n\t\tvar tableId = settings.sTableId;\n\t\tvar language = settings.oLanguage;\n\t\tvar previousSearch = settings.oPreviousSearch;\n\t\tvar features = settings.aanFeatures;\n\t\tvar input = '<input type=\"search\" class=\"'+classes.sFilterInput+'\"/>';\n\t\n\t\tvar str = language.sSearch;\n\t\tstr = str.match(/_INPUT_/) ?\n\t\t\tstr.replace('_INPUT_', input) :\n\t\t\tstr+input;\n\t\n\t\tvar filter = $('<div/>', {\n\t\t\t\t'id': ! features.f ? tableId+'_filter' : null,\n\t\t\t\t'class': classes.sFilter\n\t\t\t} )\n\t\t\t.append( $('<label/>' ).append( str ) );\n\t\n\t\tvar searchFn = function() {\n\t\t\t/* Update all other filter input elements for the new display */\n\t\t\tvar n = features.f;\n\t\t\tvar val = !this.value ? \"\" : this.value; // mental IE8 fix :-(\n\t\n\t\t\t/* Now do the filter */\n\t\t\tif ( val != previousSearch.sSearch ) {\n\t\t\t\t_fnFilterComplete( settings, {\n\t\t\t\t\t\"sSearch\": val,\n\t\t\t\t\t\"bRegex\": previousSearch.bRegex,\n\t\t\t\t\t\"bSmart\": previousSearch.bSmart ,\n\t\t\t\t\t\"bCaseInsensitive\": previousSearch.bCaseInsensitive\n\t\t\t\t} );\n\t\n\t\t\t\t// Need to redraw, without resorting\n\t\t\t\tsettings._iDisplayStart = 0;\n\t\t\t\t_fnDraw( settings );\n\t\t\t}\n\t\t};\n\t\n\t\tvar searchDelay = settings.searchDelay !== null ?\n\t\t\tsettings.searchDelay :\n\t\t\t_fnDataSource( settings ) === 'ssp' ?\n\t\t\t\t400 :\n\t\t\t\t0;\n\t\n\t\tvar jqFilter = $('input', filter)\n\t\t\t.val( previousSearch.sSearch )\n\t\t\t.attr( 'placeholder', language.sSearchPlaceholder )\n\t\t\t.on(\n\t\t\t\t'keyup.DT search.DT input.DT paste.DT cut.DT',\n\t\t\t\tsearchDelay ?\n\t\t\t\t\t_fnThrottle( searchFn, searchDelay ) :\n\t\t\t\t\tsearchFn\n\t\t\t)\n\t\t\t.on( 'keypress.DT', function(e) {\n\t\t\t\t/* Prevent form submission */\n\t\t\t\tif ( e.keyCode == 13 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} )\n\t\t\t.attr('aria-controls', tableId);\n\t\n\t\t// Update the input elements whenever the table is filtered\n\t\t$(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {\n\t\t\tif ( settings === s ) {\n\t\t\t\t// IE9 throws an 'unknown error' if document.activeElement is used\n\t\t\t\t// inside an iframe or frame...\n\t\t\t\ttry {\n\t\t\t\t\tif ( jqFilter[0] !== document.activeElement ) {\n\t\t\t\t\t\tjqFilter.val( previousSearch.sSearch );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch ( e ) {}\n\t\t\t}\n\t\t} );\n\t\n\t\treturn filter[0];\n\t}\n\t\n\t\n\t/**\n\t * Filter the table using both the global filter and column based filtering\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {object} oSearch search information\n\t *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFilterComplete ( oSettings, oInput, iForce )\n\t{\n\t\tvar oPrevSearch = oSettings.oPreviousSearch;\n\t\tvar aoPrevSearch = oSettings.aoPreSearchCols;\n\t\tvar fnSaveFilter = function ( oFilter ) {\n\t\t\t/* Save the filtering values */\n\t\t\toPrevSearch.sSearch = oFilter.sSearch;\n\t\t\toPrevSearch.bRegex = oFilter.bRegex;\n\t\t\toPrevSearch.bSmart = oFilter.bSmart;\n\t\t\toPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;\n\t\t};\n\t\tvar fnRegex = function ( o ) {\n\t\t\t// Backwards compatibility with the bEscapeRegex option\n\t\t\treturn o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;\n\t\t};\n\t\n\t\t// Resolve any column types that are unknown due to addition or invalidation\n\t\t// @todo As per sort - can this be moved into an event handler?\n\t\t_fnColumnTypes( oSettings );\n\t\n\t\t/* In server-side processing all filtering is done by the server, so no point hanging around here */\n\t\tif ( _fnDataSource( oSettings ) != 'ssp' )\n\t\t{\n\t\t\t/* Global filter */\n\t\t\t_fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );\n\t\t\tfnSaveFilter( oInput );\n\t\n\t\t\t/* Now do the individual column filter */\n\t\t\tfor ( var i=0 ; i<aoPrevSearch.length ; i++ )\n\t\t\t{\n\t\t\t\t_fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),\n\t\t\t\t\taoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );\n\t\t\t}\n\t\n\t\t\t/* Custom filtering */\n\t\t\t_fnFilterCustom( oSettings );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfnSaveFilter( oInput );\n\t\t}\n\t\n\t\t/* Tell the draw function we have been filtering */\n\t\toSettings.bFiltered = true;\n\t\t_fnCallbackFire( oSettings, null, 'search', [oSettings] );\n\t}\n\t\n\t\n\t/**\n\t * Apply custom filtering functions\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFilterCustom( settings )\n\t{\n\t\tvar filters = DataTable.ext.search;\n\t\tvar displayRows = settings.aiDisplay;\n\t\tvar row, rowIdx;\n\t\n\t\tfor ( var i=0, ien=filters.length ; i<ien ; i++ ) {\n\t\t\tvar rows = [];\n\t\n\t\t\t// Loop over each row and see if it should be included\n\t\t\tfor ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {\n\t\t\t\trowIdx = displayRows[ j ];\n\t\t\t\trow = settings.aoData[ rowIdx ];\n\t\n\t\t\t\tif ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {\n\t\t\t\t\trows.push( rowIdx );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// So the array reference doesn't break set the results into the\n\t\t\t// existing array\n\t\t\tdisplayRows.length = 0;\n\t\t\t$.merge( displayRows, rows );\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Filter the table on a per-column basis\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {string} sInput string to filter on\n\t *  @param {int} iColumn column to filter\n\t *  @param {bool} bRegex treat search string as a regular expression or not\n\t *  @param {bool} bSmart use smart filtering or not\n\t *  @param {bool} bCaseInsensitive Do case insenstive matching or not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )\n\t{\n\t\tif ( searchStr === '' ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\tvar data;\n\t\tvar out = [];\n\t\tvar display = settings.aiDisplay;\n\t\tvar rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );\n\t\n\t\tfor ( var i=0 ; i<display.length ; i++ ) {\n\t\t\tdata = settings.aoData[ display[i] ]._aFilterData[ colIdx ];\n\t\n\t\t\tif ( rpSearch.test( data ) ) {\n\t\t\t\tout.push( display[i] );\n\t\t\t}\n\t\t}\n\t\n\t\tsettings.aiDisplay = out;\n\t}\n\t\n\t\n\t/**\n\t * Filter the data table based on user input and draw the table\n\t *  @param {object} settings dataTables settings object\n\t *  @param {string} input string to filter on\n\t *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)\n\t *  @param {bool} regex treat as a regular expression or not\n\t *  @param {bool} smart perform smart filtering or not\n\t *  @param {bool} caseInsensitive Do case insenstive matching or not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFilter( settings, input, force, regex, smart, caseInsensitive )\n\t{\n\t\tvar rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );\n\t\tvar prevSearch = settings.oPreviousSearch.sSearch;\n\t\tvar displayMaster = settings.aiDisplayMaster;\n\t\tvar display, invalidated, i;\n\t\tvar filtered = [];\n\t\n\t\t// Need to take account of custom filtering functions - always filter\n\t\tif ( DataTable.ext.search.length !== 0 ) {\n\t\t\tforce = true;\n\t\t}\n\t\n\t\t// Check if any of the rows were invalidated\n\t\tinvalidated = _fnFilterData( settings );\n\t\n\t\t// If the input is blank - we just want the full data set\n\t\tif ( input.length <= 0 ) {\n\t\t\tsettings.aiDisplay = displayMaster.slice();\n\t\t}\n\t\telse {\n\t\t\t// New search - start from the master array\n\t\t\tif ( invalidated ||\n\t\t\t\t force ||\n\t\t\t\t prevSearch.length > input.length ||\n\t\t\t\t input.indexOf(prevSearch) !== 0 ||\n\t\t\t\t settings.bSorted // On resort, the display master needs to be\n\t\t\t\t                  // re-filtered since indexes will have changed\n\t\t\t) {\n\t\t\t\tsettings.aiDisplay = displayMaster.slice();\n\t\t\t}\n\t\n\t\t\t// Search the display array\n\t\t\tdisplay = settings.aiDisplay;\n\t\n\t\t\tfor ( i=0 ; i<display.length ; i++ ) {\n\t\t\t\tif ( rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {\n\t\t\t\t\tfiltered.push( display[i] );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tsettings.aiDisplay = filtered;\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Build a regular expression object suitable for searching a table\n\t *  @param {string} sSearch string to search for\n\t *  @param {bool} bRegex treat as a regular expression or not\n\t *  @param {bool} bSmart perform smart filtering or not\n\t *  @param {bool} bCaseInsensitive Do case insensitive matching or not\n\t *  @returns {RegExp} constructed object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFilterCreateSearch( search, regex, smart, caseInsensitive )\n\t{\n\t\tsearch = regex ?\n\t\t\tsearch :\n\t\t\t_fnEscapeRegex( search );\n\t\t\n\t\tif ( smart ) {\n\t\t\t/* For smart filtering we want to allow the search to work regardless of\n\t\t\t * word order. We also want double quoted text to be preserved, so word\n\t\t\t * order is important - a la google. So this is what we want to\n\t\t\t * generate:\n\t\t\t * \n\t\t\t * ^(?=.*?\\bone\\b)(?=.*?\\btwo three\\b)(?=.*?\\bfour\\b).*$\n\t\t\t */\n\t\t\tvar a = $.map( search.match( /\"[^\"]+\"|[^ ]+/g ) || [''], function ( word ) {\n\t\t\t\tif ( word.charAt(0) === '\"' ) {\n\t\t\t\t\tvar m = word.match( /^\"(.*)\"$/ );\n\t\t\t\t\tword = m ? m[1] : word;\n\t\t\t\t}\n\t\n\t\t\t\treturn word.replace('\"', '');\n\t\t\t} );\n\t\n\t\t\tsearch = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';\n\t\t}\n\t\n\t\treturn new RegExp( search, caseInsensitive ? 'i' : '' );\n\t}\n\t\n\t\n\t/**\n\t * Escape a string such that it can be used in a regular expression\n\t *  @param {string} sVal string to escape\n\t *  @returns {string} escaped string\n\t *  @memberof DataTable#oApi\n\t */\n\tvar _fnEscapeRegex = DataTable.util.escapeRegex;\n\t\n\tvar __filter_div = $('<div>')[0];\n\tvar __filter_div_textContent = __filter_div.textContent !== undefined;\n\t\n\t// Update the filtering data for each row if needed (by invalidation or first run)\n\tfunction _fnFilterData ( settings )\n\t{\n\t\tvar columns = settings.aoColumns;\n\t\tvar column;\n\t\tvar i, j, ien, jen, filterData, cellData, row;\n\t\tvar fomatters = DataTable.ext.type.search;\n\t\tvar wasInvalidated = false;\n\t\n\t\tfor ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\t\trow = settings.aoData[i];\n\t\n\t\t\tif ( ! row._aFilterData ) {\n\t\t\t\tfilterData = [];\n\t\n\t\t\t\tfor ( j=0, jen=columns.length ; j<jen ; j++ ) {\n\t\t\t\t\tcolumn = columns[j];\n\t\n\t\t\t\t\tif ( column.bSearchable ) {\n\t\t\t\t\t\tcellData = _fnGetCellData( settings, i, j, 'filter' );\n\t\n\t\t\t\t\t\tif ( fomatters[ column.sType ] ) {\n\t\t\t\t\t\t\tcellData = fomatters[ column.sType ]( cellData );\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// Search in DataTables 1.10 is string based. In 1.11 this\n\t\t\t\t\t\t// should be altered to also allow strict type checking.\n\t\t\t\t\t\tif ( cellData === null ) {\n\t\t\t\t\t\t\tcellData = '';\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( typeof cellData !== 'string' && cellData.toString ) {\n\t\t\t\t\t\t\tcellData = cellData.toString();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tcellData = '';\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// If it looks like there is an HTML entity in the string,\n\t\t\t\t\t// attempt to decode it so sorting works as expected. Note that\n\t\t\t\t\t// we could use a single line of jQuery to do this, but the DOM\n\t\t\t\t\t// method used here is much faster http://jsperf.com/html-decode\n\t\t\t\t\tif ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {\n\t\t\t\t\t\t__filter_div.innerHTML = cellData;\n\t\t\t\t\t\tcellData = __filter_div_textContent ?\n\t\t\t\t\t\t\t__filter_div.textContent :\n\t\t\t\t\t\t\t__filter_div.innerText;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( cellData.replace ) {\n\t\t\t\t\t\tcellData = cellData.replace(/[\\r\\n]/g, '');\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfilterData.push( cellData );\n\t\t\t\t}\n\t\n\t\t\t\trow._aFilterData = filterData;\n\t\t\t\trow._sFilterRow = filterData.join('  ');\n\t\t\t\twasInvalidated = true;\n\t\t\t}\n\t\t}\n\t\n\t\treturn wasInvalidated;\n\t}\n\t\n\t\n\t/**\n\t * Convert from the internal Hungarian notation to camelCase for external\n\t * interaction\n\t *  @param {object} obj Object to convert\n\t *  @returns {object} Inverted object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSearchToCamel ( obj )\n\t{\n\t\treturn {\n\t\t\tsearch:          obj.sSearch,\n\t\t\tsmart:           obj.bSmart,\n\t\t\tregex:           obj.bRegex,\n\t\t\tcaseInsensitive: obj.bCaseInsensitive\n\t\t};\n\t}\n\t\n\t\n\t\n\t/**\n\t * Convert from camelCase notation to the internal Hungarian. We could use the\n\t * Hungarian convert function here, but this is cleaner\n\t *  @param {object} obj Object to convert\n\t *  @returns {object} Inverted object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSearchToHung ( obj )\n\t{\n\t\treturn {\n\t\t\tsSearch:          obj.search,\n\t\t\tbSmart:           obj.smart,\n\t\t\tbRegex:           obj.regex,\n\t\t\tbCaseInsensitive: obj.caseInsensitive\n\t\t};\n\t}\n\t\n\t/**\n\t * Generate the node required for the info display\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns {node} Information element\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlInfo ( settings )\n\t{\n\t\tvar\n\t\t\ttid = settings.sTableId,\n\t\t\tnodes = settings.aanFeatures.i,\n\t\t\tn = $('<div/>', {\n\t\t\t\t'class': settings.oClasses.sInfo,\n\t\t\t\t'id': ! nodes ? tid+'_info' : null\n\t\t\t} );\n\t\n\t\tif ( ! nodes ) {\n\t\t\t// Update display on each draw\n\t\t\tsettings.aoDrawCallback.push( {\n\t\t\t\t\"fn\": _fnUpdateInfo,\n\t\t\t\t\"sName\": \"information\"\n\t\t\t} );\n\t\n\t\t\tn\n\t\t\t\t.attr( 'role', 'status' )\n\t\t\t\t.attr( 'aria-live', 'polite' );\n\t\n\t\t\t// Table is described by our info div\n\t\t\t$(settings.nTable).attr( 'aria-describedby', tid+'_info' );\n\t\t}\n\t\n\t\treturn n[0];\n\t}\n\t\n\t\n\t/**\n\t * Update the information elements in the display\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnUpdateInfo ( settings )\n\t{\n\t\t/* Show information about the table */\n\t\tvar nodes = settings.aanFeatures.i;\n\t\tif ( nodes.length === 0 ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\tvar\n\t\t\tlang  = settings.oLanguage,\n\t\t\tstart = settings._iDisplayStart+1,\n\t\t\tend   = settings.fnDisplayEnd(),\n\t\t\tmax   = settings.fnRecordsTotal(),\n\t\t\ttotal = settings.fnRecordsDisplay(),\n\t\t\tout   = total ?\n\t\t\t\tlang.sInfo :\n\t\t\t\tlang.sInfoEmpty;\n\t\n\t\tif ( total !== max ) {\n\t\t\t/* Record set after filtering */\n\t\t\tout += ' ' + lang.sInfoFiltered;\n\t\t}\n\t\n\t\t// Convert the macros\n\t\tout += lang.sInfoPostFix;\n\t\tout = _fnInfoMacros( settings, out );\n\t\n\t\tvar callback = lang.fnInfoCallback;\n\t\tif ( callback !== null ) {\n\t\t\tout = callback.call( settings.oInstance,\n\t\t\t\tsettings, start, end, max, total, out\n\t\t\t);\n\t\t}\n\t\n\t\t$(nodes).html( out );\n\t}\n\t\n\t\n\tfunction _fnInfoMacros ( settings, str )\n\t{\n\t\t// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only\n\t\t// internally\n\t\tvar\n\t\t\tformatter  = settings.fnFormatNumber,\n\t\t\tstart      = settings._iDisplayStart+1,\n\t\t\tlen        = settings._iDisplayLength,\n\t\t\tvis        = settings.fnRecordsDisplay(),\n\t\t\tall        = len === -1;\n\t\n\t\treturn str.\n\t\t\treplace(/_START_/g, formatter.call( settings, start ) ).\n\t\t\treplace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).\n\t\t\treplace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).\n\t\t\treplace(/_TOTAL_/g, formatter.call( settings, vis ) ).\n\t\t\treplace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).\n\t\t\treplace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );\n\t}\n\t\n\t\n\t\n\t/**\n\t * Draw the table for the first time, adding all required features\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnInitialise ( settings )\n\t{\n\t\tvar i, iLen, iAjaxStart=settings.iInitDisplayStart;\n\t\tvar columns = settings.aoColumns, column;\n\t\tvar features = settings.oFeatures;\n\t\tvar deferLoading = settings.bDeferLoading; // value modified by the draw\n\t\n\t\t/* Ensure that the table data is fully initialised */\n\t\tif ( ! settings.bInitialised ) {\n\t\t\tsetTimeout( function(){ _fnInitialise( settings ); }, 200 );\n\t\t\treturn;\n\t\t}\n\t\n\t\t/* Show the display HTML options */\n\t\t_fnAddOptionsHtml( settings );\n\t\n\t\t/* Build and draw the header / footer for the table */\n\t\t_fnBuildHead( settings );\n\t\t_fnDrawHead( settings, settings.aoHeader );\n\t\t_fnDrawHead( settings, settings.aoFooter );\n\t\n\t\t/* Okay to show that something is going on now */\n\t\t_fnProcessingDisplay( settings, true );\n\t\n\t\t/* Calculate sizes for columns */\n\t\tif ( features.bAutoWidth ) {\n\t\t\t_fnCalculateColumnWidths( settings );\n\t\t}\n\t\n\t\tfor ( i=0, iLen=columns.length ; i<iLen ; i++ ) {\n\t\t\tcolumn = columns[i];\n\t\n\t\t\tif ( column.sWidth ) {\n\t\t\t\tcolumn.nTh.style.width = _fnStringToCss( column.sWidth );\n\t\t\t}\n\t\t}\n\t\n\t\t_fnCallbackFire( settings, null, 'preInit', [settings] );\n\t\n\t\t// If there is default sorting required - let's do it. The sort function\n\t\t// will do the drawing for us. Otherwise we draw the table regardless of the\n\t\t// Ajax source - this allows the table to look initialised for Ajax sourcing\n\t\t// data (show 'loading' message possibly)\n\t\t_fnReDraw( settings );\n\t\n\t\t// Server-side processing init complete is done by _fnAjaxUpdateDraw\n\t\tvar dataSrc = _fnDataSource( settings );\n\t\tif ( dataSrc != 'ssp' || deferLoading ) {\n\t\t\t// if there is an ajax source load the data\n\t\t\tif ( dataSrc == 'ajax' ) {\n\t\t\t\t_fnBuildAjax( settings, [], function(json) {\n\t\t\t\t\tvar aData = _fnAjaxDataSrc( settings, json );\n\t\n\t\t\t\t\t// Got the data - add it to the table\n\t\t\t\t\tfor ( i=0 ; i<aData.length ; i++ ) {\n\t\t\t\t\t\t_fnAddData( settings, aData[i] );\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Reset the init display for cookie saving. We've already done\n\t\t\t\t\t// a filter, and therefore cleared it before. So we need to make\n\t\t\t\t\t// it appear 'fresh'\n\t\t\t\t\tsettings.iInitDisplayStart = iAjaxStart;\n\t\n\t\t\t\t\t_fnReDraw( settings );\n\t\n\t\t\t\t\t_fnProcessingDisplay( settings, false );\n\t\t\t\t\t_fnInitComplete( settings, json );\n\t\t\t\t}, settings );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t_fnProcessingDisplay( settings, false );\n\t\t\t\t_fnInitComplete( settings );\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Draw the table for the first time, adding all required features\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {object} [json] JSON from the server that completed the table, if using Ajax source\n\t *    with client-side processing (optional)\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnInitComplete ( settings, json )\n\t{\n\t\tsettings._bInitComplete = true;\n\t\n\t\t// When data was added after the initialisation (data or Ajax) we need to\n\t\t// calculate the column sizing\n\t\tif ( json || settings.oInit.aaData ) {\n\t\t\t_fnAdjustColumnSizing( settings );\n\t\t}\n\t\n\t\t_fnCallbackFire( settings, null, 'plugin-init', [settings, json] );\n\t\t_fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );\n\t}\n\t\n\t\n\tfunction _fnLengthChange ( settings, val )\n\t{\n\t\tvar len = parseInt( val, 10 );\n\t\tsettings._iDisplayLength = len;\n\t\n\t\t_fnLengthOverflow( settings );\n\t\n\t\t// Fire length change event\n\t\t_fnCallbackFire( settings, null, 'length', [settings, len] );\n\t}\n\t\n\t\n\t/**\n\t * Generate the node required for user display length changing\n\t *  @param {object} settings dataTables settings object\n\t *  @returns {node} Display length feature node\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlLength ( settings )\n\t{\n\t\tvar\n\t\t\tclasses  = settings.oClasses,\n\t\t\ttableId  = settings.sTableId,\n\t\t\tmenu     = settings.aLengthMenu,\n\t\t\td2       = $.isArray( menu[0] ),\n\t\t\tlengths  = d2 ? menu[0] : menu,\n\t\t\tlanguage = d2 ? menu[1] : menu;\n\t\n\t\tvar select = $('<select/>', {\n\t\t\t'name':          tableId+'_length',\n\t\t\t'aria-controls': tableId,\n\t\t\t'class':         classes.sLengthSelect\n\t\t} );\n\t\n\t\tfor ( var i=0, ien=lengths.length ; i<ien ; i++ ) {\n\t\t\tselect[0][ i ] = new Option(\n\t\t\t\ttypeof language[i] === 'number' ?\n\t\t\t\t\tsettings.fnFormatNumber( language[i] ) :\n\t\t\t\t\tlanguage[i],\n\t\t\t\tlengths[i]\n\t\t\t);\n\t\t}\n\t\n\t\tvar div = $('<div><label/></div>').addClass( classes.sLength );\n\t\tif ( ! settings.aanFeatures.l ) {\n\t\t\tdiv[0].id = tableId+'_length';\n\t\t}\n\t\n\t\tdiv.children().append(\n\t\t\tsettings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )\n\t\t);\n\t\n\t\t// Can't use `select` variable as user might provide their own and the\n\t\t// reference is broken by the use of outerHTML\n\t\t$('select', div)\n\t\t\t.val( settings._iDisplayLength )\n\t\t\t.on( 'change.DT', function(e) {\n\t\t\t\t_fnLengthChange( settings, $(this).val() );\n\t\t\t\t_fnDraw( settings );\n\t\t\t} );\n\t\n\t\t// Update node value whenever anything changes the table's length\n\t\t$(settings.nTable).on( 'length.dt.DT', function (e, s, len) {\n\t\t\tif ( settings === s ) {\n\t\t\t\t$('select', div).val( len );\n\t\t\t}\n\t\t} );\n\t\n\t\treturn div[0];\n\t}\n\t\n\t\n\t\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Note that most of the paging logic is done in\n\t * DataTable.ext.pager\n\t */\n\t\n\t/**\n\t * Generate the node required for default pagination\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns {node} Pagination feature node\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlPaginate ( settings )\n\t{\n\t\tvar\n\t\t\ttype   = settings.sPaginationType,\n\t\t\tplugin = DataTable.ext.pager[ type ],\n\t\t\tmodern = typeof plugin === 'function',\n\t\t\tredraw = function( settings ) {\n\t\t\t\t_fnDraw( settings );\n\t\t\t},\n\t\t\tnode = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],\n\t\t\tfeatures = settings.aanFeatures;\n\t\n\t\tif ( ! modern ) {\n\t\t\tplugin.fnInit( settings, node, redraw );\n\t\t}\n\t\n\t\t/* Add a draw callback for the pagination on first instance, to update the paging display */\n\t\tif ( ! features.p )\n\t\t{\n\t\t\tnode.id = settings.sTableId+'_paginate';\n\t\n\t\t\tsettings.aoDrawCallback.push( {\n\t\t\t\t\"fn\": function( settings ) {\n\t\t\t\t\tif ( modern ) {\n\t\t\t\t\t\tvar\n\t\t\t\t\t\t\tstart      = settings._iDisplayStart,\n\t\t\t\t\t\t\tlen        = settings._iDisplayLength,\n\t\t\t\t\t\t\tvisRecords = settings.fnRecordsDisplay(),\n\t\t\t\t\t\t\tall        = len === -1,\n\t\t\t\t\t\t\tpage = all ? 0 : Math.ceil( start / len ),\n\t\t\t\t\t\t\tpages = all ? 1 : Math.ceil( visRecords / len ),\n\t\t\t\t\t\t\tbuttons = plugin(page, pages),\n\t\t\t\t\t\t\ti, ien;\n\t\n\t\t\t\t\t\tfor ( i=0, ien=features.p.length ; i<ien ; i++ ) {\n\t\t\t\t\t\t\t_fnRenderer( settings, 'pageButton' )(\n\t\t\t\t\t\t\t\tsettings, features.p[i], i, buttons, page, pages\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tplugin.fnUpdate( settings, redraw );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"sName\": \"pagination\"\n\t\t\t} );\n\t\t}\n\t\n\t\treturn node;\n\t}\n\t\n\t\n\t/**\n\t * Alter the display settings to change the page\n\t *  @param {object} settings DataTables settings object\n\t *  @param {string|int} action Paging action to take: \"first\", \"previous\",\n\t *    \"next\" or \"last\" or page number to jump to (integer)\n\t *  @param [bool] redraw Automatically draw the update or not\n\t *  @returns {bool} true page has changed, false - no change\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnPageChange ( settings, action, redraw )\n\t{\n\t\tvar\n\t\t\tstart     = settings._iDisplayStart,\n\t\t\tlen       = settings._iDisplayLength,\n\t\t\trecords   = settings.fnRecordsDisplay();\n\t\n\t\tif ( records === 0 || len === -1 )\n\t\t{\n\t\t\tstart = 0;\n\t\t}\n\t\telse if ( typeof action === \"number\" )\n\t\t{\n\t\t\tstart = action * len;\n\t\n\t\t\tif ( start > records )\n\t\t\t{\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\telse if ( action == \"first\" )\n\t\t{\n\t\t\tstart = 0;\n\t\t}\n\t\telse if ( action == \"previous\" )\n\t\t{\n\t\t\tstart = len >= 0 ?\n\t\t\t\tstart - len :\n\t\t\t\t0;\n\t\n\t\t\tif ( start < 0 )\n\t\t\t{\n\t\t\t  start = 0;\n\t\t\t}\n\t\t}\n\t\telse if ( action == \"next\" )\n\t\t{\n\t\t\tif ( start + len < records )\n\t\t\t{\n\t\t\t\tstart += len;\n\t\t\t}\n\t\t}\n\t\telse if ( action == \"last\" )\n\t\t{\n\t\t\tstart = Math.floor( (records-1) / len) * len;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t_fnLog( settings, 0, \"Unknown paging action: \"+action, 5 );\n\t\t}\n\t\n\t\tvar changed = settings._iDisplayStart !== start;\n\t\tsettings._iDisplayStart = start;\n\t\n\t\tif ( changed ) {\n\t\t\t_fnCallbackFire( settings, null, 'page', [settings] );\n\t\n\t\t\tif ( redraw ) {\n\t\t\t\t_fnDraw( settings );\n\t\t\t}\n\t\t}\n\t\n\t\treturn changed;\n\t}\n\t\n\t\n\t\n\t/**\n\t * Generate the node required for the processing node\n\t *  @param {object} settings dataTables settings object\n\t *  @returns {node} Processing element\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlProcessing ( settings )\n\t{\n\t\treturn $('<div/>', {\n\t\t\t\t'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,\n\t\t\t\t'class': settings.oClasses.sProcessing\n\t\t\t} )\n\t\t\t.html( settings.oLanguage.sProcessing )\n\t\t\t.insertBefore( settings.nTable )[0];\n\t}\n\t\n\t\n\t/**\n\t * Display or hide the processing indicator\n\t *  @param {object} settings dataTables settings object\n\t *  @param {bool} show Show the processing indicator (true) or not (false)\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnProcessingDisplay ( settings, show )\n\t{\n\t\tif ( settings.oFeatures.bProcessing ) {\n\t\t\t$(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );\n\t\t}\n\t\n\t\t_fnCallbackFire( settings, null, 'processing', [settings, show] );\n\t}\n\t\n\t/**\n\t * Add any control elements for the table - specifically scrolling\n\t *  @param {object} settings dataTables settings object\n\t *  @returns {node} Node to add to the DOM\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlTable ( settings )\n\t{\n\t\tvar table = $(settings.nTable);\n\t\n\t\t// Add the ARIA grid role to the table\n\t\ttable.attr( 'role', 'grid' );\n\t\n\t\t// Scrolling from here on in\n\t\tvar scroll = settings.oScroll;\n\t\n\t\tif ( scroll.sX === '' && scroll.sY === '' ) {\n\t\t\treturn settings.nTable;\n\t\t}\n\t\n\t\tvar scrollX = scroll.sX;\n\t\tvar scrollY = scroll.sY;\n\t\tvar classes = settings.oClasses;\n\t\tvar caption = table.children('caption');\n\t\tvar captionSide = caption.length ? caption[0]._captionSide : null;\n\t\tvar headerClone = $( table[0].cloneNode(false) );\n\t\tvar footerClone = $( table[0].cloneNode(false) );\n\t\tvar footer = table.children('tfoot');\n\t\tvar _div = '<div/>';\n\t\tvar size = function ( s ) {\n\t\t\treturn !s ? null : _fnStringToCss( s );\n\t\t};\n\t\n\t\tif ( ! footer.length ) {\n\t\t\tfooter = null;\n\t\t}\n\t\n\t\t/*\n\t\t * The HTML structure that we want to generate in this function is:\n\t\t *  div - scroller\n\t\t *    div - scroll head\n\t\t *      div - scroll head inner\n\t\t *        table - scroll head table\n\t\t *          thead - thead\n\t\t *    div - scroll body\n\t\t *      table - table (master table)\n\t\t *        thead - thead clone for sizing\n\t\t *        tbody - tbody\n\t\t *    div - scroll foot\n\t\t *      div - scroll foot inner\n\t\t *        table - scroll foot table\n\t\t *          tfoot - tfoot\n\t\t */\n\t\tvar scroller = $( _div, { 'class': classes.sScrollWrapper } )\n\t\t\t.append(\n\t\t\t\t$(_div, { 'class': classes.sScrollHead } )\n\t\t\t\t\t.css( {\n\t\t\t\t\t\toverflow: 'hidden',\n\t\t\t\t\t\tposition: 'relative',\n\t\t\t\t\t\tborder: 0,\n\t\t\t\t\t\twidth: scrollX ? size(scrollX) : '100%'\n\t\t\t\t\t} )\n\t\t\t\t\t.append(\n\t\t\t\t\t\t$(_div, { 'class': classes.sScrollHeadInner } )\n\t\t\t\t\t\t\t.css( {\n\t\t\t\t\t\t\t\t'box-sizing': 'content-box',\n\t\t\t\t\t\t\t\twidth: scroll.sXInner || '100%'\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\t\theaderClone\n\t\t\t\t\t\t\t\t\t.removeAttr('id')\n\t\t\t\t\t\t\t\t\t.css( 'margin-left', 0 )\n\t\t\t\t\t\t\t\t\t.append( captionSide === 'top' ? caption : null )\n\t\t\t\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\t\t\t\ttable.children('thead')\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t)\n\t\t\t.append(\n\t\t\t\t$(_div, { 'class': classes.sScrollBody } )\n\t\t\t\t\t.css( {\n\t\t\t\t\t\tposition: 'relative',\n\t\t\t\t\t\toverflow: 'auto',\n\t\t\t\t\t\twidth: size( scrollX )\n\t\t\t\t\t} )\n\t\t\t\t\t.append( table )\n\t\t\t);\n\t\n\t\tif ( footer ) {\n\t\t\tscroller.append(\n\t\t\t\t$(_div, { 'class': classes.sScrollFoot } )\n\t\t\t\t\t.css( {\n\t\t\t\t\t\toverflow: 'hidden',\n\t\t\t\t\t\tborder: 0,\n\t\t\t\t\t\twidth: scrollX ? size(scrollX) : '100%'\n\t\t\t\t\t} )\n\t\t\t\t\t.append(\n\t\t\t\t\t\t$(_div, { 'class': classes.sScrollFootInner } )\n\t\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\t\tfooterClone\n\t\t\t\t\t\t\t\t\t.removeAttr('id')\n\t\t\t\t\t\t\t\t\t.css( 'margin-left', 0 )\n\t\t\t\t\t\t\t\t\t.append( captionSide === 'bottom' ? caption : null )\n\t\t\t\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\t\t\t\ttable.children('tfoot')\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t);\n\t\t}\n\t\n\t\tvar children = scroller.children();\n\t\tvar scrollHead = children[0];\n\t\tvar scrollBody = children[1];\n\t\tvar scrollFoot = footer ? children[2] : null;\n\t\n\t\t// When the body is scrolled, then we also want to scroll the headers\n\t\tif ( scrollX ) {\n\t\t\t$(scrollBody).on( 'scroll.DT', function (e) {\n\t\t\t\tvar scrollLeft = this.scrollLeft;\n\t\n\t\t\t\tscrollHead.scrollLeft = scrollLeft;\n\t\n\t\t\t\tif ( footer ) {\n\t\t\t\t\tscrollFoot.scrollLeft = scrollLeft;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t\n\t\t$(scrollBody).css(\n\t\t\tscrollY && scroll.bCollapse ? 'max-height' : 'height', \n\t\t\tscrollY\n\t\t);\n\t\n\t\tsettings.nScrollHead = scrollHead;\n\t\tsettings.nScrollBody = scrollBody;\n\t\tsettings.nScrollFoot = scrollFoot;\n\t\n\t\t// On redraw - align columns\n\t\tsettings.aoDrawCallback.push( {\n\t\t\t\"fn\": _fnScrollDraw,\n\t\t\t\"sName\": \"scrolling\"\n\t\t} );\n\t\n\t\treturn scroller[0];\n\t}\n\t\n\t\n\t\n\t/**\n\t * Update the header, footer and body tables for resizing - i.e. column\n\t * alignment.\n\t *\n\t * Welcome to the most horrible function DataTables. The process that this\n\t * function follows is basically:\n\t *   1. Re-create the table inside the scrolling div\n\t *   2. Take live measurements from the DOM\n\t *   3. Apply the measurements to align the columns\n\t *   4. Clean up\n\t *\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnScrollDraw ( settings )\n\t{\n\t\t// Given that this is such a monster function, a lot of variables are use\n\t\t// to try and keep the minimised size as small as possible\n\t\tvar\n\t\t\tscroll         = settings.oScroll,\n\t\t\tscrollX        = scroll.sX,\n\t\t\tscrollXInner   = scroll.sXInner,\n\t\t\tscrollY        = scroll.sY,\n\t\t\tbarWidth       = scroll.iBarWidth,\n\t\t\tdivHeader      = $(settings.nScrollHead),\n\t\t\tdivHeaderStyle = divHeader[0].style,\n\t\t\tdivHeaderInner = divHeader.children('div'),\n\t\t\tdivHeaderInnerStyle = divHeaderInner[0].style,\n\t\t\tdivHeaderTable = divHeaderInner.children('table'),\n\t\t\tdivBodyEl      = settings.nScrollBody,\n\t\t\tdivBody        = $(divBodyEl),\n\t\t\tdivBodyStyle   = divBodyEl.style,\n\t\t\tdivFooter      = $(settings.nScrollFoot),\n\t\t\tdivFooterInner = divFooter.children('div'),\n\t\t\tdivFooterTable = divFooterInner.children('table'),\n\t\t\theader         = $(settings.nTHead),\n\t\t\ttable          = $(settings.nTable),\n\t\t\ttableEl        = table[0],\n\t\t\ttableStyle     = tableEl.style,\n\t\t\tfooter         = settings.nTFoot ? $(settings.nTFoot) : null,\n\t\t\tbrowser        = settings.oBrowser,\n\t\t\tie67           = browser.bScrollOversize,\n\t\t\tdtHeaderCells  = _pluck( settings.aoColumns, 'nTh' ),\n\t\t\theaderTrgEls, footerTrgEls,\n\t\t\theaderSrcEls, footerSrcEls,\n\t\t\theaderCopy, footerCopy,\n\t\t\theaderWidths=[], footerWidths=[],\n\t\t\theaderContent=[], footerContent=[],\n\t\t\tidx, correction, sanityWidth,\n\t\t\tzeroOut = function(nSizer) {\n\t\t\t\tvar style = nSizer.style;\n\t\t\t\tstyle.paddingTop = \"0\";\n\t\t\t\tstyle.paddingBottom = \"0\";\n\t\t\t\tstyle.borderTopWidth = \"0\";\n\t\t\t\tstyle.borderBottomWidth = \"0\";\n\t\t\t\tstyle.height = 0;\n\t\t\t};\n\t\n\t\t// If the scrollbar visibility has changed from the last draw, we need to\n\t\t// adjust the column sizes as the table width will have changed to account\n\t\t// for the scrollbar\n\t\tvar scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;\n\t\t\n\t\tif ( settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined ) {\n\t\t\tsettings.scrollBarVis = scrollBarVis;\n\t\t\t_fnAdjustColumnSizing( settings );\n\t\t\treturn; // adjust column sizing will call this function again\n\t\t}\n\t\telse {\n\t\t\tsettings.scrollBarVis = scrollBarVis;\n\t\t}\n\t\n\t\t/*\n\t\t * 1. Re-create the table inside the scrolling div\n\t\t */\n\t\n\t\t// Remove the old minimised thead and tfoot elements in the inner table\n\t\ttable.children('thead, tfoot').remove();\n\t\n\t\tif ( footer ) {\n\t\t\tfooterCopy = footer.clone().prependTo( table );\n\t\t\tfooterTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized\n\t\t\tfooterSrcEls = footerCopy.find('tr');\n\t\t}\n\t\n\t\t// Clone the current header and footer elements and then place it into the inner table\n\t\theaderCopy = header.clone().prependTo( table );\n\t\theaderTrgEls = header.find('tr'); // original header is in its own table\n\t\theaderSrcEls = headerCopy.find('tr');\n\t\theaderCopy.find('th, td').removeAttr('tabindex');\n\t\n\t\n\t\t/*\n\t\t * 2. Take live measurements from the DOM - do not alter the DOM itself!\n\t\t */\n\t\n\t\t// Remove old sizing and apply the calculated column widths\n\t\t// Get the unique column headers in the newly created (cloned) header. We want to apply the\n\t\t// calculated sizes to this header\n\t\tif ( ! scrollX )\n\t\t{\n\t\t\tdivBodyStyle.width = '100%';\n\t\t\tdivHeader[0].style.width = '100%';\n\t\t}\n\t\n\t\t$.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {\n\t\t\tidx = _fnVisibleToColumnIndex( settings, i );\n\t\t\tel.style.width = settings.aoColumns[idx].sWidth;\n\t\t} );\n\t\n\t\tif ( footer ) {\n\t\t\t_fnApplyToChildren( function(n) {\n\t\t\t\tn.style.width = \"\";\n\t\t\t}, footerSrcEls );\n\t\t}\n\t\n\t\t// Size the table as a whole\n\t\tsanityWidth = table.outerWidth();\n\t\tif ( scrollX === \"\" ) {\n\t\t\t// No x scrolling\n\t\t\ttableStyle.width = \"100%\";\n\t\n\t\t\t// IE7 will make the width of the table when 100% include the scrollbar\n\t\t\t// - which is shouldn't. When there is a scrollbar we need to take this\n\t\t\t// into account.\n\t\t\tif ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||\n\t\t\t\tdivBody.css('overflow-y') == \"scroll\")\n\t\t\t) {\n\t\t\t\ttableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);\n\t\t\t}\n\t\n\t\t\t// Recalculate the sanity width\n\t\t\tsanityWidth = table.outerWidth();\n\t\t}\n\t\telse if ( scrollXInner !== \"\" ) {\n\t\t\t// legacy x scroll inner has been given - use it\n\t\t\ttableStyle.width = _fnStringToCss(scrollXInner);\n\t\n\t\t\t// Recalculate the sanity width\n\t\t\tsanityWidth = table.outerWidth();\n\t\t}\n\t\n\t\t// Hidden header should have zero height, so remove padding and borders. Then\n\t\t// set the width based on the real headers\n\t\n\t\t// Apply all styles in one pass\n\t\t_fnApplyToChildren( zeroOut, headerSrcEls );\n\t\n\t\t// Read all widths in next pass\n\t\t_fnApplyToChildren( function(nSizer) {\n\t\t\theaderContent.push( nSizer.innerHTML );\n\t\t\theaderWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\n\t\t}, headerSrcEls );\n\t\n\t\t// Apply all widths in final pass\n\t\t_fnApplyToChildren( function(nToSize, i) {\n\t\t\t// Only apply widths to the DataTables detected header cells - this\n\t\t\t// prevents complex headers from having contradictory sizes applied\n\t\t\tif ( $.inArray( nToSize, dtHeaderCells ) !== -1 ) {\n\t\t\t\tnToSize.style.width = headerWidths[i];\n\t\t\t}\n\t\t}, headerTrgEls );\n\t\n\t\t$(headerSrcEls).height(0);\n\t\n\t\t/* Same again with the footer if we have one */\n\t\tif ( footer )\n\t\t{\n\t\t\t_fnApplyToChildren( zeroOut, footerSrcEls );\n\t\n\t\t\t_fnApplyToChildren( function(nSizer) {\n\t\t\t\tfooterContent.push( nSizer.innerHTML );\n\t\t\t\tfooterWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\n\t\t\t}, footerSrcEls );\n\t\n\t\t\t_fnApplyToChildren( function(nToSize, i) {\n\t\t\t\tnToSize.style.width = footerWidths[i];\n\t\t\t}, footerTrgEls );\n\t\n\t\t\t$(footerSrcEls).height(0);\n\t\t}\n\t\n\t\n\t\t/*\n\t\t * 3. Apply the measurements\n\t\t */\n\t\n\t\t// \"Hide\" the header and footer that we used for the sizing. We need to keep\n\t\t// the content of the cell so that the width applied to the header and body\n\t\t// both match, but we want to hide it completely. We want to also fix their\n\t\t// width to what they currently are\n\t\t_fnApplyToChildren( function(nSizer, i) {\n\t\t\tnSizer.innerHTML = '<div class=\"dataTables_sizing\" style=\"height:0;overflow:hidden;\">'+headerContent[i]+'</div>';\n\t\t\tnSizer.style.width = headerWidths[i];\n\t\t}, headerSrcEls );\n\t\n\t\tif ( footer )\n\t\t{\n\t\t\t_fnApplyToChildren( function(nSizer, i) {\n\t\t\t\tnSizer.innerHTML = '<div class=\"dataTables_sizing\" style=\"height:0;overflow:hidden;\">'+footerContent[i]+'</div>';\n\t\t\t\tnSizer.style.width = footerWidths[i];\n\t\t\t}, footerSrcEls );\n\t\t}\n\t\n\t\t// Sanity check that the table is of a sensible width. If not then we are going to get\n\t\t// misalignment - try to prevent this by not allowing the table to shrink below its min width\n\t\tif ( table.outerWidth() < sanityWidth )\n\t\t{\n\t\t\t// The min width depends upon if we have a vertical scrollbar visible or not */\n\t\t\tcorrection = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||\n\t\t\t\tdivBody.css('overflow-y') == \"scroll\")) ?\n\t\t\t\t\tsanityWidth+barWidth :\n\t\t\t\t\tsanityWidth;\n\t\n\t\t\t// IE6/7 are a law unto themselves...\n\t\t\tif ( ie67 && (divBodyEl.scrollHeight >\n\t\t\t\tdivBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")\n\t\t\t) {\n\t\t\t\ttableStyle.width = _fnStringToCss( correction-barWidth );\n\t\t\t}\n\t\n\t\t\t// And give the user a warning that we've stopped the table getting too small\n\t\t\tif ( scrollX === \"\" || scrollXInner !== \"\" ) {\n\t\t\t\t_fnLog( settings, 1, 'Possible column misalignment', 6 );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcorrection = '100%';\n\t\t}\n\t\n\t\t// Apply to the container elements\n\t\tdivBodyStyle.width = _fnStringToCss( correction );\n\t\tdivHeaderStyle.width = _fnStringToCss( correction );\n\t\n\t\tif ( footer ) {\n\t\t\tsettings.nScrollFoot.style.width = _fnStringToCss( correction );\n\t\t}\n\t\n\t\n\t\t/*\n\t\t * 4. Clean up\n\t\t */\n\t\tif ( ! scrollY ) {\n\t\t\t/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting\n\t\t\t * the scrollbar height from the visible display, rather than adding it on. We need to\n\t\t\t * set the height in order to sort this. Don't want to do it in any other browsers.\n\t\t\t */\n\t\t\tif ( ie67 ) {\n\t\t\t\tdivBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );\n\t\t\t}\n\t\t}\n\t\n\t\t/* Finally set the width's of the header and footer tables */\n\t\tvar iOuterWidth = table.outerWidth();\n\t\tdivHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );\n\t\tdivHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );\n\t\n\t\t// Figure out if there are scrollbar present - if so then we need a the header and footer to\n\t\t// provide a bit more space to allow \"overflow\" scrolling (i.e. past the scrollbar)\n\t\tvar bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == \"scroll\";\n\t\tvar padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );\n\t\tdivHeaderInnerStyle[ padding ] = bScrolling ? barWidth+\"px\" : \"0px\";\n\t\n\t\tif ( footer ) {\n\t\t\tdivFooterTable[0].style.width = _fnStringToCss( iOuterWidth );\n\t\t\tdivFooterInner[0].style.width = _fnStringToCss( iOuterWidth );\n\t\t\tdivFooterInner[0].style[padding] = bScrolling ? barWidth+\"px\" : \"0px\";\n\t\t}\n\t\n\t\t// Correct DOM ordering for colgroup - comes before the thead\n\t\ttable.children('colgroup').insertBefore( table.children('thead') );\n\t\n\t\t/* Adjust the position of the header in case we loose the y-scrollbar */\n\t\tdivBody.scroll();\n\t\n\t\t// If sorting or filtering has occurred, jump the scrolling back to the top\n\t\t// only if we aren't holding the position\n\t\tif ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {\n\t\t\tdivBodyEl.scrollTop = 0;\n\t\t}\n\t}\n\t\n\t\n\t\n\t/**\n\t * Apply a given function to the display child nodes of an element array (typically\n\t * TD children of TR rows\n\t *  @param {function} fn Method to apply to the objects\n\t *  @param array {nodes} an1 List of elements to look through for display children\n\t *  @param array {nodes} an2 Another list (identical structure to the first) - optional\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnApplyToChildren( fn, an1, an2 )\n\t{\n\t\tvar index=0, i=0, iLen=an1.length;\n\t\tvar nNode1, nNode2;\n\t\n\t\twhile ( i < iLen ) {\n\t\t\tnNode1 = an1[i].firstChild;\n\t\t\tnNode2 = an2 ? an2[i].firstChild : null;\n\t\n\t\t\twhile ( nNode1 ) {\n\t\t\t\tif ( nNode1.nodeType === 1 ) {\n\t\t\t\t\tif ( an2 ) {\n\t\t\t\t\t\tfn( nNode1, nNode2, index );\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tfn( nNode1, index );\n\t\t\t\t\t}\n\t\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\n\t\t\t\tnNode1 = nNode1.nextSibling;\n\t\t\t\tnNode2 = an2 ? nNode2.nextSibling : null;\n\t\t\t}\n\t\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\t\n\t\n\tvar __re_html_remove = /<.*?>/g;\n\t\n\t\n\t/**\n\t * Calculate the width of columns for the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnCalculateColumnWidths ( oSettings )\n\t{\n\t\tvar\n\t\t\ttable = oSettings.nTable,\n\t\t\tcolumns = oSettings.aoColumns,\n\t\t\tscroll = oSettings.oScroll,\n\t\t\tscrollY = scroll.sY,\n\t\t\tscrollX = scroll.sX,\n\t\t\tscrollXInner = scroll.sXInner,\n\t\t\tcolumnCount = columns.length,\n\t\t\tvisibleColumns = _fnGetColumns( oSettings, 'bVisible' ),\n\t\t\theaderCells = $('th', oSettings.nTHead),\n\t\t\ttableWidthAttr = table.getAttribute('width'), // from DOM element\n\t\t\ttableContainer = table.parentNode,\n\t\t\tuserInputs = false,\n\t\t\ti, column, columnIdx, width, outerWidth,\n\t\t\tbrowser = oSettings.oBrowser,\n\t\t\tie67 = browser.bScrollOversize;\n\t\n\t\tvar styleWidth = table.style.width;\n\t\tif ( styleWidth && styleWidth.indexOf('%') !== -1 ) {\n\t\t\ttableWidthAttr = styleWidth;\n\t\t}\n\t\n\t\t/* Convert any user input sizes into pixel sizes */\n\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\n\t\t\tcolumn = columns[ visibleColumns[i] ];\n\t\n\t\t\tif ( column.sWidth !== null ) {\n\t\t\t\tcolumn.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );\n\t\n\t\t\t\tuserInputs = true;\n\t\t\t}\n\t\t}\n\t\n\t\t/* If the number of columns in the DOM equals the number that we have to\n\t\t * process in DataTables, then we can use the offsets that are created by\n\t\t * the web- browser. No custom sizes can be set in order for this to happen,\n\t\t * nor scrolling used\n\t\t */\n\t\tif ( ie67 || ! userInputs && ! scrollX && ! scrollY &&\n\t\t     columnCount == _fnVisbleColumns( oSettings ) &&\n\t\t     columnCount == headerCells.length\n\t\t) {\n\t\t\tfor ( i=0 ; i<columnCount ; i++ ) {\n\t\t\t\tvar colIdx = _fnVisibleToColumnIndex( oSettings, i );\n\t\n\t\t\t\tif ( colIdx !== null ) {\n\t\t\t\t\tcolumns[ colIdx ].sWidth = _fnStringToCss( headerCells.eq(i).width() );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Otherwise construct a single row, worst case, table with the widest\n\t\t\t// node in the data, assign any user defined widths, then insert it into\n\t\t\t// the DOM and allow the browser to do all the hard work of calculating\n\t\t\t// table widths\n\t\t\tvar tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table\n\t\t\t\t.css( 'visibility', 'hidden' )\n\t\t\t\t.removeAttr( 'id' );\n\t\n\t\t\t// Clean up the table body\n\t\t\ttmpTable.find('tbody tr').remove();\n\t\t\tvar tr = $('<tr/>').appendTo( tmpTable.find('tbody') );\n\t\n\t\t\t// Clone the table header and footer - we can't use the header / footer\n\t\t\t// from the cloned table, since if scrolling is active, the table's\n\t\t\t// real header and footer are contained in different table tags\n\t\t\ttmpTable.find('thead, tfoot').remove();\n\t\t\ttmpTable\n\t\t\t\t.append( $(oSettings.nTHead).clone() )\n\t\t\t\t.append( $(oSettings.nTFoot).clone() );\n\t\n\t\t\t// Remove any assigned widths from the footer (from scrolling)\n\t\t\ttmpTable.find('tfoot th, tfoot td').css('width', '');\n\t\n\t\t\t// Apply custom sizing to the cloned header\n\t\t\theaderCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );\n\t\n\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\n\t\t\t\tcolumn = columns[ visibleColumns[i] ];\n\t\n\t\t\t\theaderCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?\n\t\t\t\t\t_fnStringToCss( column.sWidthOrig ) :\n\t\t\t\t\t'';\n\t\n\t\t\t\t// For scrollX we need to force the column width otherwise the\n\t\t\t\t// browser will collapse it. If this width is smaller than the\n\t\t\t\t// width the column requires, then it will have no effect\n\t\t\t\tif ( column.sWidthOrig && scrollX ) {\n\t\t\t\t\t$( headerCells[i] ).append( $('<div/>').css( {\n\t\t\t\t\t\twidth: column.sWidthOrig,\n\t\t\t\t\t\tmargin: 0,\n\t\t\t\t\t\tpadding: 0,\n\t\t\t\t\t\tborder: 0,\n\t\t\t\t\t\theight: 1\n\t\t\t\t\t} ) );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// Find the widest cell for each column and put it into the table\n\t\t\tif ( oSettings.aoData.length ) {\n\t\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\n\t\t\t\t\tcolumnIdx = visibleColumns[i];\n\t\t\t\t\tcolumn = columns[ columnIdx ];\n\t\n\t\t\t\t\t$( _fnGetWidestNode( oSettings, columnIdx ) )\n\t\t\t\t\t\t.clone( false )\n\t\t\t\t\t\t.append( column.sContentPadding )\n\t\t\t\t\t\t.appendTo( tr );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// Tidy the temporary table - remove name attributes so there aren't\n\t\t\t// duplicated in the dom (radio elements for example)\n\t\t\t$('[name]', tmpTable).removeAttr('name');\n\t\n\t\t\t// Table has been built, attach to the document so we can work with it.\n\t\t\t// A holding element is used, positioned at the top of the container\n\t\t\t// with minimal height, so it has no effect on if the container scrolls\n\t\t\t// or not. Otherwise it might trigger scrolling when it actually isn't\n\t\t\t// needed\n\t\t\tvar holder = $('<div/>').css( scrollX || scrollY ?\n\t\t\t\t\t{\n\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\theight: 1,\n\t\t\t\t\t\tright: 0,\n\t\t\t\t\t\toverflow: 'hidden'\n\t\t\t\t\t} :\n\t\t\t\t\t{}\n\t\t\t\t)\n\t\t\t\t.append( tmpTable )\n\t\t\t\t.appendTo( tableContainer );\n\t\n\t\t\t// When scrolling (X or Y) we want to set the width of the table as \n\t\t\t// appropriate. However, when not scrolling leave the table width as it\n\t\t\t// is. This results in slightly different, but I think correct behaviour\n\t\t\tif ( scrollX && scrollXInner ) {\n\t\t\t\ttmpTable.width( scrollXInner );\n\t\t\t}\n\t\t\telse if ( scrollX ) {\n\t\t\t\ttmpTable.css( 'width', 'auto' );\n\t\t\t\ttmpTable.removeAttr('width');\n\t\n\t\t\t\t// If there is no width attribute or style, then allow the table to\n\t\t\t\t// collapse\n\t\t\t\tif ( tmpTable.width() < tableContainer.clientWidth && tableWidthAttr ) {\n\t\t\t\t\ttmpTable.width( tableContainer.clientWidth );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( scrollY ) {\n\t\t\t\ttmpTable.width( tableContainer.clientWidth );\n\t\t\t}\n\t\t\telse if ( tableWidthAttr ) {\n\t\t\t\ttmpTable.width( tableWidthAttr );\n\t\t\t}\n\t\n\t\t\t// Get the width of each column in the constructed table - we need to\n\t\t\t// know the inner width (so it can be assigned to the other table's\n\t\t\t// cells) and the outer width so we can calculate the full width of the\n\t\t\t// table. This is safe since DataTables requires a unique cell for each\n\t\t\t// column, but if ever a header can span multiple columns, this will\n\t\t\t// need to be modified.\n\t\t\tvar total = 0;\n\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\n\t\t\t\tvar cell = $(headerCells[i]);\n\t\t\t\tvar border = cell.outerWidth() - cell.width();\n\t\n\t\t\t\t// Use getBounding... where possible (not IE8-) because it can give\n\t\t\t\t// sub-pixel accuracy, which we then want to round up!\n\t\t\t\tvar bounding = browser.bBounding ?\n\t\t\t\t\tMath.ceil( headerCells[i].getBoundingClientRect().width ) :\n\t\t\t\t\tcell.outerWidth();\n\t\n\t\t\t\t// Total is tracked to remove any sub-pixel errors as the outerWidth\n\t\t\t\t// of the table might not equal the total given here (IE!).\n\t\t\t\ttotal += bounding;\n\t\n\t\t\t\t// Width for each column to use\n\t\t\t\tcolumns[ visibleColumns[i] ].sWidth = _fnStringToCss( bounding - border );\n\t\t\t}\n\t\n\t\t\ttable.style.width = _fnStringToCss( total );\n\t\n\t\t\t// Finished with the table - ditch it\n\t\t\tholder.remove();\n\t\t}\n\t\n\t\t// If there is a width attr, we want to attach an event listener which\n\t\t// allows the table sizing to automatically adjust when the window is\n\t\t// resized. Use the width attr rather than CSS, since we can't know if the\n\t\t// CSS is a relative value or absolute - DOM read is always px.\n\t\tif ( tableWidthAttr ) {\n\t\t\ttable.style.width = _fnStringToCss( tableWidthAttr );\n\t\t}\n\t\n\t\tif ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {\n\t\t\tvar bindResize = function () {\n\t\t\t\t$(window).on('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {\n\t\t\t\t\t_fnAdjustColumnSizing( oSettings );\n\t\t\t\t} ) );\n\t\t\t};\n\t\n\t\t\t// IE6/7 will crash if we bind a resize event handler on page load.\n\t\t\t// To be removed in 1.11 which drops IE6/7 support\n\t\t\tif ( ie67 ) {\n\t\t\t\tsetTimeout( bindResize, 1000 );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbindResize();\n\t\t\t}\n\t\n\t\t\toSettings._reszEvt = true;\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Throttle the calls to a function. Arguments and context are maintained for\n\t * the throttled function\n\t *  @param {function} fn Function to be called\n\t *  @param {int} [freq=200] call frequency in mS\n\t *  @returns {function} wrapped function\n\t *  @memberof DataTable#oApi\n\t */\n\tvar _fnThrottle = DataTable.util.throttle;\n\t\n\t\n\t/**\n\t * Convert a CSS unit width to pixels (e.g. 2em)\n\t *  @param {string} width width to be converted\n\t *  @param {node} parent parent to get the with for (required for relative widths) - optional\n\t *  @returns {int} width in pixels\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnConvertToWidth ( width, parent )\n\t{\n\t\tif ( ! width ) {\n\t\t\treturn 0;\n\t\t}\n\t\n\t\tvar n = $('<div/>')\n\t\t\t.css( 'width', _fnStringToCss( width ) )\n\t\t\t.appendTo( parent || document.body );\n\t\n\t\tvar val = n[0].offsetWidth;\n\t\tn.remove();\n\t\n\t\treturn val;\n\t}\n\t\n\t\n\t/**\n\t * Get the widest node\n\t *  @param {object} settings dataTables settings object\n\t *  @param {int} colIdx column of interest\n\t *  @returns {node} widest table node\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetWidestNode( settings, colIdx )\n\t{\n\t\tvar idx = _fnGetMaxLenString( settings, colIdx );\n\t\tif ( idx < 0 ) {\n\t\t\treturn null;\n\t\t}\n\t\n\t\tvar data = settings.aoData[ idx ];\n\t\treturn ! data.nTr ? // Might not have been created when deferred rendering\n\t\t\t$('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :\n\t\t\tdata.anCells[ colIdx ];\n\t}\n\t\n\t\n\t/**\n\t * Get the maximum strlen for each data column\n\t *  @param {object} settings dataTables settings object\n\t *  @param {int} colIdx column of interest\n\t *  @returns {string} max string length for each column\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetMaxLenString( settings, colIdx )\n\t{\n\t\tvar s, max=-1, maxIdx = -1;\n\t\n\t\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\t\ts = _fnGetCellData( settings, i, colIdx, 'display' )+'';\n\t\t\ts = s.replace( __re_html_remove, '' );\n\t\t\ts = s.replace( /&nbsp;/g, ' ' );\n\t\n\t\t\tif ( s.length > max ) {\n\t\t\t\tmax = s.length;\n\t\t\t\tmaxIdx = i;\n\t\t\t}\n\t\t}\n\t\n\t\treturn maxIdx;\n\t}\n\t\n\t\n\t/**\n\t * Append a CSS unit (only if required) to a string\n\t *  @param {string} value to css-ify\n\t *  @returns {string} value with css unit\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnStringToCss( s )\n\t{\n\t\tif ( s === null ) {\n\t\t\treturn '0px';\n\t\t}\n\t\n\t\tif ( typeof s == 'number' ) {\n\t\t\treturn s < 0 ?\n\t\t\t\t'0px' :\n\t\t\t\ts+'px';\n\t\t}\n\t\n\t\t// Check it has a unit character already\n\t\treturn s.match(/\\d$/) ?\n\t\t\ts+'px' :\n\t\t\ts;\n\t}\n\t\n\t\n\t\n\tfunction _fnSortFlatten ( settings )\n\t{\n\t\tvar\n\t\t\ti, iLen, k, kLen,\n\t\t\taSort = [],\n\t\t\taiOrig = [],\n\t\t\taoColumns = settings.aoColumns,\n\t\t\taDataSort, iCol, sType, srcCol,\n\t\t\tfixed = settings.aaSortingFixed,\n\t\t\tfixedObj = $.isPlainObject( fixed ),\n\t\t\tnestedSort = [],\n\t\t\tadd = function ( a ) {\n\t\t\t\tif ( a.length && ! $.isArray( a[0] ) ) {\n\t\t\t\t\t// 1D array\n\t\t\t\t\tnestedSort.push( a );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// 2D array\n\t\t\t\t\t$.merge( nestedSort, a );\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t// Build the sort array, with pre-fix and post-fix options if they have been\n\t\t// specified\n\t\tif ( $.isArray( fixed ) ) {\n\t\t\tadd( fixed );\n\t\t}\n\t\n\t\tif ( fixedObj && fixed.pre ) {\n\t\t\tadd( fixed.pre );\n\t\t}\n\t\n\t\tadd( settings.aaSorting );\n\t\n\t\tif (fixedObj && fixed.post ) {\n\t\t\tadd( fixed.post );\n\t\t}\n\t\n\t\tfor ( i=0 ; i<nestedSort.length ; i++ )\n\t\t{\n\t\t\tsrcCol = nestedSort[i][0];\n\t\t\taDataSort = aoColumns[ srcCol ].aDataSort;\n\t\n\t\t\tfor ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )\n\t\t\t{\n\t\t\t\tiCol = aDataSort[k];\n\t\t\t\tsType = aoColumns[ iCol ].sType || 'string';\n\t\n\t\t\t\tif ( nestedSort[i]._idx === undefined ) {\n\t\t\t\t\tnestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );\n\t\t\t\t}\n\t\n\t\t\t\taSort.push( {\n\t\t\t\t\tsrc:       srcCol,\n\t\t\t\t\tcol:       iCol,\n\t\t\t\t\tdir:       nestedSort[i][1],\n\t\t\t\t\tindex:     nestedSort[i]._idx,\n\t\t\t\t\ttype:      sType,\n\t\t\t\t\tformatter: DataTable.ext.type.order[ sType+\"-pre\" ]\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t\n\t\treturn aSort;\n\t}\n\t\n\t/**\n\t * Change the order of the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t *  @todo This really needs split up!\n\t */\n\tfunction _fnSort ( oSettings )\n\t{\n\t\tvar\n\t\t\ti, ien, iLen, j, jLen, k, kLen,\n\t\t\tsDataType, nTh,\n\t\t\taiOrig = [],\n\t\t\toExtSort = DataTable.ext.type.order,\n\t\t\taoData = oSettings.aoData,\n\t\t\taoColumns = oSettings.aoColumns,\n\t\t\taDataSort, data, iCol, sType, oSort,\n\t\t\tformatters = 0,\n\t\t\tsortCol,\n\t\t\tdisplayMaster = oSettings.aiDisplayMaster,\n\t\t\taSort;\n\t\n\t\t// Resolve any column types that are unknown due to addition or invalidation\n\t\t// @todo Can this be moved into a 'data-ready' handler which is called when\n\t\t//   data is going to be used in the table?\n\t\t_fnColumnTypes( oSettings );\n\t\n\t\taSort = _fnSortFlatten( oSettings );\n\t\n\t\tfor ( i=0, ien=aSort.length ; i<ien ; i++ ) {\n\t\t\tsortCol = aSort[i];\n\t\n\t\t\t// Track if we can use the fast sort algorithm\n\t\t\tif ( sortCol.formatter ) {\n\t\t\t\tformatters++;\n\t\t\t}\n\t\n\t\t\t// Load the data needed for the sort, for each cell\n\t\t\t_fnSortData( oSettings, sortCol.col );\n\t\t}\n\t\n\t\t/* No sorting required if server-side or no sorting array */\n\t\tif ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )\n\t\t{\n\t\t\t// Create a value - key array of the current row positions such that we can use their\n\t\t\t// current position during the sort, if values match, in order to perform stable sorting\n\t\t\tfor ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {\n\t\t\t\taiOrig[ displayMaster[i] ] = i;\n\t\t\t}\n\t\n\t\t\t/* Do the sort - here we want multi-column sorting based on a given data source (column)\n\t\t\t * and sorting function (from oSort) in a certain direction. It's reasonably complex to\n\t\t\t * follow on it's own, but this is what we want (example two column sorting):\n\t\t\t *  fnLocalSorting = function(a,b){\n\t\t\t *    var iTest;\n\t\t\t *    iTest = oSort['string-asc']('data11', 'data12');\n\t\t\t *      if (iTest !== 0)\n\t\t\t *        return iTest;\n\t\t\t *    iTest = oSort['numeric-desc']('data21', 'data22');\n\t\t\t *    if (iTest !== 0)\n\t\t\t *      return iTest;\n\t\t\t *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );\n\t\t\t *  }\n\t\t\t * Basically we have a test for each sorting column, if the data in that column is equal,\n\t\t\t * test the next column. If all columns match, then we use a numeric sort on the row\n\t\t\t * positions in the original data array to provide a stable sort.\n\t\t\t *\n\t\t\t * Note - I know it seems excessive to have two sorting methods, but the first is around\n\t\t\t * 15% faster, so the second is only maintained for backwards compatibility with sorting\n\t\t\t * methods which do not have a pre-sort formatting function.\n\t\t\t */\n\t\t\tif ( formatters === aSort.length ) {\n\t\t\t\t// All sort types have formatting functions\n\t\t\t\tdisplayMaster.sort( function ( a, b ) {\n\t\t\t\t\tvar\n\t\t\t\t\t\tx, y, k, test, sort,\n\t\t\t\t\t\tlen=aSort.length,\n\t\t\t\t\t\tdataA = aoData[a]._aSortData,\n\t\t\t\t\t\tdataB = aoData[b]._aSortData;\n\t\n\t\t\t\t\tfor ( k=0 ; k<len ; k++ ) {\n\t\t\t\t\t\tsort = aSort[k];\n\t\n\t\t\t\t\t\tx = dataA[ sort.col ];\n\t\t\t\t\t\ty = dataB[ sort.col ];\n\t\n\t\t\t\t\t\ttest = x<y ? -1 : x>y ? 1 : 0;\n\t\t\t\t\t\tif ( test !== 0 ) {\n\t\t\t\t\t\t\treturn sort.dir === 'asc' ? test : -test;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\tx = aiOrig[a];\n\t\t\t\t\ty = aiOrig[b];\n\t\t\t\t\treturn x<y ? -1 : x>y ? 1 : 0;\n\t\t\t\t} );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Depreciated - remove in 1.11 (providing a plug-in option)\n\t\t\t\t// Not all sort types have formatting methods, so we have to call their sorting\n\t\t\t\t// methods.\n\t\t\t\tdisplayMaster.sort( function ( a, b ) {\n\t\t\t\t\tvar\n\t\t\t\t\t\tx, y, k, l, test, sort, fn,\n\t\t\t\t\t\tlen=aSort.length,\n\t\t\t\t\t\tdataA = aoData[a]._aSortData,\n\t\t\t\t\t\tdataB = aoData[b]._aSortData;\n\t\n\t\t\t\t\tfor ( k=0 ; k<len ; k++ ) {\n\t\t\t\t\t\tsort = aSort[k];\n\t\n\t\t\t\t\t\tx = dataA[ sort.col ];\n\t\t\t\t\t\ty = dataB[ sort.col ];\n\t\n\t\t\t\t\t\tfn = oExtSort[ sort.type+\"-\"+sort.dir ] || oExtSort[ \"string-\"+sort.dir ];\n\t\t\t\t\t\ttest = fn( x, y );\n\t\t\t\t\t\tif ( test !== 0 ) {\n\t\t\t\t\t\t\treturn test;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\tx = aiOrig[a];\n\t\t\t\t\ty = aiOrig[b];\n\t\t\t\t\treturn x<y ? -1 : x>y ? 1 : 0;\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t\n\t\t/* Tell the draw function that we have sorted the data */\n\t\toSettings.bSorted = true;\n\t}\n\t\n\t\n\tfunction _fnSortAria ( settings )\n\t{\n\t\tvar label;\n\t\tvar nextSort;\n\t\tvar columns = settings.aoColumns;\n\t\tvar aSort = _fnSortFlatten( settings );\n\t\tvar oAria = settings.oLanguage.oAria;\n\t\n\t\t// ARIA attributes - need to loop all columns, to update all (removing old\n\t\t// attributes as needed)\n\t\tfor ( var i=0, iLen=columns.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tvar col = columns[i];\n\t\t\tvar asSorting = col.asSorting;\n\t\t\tvar sTitle = col.sTitle.replace( /<.*?>/g, \"\" );\n\t\t\tvar th = col.nTh;\n\t\n\t\t\t// IE7 is throwing an error when setting these properties with jQuery's\n\t\t\t// attr() and removeAttr() methods...\n\t\t\tth.removeAttribute('aria-sort');\n\t\n\t\t\t/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */\n\t\t\tif ( col.bSortable ) {\n\t\t\t\tif ( aSort.length > 0 && aSort[0].col == i ) {\n\t\t\t\t\tth.setAttribute('aria-sort', aSort[0].dir==\"asc\" ? \"ascending\" : \"descending\" );\n\t\t\t\t\tnextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tnextSort = asSorting[0];\n\t\t\t\t}\n\t\n\t\t\t\tlabel = sTitle + ( nextSort === \"asc\" ?\n\t\t\t\t\toAria.sSortAscending :\n\t\t\t\t\toAria.sSortDescending\n\t\t\t\t);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlabel = sTitle;\n\t\t\t}\n\t\n\t\t\tth.setAttribute('aria-label', label);\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Function to run on user sort request\n\t *  @param {object} settings dataTables settings object\n\t *  @param {node} attachTo node to attach the handler to\n\t *  @param {int} colIdx column sorting index\n\t *  @param {boolean} [append=false] Append the requested sort to the existing\n\t *    sort if true (i.e. multi-column sort)\n\t *  @param {function} [callback] callback function\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSortListener ( settings, colIdx, append, callback )\n\t{\n\t\tvar col = settings.aoColumns[ colIdx ];\n\t\tvar sorting = settings.aaSorting;\n\t\tvar asSorting = col.asSorting;\n\t\tvar nextSortIdx;\n\t\tvar next = function ( a, overflow ) {\n\t\t\tvar idx = a._idx;\n\t\t\tif ( idx === undefined ) {\n\t\t\t\tidx = $.inArray( a[1], asSorting );\n\t\t\t}\n\t\n\t\t\treturn idx+1 < asSorting.length ?\n\t\t\t\tidx+1 :\n\t\t\t\toverflow ?\n\t\t\t\t\tnull :\n\t\t\t\t\t0;\n\t\t};\n\t\n\t\t// Convert to 2D array if needed\n\t\tif ( typeof sorting[0] === 'number' ) {\n\t\t\tsorting = settings.aaSorting = [ sorting ];\n\t\t}\n\t\n\t\t// If appending the sort then we are multi-column sorting\n\t\tif ( append && settings.oFeatures.bSortMulti ) {\n\t\t\t// Are we already doing some kind of sort on this column?\n\t\t\tvar sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );\n\t\n\t\t\tif ( sortIdx !== -1 ) {\n\t\t\t\t// Yes, modify the sort\n\t\t\t\tnextSortIdx = next( sorting[sortIdx], true );\n\t\n\t\t\t\tif ( nextSortIdx === null && sorting.length === 1 ) {\n\t\t\t\t\tnextSortIdx = 0; // can't remove sorting completely\n\t\t\t\t}\n\t\n\t\t\t\tif ( nextSortIdx === null ) {\n\t\t\t\t\tsorting.splice( sortIdx, 1 );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsorting[sortIdx][1] = asSorting[ nextSortIdx ];\n\t\t\t\t\tsorting[sortIdx]._idx = nextSortIdx;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// No sort on this column yet\n\t\t\t\tsorting.push( [ colIdx, asSorting[0], 0 ] );\n\t\t\t\tsorting[sorting.length-1]._idx = 0;\n\t\t\t}\n\t\t}\n\t\telse if ( sorting.length && sorting[0][0] == colIdx ) {\n\t\t\t// Single column - already sorting on this column, modify the sort\n\t\t\tnextSortIdx = next( sorting[0] );\n\t\n\t\t\tsorting.length = 1;\n\t\t\tsorting[0][1] = asSorting[ nextSortIdx ];\n\t\t\tsorting[0]._idx = nextSortIdx;\n\t\t}\n\t\telse {\n\t\t\t// Single column - sort only on this column\n\t\t\tsorting.length = 0;\n\t\t\tsorting.push( [ colIdx, asSorting[0] ] );\n\t\t\tsorting[0]._idx = 0;\n\t\t}\n\t\n\t\t// Run the sort by calling a full redraw\n\t\t_fnReDraw( settings );\n\t\n\t\t// callback used for async user interaction\n\t\tif ( typeof callback == 'function' ) {\n\t\t\tcallback( settings );\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Attach a sort handler (click) to a node\n\t *  @param {object} settings dataTables settings object\n\t *  @param {node} attachTo node to attach the handler to\n\t *  @param {int} colIdx column sorting index\n\t *  @param {function} [callback] callback function\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSortAttachListener ( settings, attachTo, colIdx, callback )\n\t{\n\t\tvar col = settings.aoColumns[ colIdx ];\n\t\n\t\t_fnBindAction( attachTo, {}, function (e) {\n\t\t\t/* If the column is not sortable - don't to anything */\n\t\t\tif ( col.bSortable === false ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// If processing is enabled use a timeout to allow the processing\n\t\t\t// display to be shown - otherwise to it synchronously\n\t\t\tif ( settings.oFeatures.bProcessing ) {\n\t\t\t\t_fnProcessingDisplay( settings, true );\n\t\n\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t_fnSortListener( settings, colIdx, e.shiftKey, callback );\n\t\n\t\t\t\t\t// In server-side processing, the draw callback will remove the\n\t\t\t\t\t// processing display\n\t\t\t\t\tif ( _fnDataSource( settings ) !== 'ssp' ) {\n\t\t\t\t\t\t_fnProcessingDisplay( settings, false );\n\t\t\t\t\t}\n\t\t\t\t}, 0 );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t_fnSortListener( settings, colIdx, e.shiftKey, callback );\n\t\t\t}\n\t\t} );\n\t}\n\t\n\t\n\t/**\n\t * Set the sorting classes on table's body, Note: it is safe to call this function\n\t * when bSort and bSortClasses are false\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSortingClasses( settings )\n\t{\n\t\tvar oldSort = settings.aLastSort;\n\t\tvar sortClass = settings.oClasses.sSortColumn;\n\t\tvar sort = _fnSortFlatten( settings );\n\t\tvar features = settings.oFeatures;\n\t\tvar i, ien, colIdx;\n\t\n\t\tif ( features.bSort && features.bSortClasses ) {\n\t\t\t// Remove old sorting classes\n\t\t\tfor ( i=0, ien=oldSort.length ; i<ien ; i++ ) {\n\t\t\t\tcolIdx = oldSort[i].src;\n\t\n\t\t\t\t// Remove column sorting\n\t\t\t\t$( _pluck( settings.aoData, 'anCells', colIdx ) )\n\t\t\t\t\t.removeClass( sortClass + (i<2 ? i+1 : 3) );\n\t\t\t}\n\t\n\t\t\t// Add new column sorting\n\t\t\tfor ( i=0, ien=sort.length ; i<ien ; i++ ) {\n\t\t\t\tcolIdx = sort[i].src;\n\t\n\t\t\t\t$( _pluck( settings.aoData, 'anCells', colIdx ) )\n\t\t\t\t\t.addClass( sortClass + (i<2 ? i+1 : 3) );\n\t\t\t}\n\t\t}\n\t\n\t\tsettings.aLastSort = sort;\n\t}\n\t\n\t\n\t// Get the data to sort a column, be it from cache, fresh (populating the\n\t// cache), or from a sort formatter\n\tfunction _fnSortData( settings, idx )\n\t{\n\t\t// Custom sorting function - provided by the sort data type\n\t\tvar column = settings.aoColumns[ idx ];\n\t\tvar customSort = DataTable.ext.order[ column.sSortDataType ];\n\t\tvar customData;\n\t\n\t\tif ( customSort ) {\n\t\t\tcustomData = customSort.call( settings.oInstance, settings, idx,\n\t\t\t\t_fnColumnIndexToVisible( settings, idx )\n\t\t\t);\n\t\t}\n\t\n\t\t// Use / populate cache\n\t\tvar row, cellData;\n\t\tvar formatter = DataTable.ext.type.order[ column.sType+\"-pre\" ];\n\t\n\t\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\t\trow = settings.aoData[i];\n\t\n\t\t\tif ( ! row._aSortData ) {\n\t\t\t\trow._aSortData = [];\n\t\t\t}\n\t\n\t\t\tif ( ! row._aSortData[idx] || customSort ) {\n\t\t\t\tcellData = customSort ?\n\t\t\t\t\tcustomData[i] : // If there was a custom sort function, use data from there\n\t\t\t\t\t_fnGetCellData( settings, i, idx, 'sort' );\n\t\n\t\t\t\trow._aSortData[ idx ] = formatter ?\n\t\t\t\t\tformatter( cellData ) :\n\t\t\t\t\tcellData;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t\n\t/**\n\t * Save the state of a table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSaveState ( settings )\n\t{\n\t\tif ( !settings.oFeatures.bStateSave || settings.bDestroying )\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\n\t\t/* Store the interesting variables */\n\t\tvar state = {\n\t\t\ttime:    +new Date(),\n\t\t\tstart:   settings._iDisplayStart,\n\t\t\tlength:  settings._iDisplayLength,\n\t\t\torder:   $.extend( true, [], settings.aaSorting ),\n\t\t\tsearch:  _fnSearchToCamel( settings.oPreviousSearch ),\n\t\t\tcolumns: $.map( settings.aoColumns, function ( col, i ) {\n\t\t\t\treturn {\n\t\t\t\t\tvisible: col.bVisible,\n\t\t\t\t\tsearch: _fnSearchToCamel( settings.aoPreSearchCols[i] )\n\t\t\t\t};\n\t\t\t} )\n\t\t};\n\t\n\t\t_fnCallbackFire( settings, \"aoStateSaveParams\", 'stateSaveParams', [settings, state] );\n\t\n\t\tsettings.oSavedState = state;\n\t\tsettings.fnStateSaveCallback.call( settings.oInstance, settings, state );\n\t}\n\t\n\t\n\t/**\n\t * Attempt to load a saved table state\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {object} oInit DataTables init object so we can override settings\n\t *  @param {function} callback Callback to execute when the state has been loaded\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnLoadState ( settings, oInit, callback )\n\t{\n\t\tvar i, ien;\n\t\tvar columns = settings.aoColumns;\n\t\tvar loaded = function ( s ) {\n\t\t\tif ( ! s || ! s.time ) {\n\t\t\t\tcallback();\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// Allow custom and plug-in manipulation functions to alter the saved data set and\n\t\t\t// cancelling of loading by returning false\n\t\t\tvar abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s] );\n\t\t\tif ( $.inArray( false, abStateLoad ) !== -1 ) {\n\t\t\t\tcallback();\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// Reject old data\n\t\t\tvar duration = settings.iStateDuration;\n\t\t\tif ( duration > 0 && s.time < +new Date() - (duration*1000) ) {\n\t\t\t\tcallback();\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// Number of columns have changed - all bets are off, no restore of settings\n\t\t\tif ( s.columns && columns.length !== s.columns.length ) {\n\t\t\t\tcallback();\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// Store the saved state so it might be accessed at any time\n\t\t\tsettings.oLoadedState = $.extend( true, {}, s );\n\t\n\t\t\t// Restore key features - todo - for 1.11 this needs to be done by\n\t\t\t// subscribed events\n\t\t\tif ( s.start !== undefined ) {\n\t\t\t\tsettings._iDisplayStart    = s.start;\n\t\t\t\tsettings.iInitDisplayStart = s.start;\n\t\t\t}\n\t\t\tif ( s.length !== undefined ) {\n\t\t\t\tsettings._iDisplayLength   = s.length;\n\t\t\t}\n\t\n\t\t\t// Order\n\t\t\tif ( s.order !== undefined ) {\n\t\t\t\tsettings.aaSorting = [];\n\t\t\t\t$.each( s.order, function ( i, col ) {\n\t\t\t\t\tsettings.aaSorting.push( col[0] >= columns.length ?\n\t\t\t\t\t\t[ 0, col[1] ] :\n\t\t\t\t\t\tcol\n\t\t\t\t\t);\n\t\t\t\t} );\n\t\t\t}\n\t\n\t\t\t// Search\n\t\t\tif ( s.search !== undefined ) {\n\t\t\t\t$.extend( settings.oPreviousSearch, _fnSearchToHung( s.search ) );\n\t\t\t}\n\t\n\t\t\t// Columns\n\t\t\t//\n\t\t\tif ( s.columns ) {\n\t\t\t\tfor ( i=0, ien=s.columns.length ; i<ien ; i++ ) {\n\t\t\t\t\tvar col = s.columns[i];\n\t\n\t\t\t\t\t// Visibility\n\t\t\t\t\tif ( col.visible !== undefined ) {\n\t\t\t\t\t\tcolumns[i].bVisible = col.visible;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Search\n\t\t\t\t\tif ( col.search !== undefined ) {\n\t\t\t\t\t\t$.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t_fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, s] );\n\t\t\tcallback();\n\t\t}\n\t\n\t\tif ( ! settings.oFeatures.bStateSave ) {\n\t\t\tcallback();\n\t\t\treturn;\n\t\t}\n\t\n\t\tvar state = settings.fnStateLoadCallback.call( settings.oInstance, settings, loaded );\n\t\n\t\tif ( state !== undefined ) {\n\t\t\tloaded( state );\n\t\t}\n\t\t// otherwise, wait for the loaded callback to be executed\n\t}\n\t\n\t\n\t/**\n\t * Return the settings object for a particular table\n\t *  @param {node} table table we are using as a dataTable\n\t *  @returns {object} Settings object - or null if not found\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSettingsFromNode ( table )\n\t{\n\t\tvar settings = DataTable.settings;\n\t\tvar idx = $.inArray( table, _pluck( settings, 'nTable' ) );\n\t\n\t\treturn idx !== -1 ?\n\t\t\tsettings[ idx ] :\n\t\t\tnull;\n\t}\n\t\n\t\n\t/**\n\t * Log an error message\n\t *  @param {object} settings dataTables settings object\n\t *  @param {int} level log error messages, or display them to the user\n\t *  @param {string} msg error message\n\t *  @param {int} tn Technical note id to get more information about the error.\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnLog( settings, level, msg, tn )\n\t{\n\t\tmsg = 'DataTables warning: '+\n\t\t\t(settings ? 'table id='+settings.sTableId+' - ' : '')+msg;\n\t\n\t\tif ( tn ) {\n\t\t\tmsg += '. For more information about this error, please see '+\n\t\t\t'http://datatables.net/tn/'+tn;\n\t\t}\n\t\n\t\tif ( ! level  ) {\n\t\t\t// Backwards compatibility pre 1.10\n\t\t\tvar ext = DataTable.ext;\n\t\t\tvar type = ext.sErrMode || ext.errMode;\n\t\n\t\t\tif ( settings ) {\n\t\t\t\t_fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );\n\t\t\t}\n\t\n\t\t\tif ( type == 'alert' ) {\n\t\t\t\talert( msg );\n\t\t\t}\n\t\t\telse if ( type == 'throw' ) {\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\t\t\telse if ( typeof type == 'function' ) {\n\t\t\t\ttype( settings, tn, msg );\n\t\t\t}\n\t\t}\n\t\telse if ( window.console && console.log ) {\n\t\t\tconsole.log( msg );\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * See if a property is defined on one object, if so assign it to the other object\n\t *  @param {object} ret target object\n\t *  @param {object} src source object\n\t *  @param {string} name property\n\t *  @param {string} [mappedName] name to map too - optional, name used if not given\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnMap( ret, src, name, mappedName )\n\t{\n\t\tif ( $.isArray( name ) ) {\n\t\t\t$.each( name, function (i, val) {\n\t\t\t\tif ( $.isArray( val ) ) {\n\t\t\t\t\t_fnMap( ret, src, val[0], val[1] );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t_fnMap( ret, src, val );\n\t\t\t\t}\n\t\t\t} );\n\t\n\t\t\treturn;\n\t\t}\n\t\n\t\tif ( mappedName === undefined ) {\n\t\t\tmappedName = name;\n\t\t}\n\t\n\t\tif ( src[name] !== undefined ) {\n\t\t\tret[mappedName] = src[name];\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Extend objects - very similar to jQuery.extend, but deep copy objects, and\n\t * shallow copy arrays. The reason we need to do this, is that we don't want to\n\t * deep copy array init values (such as aaSorting) since the dev wouldn't be\n\t * able to override them, but we do want to deep copy arrays.\n\t *  @param {object} out Object to extend\n\t *  @param {object} extender Object from which the properties will be applied to\n\t *      out\n\t *  @param {boolean} breakRefs If true, then arrays will be sliced to take an\n\t *      independent copy with the exception of the `data` or `aaData` parameters\n\t *      if they are present. This is so you can pass in a collection to\n\t *      DataTables and have that used as your data source without breaking the\n\t *      references\n\t *  @returns {object} out Reference, just for convenience - out === the return.\n\t *  @memberof DataTable#oApi\n\t *  @todo This doesn't take account of arrays inside the deep copied objects.\n\t */\n\tfunction _fnExtend( out, extender, breakRefs )\n\t{\n\t\tvar val;\n\t\n\t\tfor ( var prop in extender ) {\n\t\t\tif ( extender.hasOwnProperty(prop) ) {\n\t\t\t\tval = extender[prop];\n\t\n\t\t\t\tif ( $.isPlainObject( val ) ) {\n\t\t\t\t\tif ( ! $.isPlainObject( out[prop] ) ) {\n\t\t\t\t\t\tout[prop] = {};\n\t\t\t\t\t}\n\t\t\t\t\t$.extend( true, out[prop], val );\n\t\t\t\t}\n\t\t\t\telse if ( breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val) ) {\n\t\t\t\t\tout[prop] = val.slice();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tout[prop] = val;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn out;\n\t}\n\t\n\t\n\t/**\n\t * Bind an event handers to allow a click or return key to activate the callback.\n\t * This is good for accessibility since a return on the keyboard will have the\n\t * same effect as a click, if the element has focus.\n\t *  @param {element} n Element to bind the action to\n\t *  @param {object} oData Data object to pass to the triggered function\n\t *  @param {function} fn Callback function for when the event is triggered\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnBindAction( n, oData, fn )\n\t{\n\t\t$(n)\n\t\t\t.on( 'click.DT', oData, function (e) {\n\t\t\t\t\tn.blur(); // Remove focus outline for mouse users\n\t\t\t\t\tfn(e);\n\t\t\t\t} )\n\t\t\t.on( 'keypress.DT', oData, function (e){\n\t\t\t\t\tif ( e.which === 13 ) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tfn(e);\n\t\t\t\t\t}\n\t\t\t\t} )\n\t\t\t.on( 'selectstart.DT', function () {\n\t\t\t\t\t/* Take the brutal approach to cancelling text selection */\n\t\t\t\t\treturn false;\n\t\t\t\t} );\n\t}\n\t\n\t\n\t/**\n\t * Register a callback function. Easily allows a callback function to be added to\n\t * an array store of callback functions that can then all be called together.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {string} sStore Name of the array storage for the callbacks in oSettings\n\t *  @param {function} fn Function to be called back\n\t *  @param {string} sName Identifying name for the callback (i.e. a label)\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnCallbackReg( oSettings, sStore, fn, sName )\n\t{\n\t\tif ( fn )\n\t\t{\n\t\t\toSettings[sStore].push( {\n\t\t\t\t\"fn\": fn,\n\t\t\t\t\"sName\": sName\n\t\t\t} );\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Fire callback functions and trigger events. Note that the loop over the\n\t * callback array store is done backwards! Further note that you do not want to\n\t * fire off triggers in time sensitive applications (for example cell creation)\n\t * as its slow.\n\t *  @param {object} settings dataTables settings object\n\t *  @param {string} callbackArr Name of the array storage for the callbacks in\n\t *      oSettings\n\t *  @param {string} eventName Name of the jQuery custom event to trigger. If\n\t *      null no trigger is fired\n\t *  @param {array} args Array of arguments to pass to the callback function /\n\t *      trigger\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnCallbackFire( settings, callbackArr, eventName, args )\n\t{\n\t\tvar ret = [];\n\t\n\t\tif ( callbackArr ) {\n\t\t\tret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {\n\t\t\t\treturn val.fn.apply( settings.oInstance, args );\n\t\t\t} );\n\t\t}\n\t\n\t\tif ( eventName !== null ) {\n\t\t\tvar e = $.Event( eventName+'.dt' );\n\t\n\t\t\t$(settings.nTable).trigger( e, args );\n\t\n\t\t\tret.push( e.result );\n\t\t}\n\t\n\t\treturn ret;\n\t}\n\t\n\t\n\tfunction _fnLengthOverflow ( settings )\n\t{\n\t\tvar\n\t\t\tstart = settings._iDisplayStart,\n\t\t\tend = settings.fnDisplayEnd(),\n\t\t\tlen = settings._iDisplayLength;\n\t\n\t\t/* If we have space to show extra rows (backing up from the end point - then do so */\n\t\tif ( start >= end )\n\t\t{\n\t\t\tstart = end - len;\n\t\t}\n\t\n\t\t// Keep the start record on the current page\n\t\tstart -= (start % len);\n\t\n\t\tif ( len === -1 || start < 0 )\n\t\t{\n\t\t\tstart = 0;\n\t\t}\n\t\n\t\tsettings._iDisplayStart = start;\n\t}\n\t\n\t\n\tfunction _fnRenderer( settings, type )\n\t{\n\t\tvar renderer = settings.renderer;\n\t\tvar host = DataTable.ext.renderer[type];\n\t\n\t\tif ( $.isPlainObject( renderer ) && renderer[type] ) {\n\t\t\t// Specific renderer for this type. If available use it, otherwise use\n\t\t\t// the default.\n\t\t\treturn host[renderer[type]] || host._;\n\t\t}\n\t\telse if ( typeof renderer === 'string' ) {\n\t\t\t// Common renderer - if there is one available for this type use it,\n\t\t\t// otherwise use the default\n\t\t\treturn host[renderer] || host._;\n\t\t}\n\t\n\t\t// Use the default\n\t\treturn host._;\n\t}\n\t\n\t\n\t/**\n\t * Detect the data source being used for the table. Used to simplify the code\n\t * a little (ajax) and to make it compress a little smaller.\n\t *\n\t *  @param {object} settings dataTables settings object\n\t *  @returns {string} Data source\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnDataSource ( settings )\n\t{\n\t\tif ( settings.oFeatures.bServerSide ) {\n\t\t\treturn 'ssp';\n\t\t}\n\t\telse if ( settings.ajax || settings.sAjaxSource ) {\n\t\t\treturn 'ajax';\n\t\t}\n\t\treturn 'dom';\n\t}\n\t\n\n\t\n\t\n\t/**\n\t * Computed structure of the DataTables API, defined by the options passed to\n\t * `DataTable.Api.register()` when building the API.\n\t *\n\t * The structure is built in order to speed creation and extension of the Api\n\t * objects since the extensions are effectively pre-parsed.\n\t *\n\t * The array is an array of objects with the following structure, where this\n\t * base array represents the Api prototype base:\n\t *\n\t *     [\n\t *       {\n\t *         name:      'data'                -- string   - Property name\n\t *         val:       function () {},       -- function - Api method (or undefined if just an object\n\t *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n\t *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n\t *       },\n\t *       {\n\t *         name:     'row'\n\t *         val:       {},\n\t *         methodExt: [ ... ],\n\t *         propExt:   [\n\t *           {\n\t *             name:      'data'\n\t *             val:       function () {},\n\t *             methodExt: [ ... ],\n\t *             propExt:   [ ... ]\n\t *           },\n\t *           ...\n\t *         ]\n\t *       }\n\t *     ]\n\t *\n\t * @type {Array}\n\t * @ignore\n\t */\n\tvar __apiStruct = [];\n\t\n\t\n\t/**\n\t * `Array.prototype` reference.\n\t *\n\t * @type object\n\t * @ignore\n\t */\n\tvar __arrayProto = Array.prototype;\n\t\n\t\n\t/**\n\t * Abstraction for `context` parameter of the `Api` constructor to allow it to\n\t * take several different forms for ease of use.\n\t *\n\t * Each of the input parameter types will be converted to a DataTables settings\n\t * object where possible.\n\t *\n\t * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one\n\t *   of:\n\t *\n\t *   * `string` - jQuery selector. Any DataTables' matching the given selector\n\t *     with be found and used.\n\t *   * `node` - `TABLE` node which has already been formed into a DataTable.\n\t *   * `jQuery` - A jQuery object of `TABLE` nodes.\n\t *   * `object` - DataTables settings object\n\t *   * `DataTables.Api` - API instance\n\t * @return {array|null} Matching DataTables settings objects. `null` or\n\t *   `undefined` is returned if no matching DataTable is found.\n\t * @ignore\n\t */\n\tvar _toSettings = function ( mixed )\n\t{\n\t\tvar idx, jq;\n\t\tvar settings = DataTable.settings;\n\t\tvar tables = $.map( settings, function (el, i) {\n\t\t\treturn el.nTable;\n\t\t} );\n\t\n\t\tif ( ! mixed ) {\n\t\t\treturn [];\n\t\t}\n\t\telse if ( mixed.nTable && mixed.oApi ) {\n\t\t\t// DataTables settings object\n\t\t\treturn [ mixed ];\n\t\t}\n\t\telse if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {\n\t\t\t// Table node\n\t\t\tidx = $.inArray( mixed, tables );\n\t\t\treturn idx !== -1 ? [ settings[idx] ] : null;\n\t\t}\n\t\telse if ( mixed && typeof mixed.settings === 'function' ) {\n\t\t\treturn mixed.settings().toArray();\n\t\t}\n\t\telse if ( typeof mixed === 'string' ) {\n\t\t\t// jQuery selector\n\t\t\tjq = $(mixed);\n\t\t}\n\t\telse if ( mixed instanceof $ ) {\n\t\t\t// jQuery object (also DataTables instance)\n\t\t\tjq = mixed;\n\t\t}\n\t\n\t\tif ( jq ) {\n\t\t\treturn jq.map( function(i) {\n\t\t\t\tidx = $.inArray( this, tables );\n\t\t\t\treturn idx !== -1 ? settings[idx] : null;\n\t\t\t} ).toArray();\n\t\t}\n\t};\n\t\n\t\n\t/**\n\t * DataTables API class - used to control and interface with  one or more\n\t * DataTables enhanced tables.\n\t *\n\t * The API class is heavily based on jQuery, presenting a chainable interface\n\t * that you can use to interact with tables. Each instance of the API class has\n\t * a \"context\" - i.e. the tables that it will operate on. This could be a single\n\t * table, all tables on a page or a sub-set thereof.\n\t *\n\t * Additionally the API is designed to allow you to easily work with the data in\n\t * the tables, retrieving and manipulating it as required. This is done by\n\t * presenting the API class as an array like interface. The contents of the\n\t * array depend upon the actions requested by each method (for example\n\t * `rows().nodes()` will return an array of nodes, while `rows().data()` will\n\t * return an array of objects or arrays depending upon your table's\n\t * configuration). The API object has a number of array like methods (`push`,\n\t * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,\n\t * `unique` etc) to assist your working with the data held in a table.\n\t *\n\t * Most methods (those which return an Api instance) are chainable, which means\n\t * the return from a method call also has all of the methods available that the\n\t * top level object had. For example, these two calls are equivalent:\n\t *\n\t *     // Not chained\n\t *     api.row.add( {...} );\n\t *     api.draw();\n\t *\n\t *     // Chained\n\t *     api.row.add( {...} ).draw();\n\t *\n\t * @class DataTable.Api\n\t * @param {array|object|string|jQuery} context DataTable identifier. This is\n\t *   used to define which DataTables enhanced tables this API will operate on.\n\t *   Can be one of:\n\t *\n\t *   * `string` - jQuery selector. Any DataTables' matching the given selector\n\t *     with be found and used.\n\t *   * `node` - `TABLE` node which has already been formed into a DataTable.\n\t *   * `jQuery` - A jQuery object of `TABLE` nodes.\n\t *   * `object` - DataTables settings object\n\t * @param {array} [data] Data to initialise the Api instance with.\n\t *\n\t * @example\n\t *   // Direct initialisation during DataTables construction\n\t *   var api = $('#example').DataTable();\n\t *\n\t * @example\n\t *   // Initialisation using a DataTables jQuery object\n\t *   var api = $('#example').dataTable().api();\n\t *\n\t * @example\n\t *   // Initialisation as a constructor\n\t *   var api = new $.fn.DataTable.Api( 'table.dataTable' );\n\t */\n\t_Api = function ( context, data )\n\t{\n\t\tif ( ! (this instanceof _Api) ) {\n\t\t\treturn new _Api( context, data );\n\t\t}\n\t\n\t\tvar settings = [];\n\t\tvar ctxSettings = function ( o ) {\n\t\t\tvar a = _toSettings( o );\n\t\t\tif ( a ) {\n\t\t\t\tsettings = settings.concat( a );\n\t\t\t}\n\t\t};\n\t\n\t\tif ( $.isArray( context ) ) {\n\t\t\tfor ( var i=0, ien=context.length ; i<ien ; i++ ) {\n\t\t\t\tctxSettings( context[i] );\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tctxSettings( context );\n\t\t}\n\t\n\t\t// Remove duplicates\n\t\tthis.context = _unique( settings );\n\t\n\t\t// Initial data\n\t\tif ( data ) {\n\t\t\t$.merge( this, data );\n\t\t}\n\t\n\t\t// selector\n\t\tthis.selector = {\n\t\t\trows: null,\n\t\t\tcols: null,\n\t\t\topts: null\n\t\t};\n\t\n\t\t_Api.extend( this, this, __apiStruct );\n\t};\n\t\n\tDataTable.Api = _Api;\n\t\n\t// Don't destroy the existing prototype, just extend it. Required for jQuery 2's\n\t// isPlainObject.\n\t$.extend( _Api.prototype, {\n\t\tany: function ()\n\t\t{\n\t\t\treturn this.count() !== 0;\n\t\t},\n\t\n\t\n\t\tconcat:  __arrayProto.concat,\n\t\n\t\n\t\tcontext: [], // array of table settings objects\n\t\n\t\n\t\tcount: function ()\n\t\t{\n\t\t\treturn this.flatten().length;\n\t\t},\n\t\n\t\n\t\teach: function ( fn )\n\t\t{\n\t\t\tfor ( var i=0, ien=this.length ; i<ien; i++ ) {\n\t\t\t\tfn.call( this, this[i], i, this );\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\t},\n\t\n\t\n\t\teq: function ( idx )\n\t\t{\n\t\t\tvar ctx = this.context;\n\t\n\t\t\treturn ctx.length > idx ?\n\t\t\t\tnew _Api( ctx[idx], this[idx] ) :\n\t\t\t\tnull;\n\t\t},\n\t\n\t\n\t\tfilter: function ( fn )\n\t\t{\n\t\t\tvar a = [];\n\t\n\t\t\tif ( __arrayProto.filter ) {\n\t\t\t\ta = __arrayProto.filter.call( this, fn, this );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Compatibility for browsers without EMCA-252-5 (JS 1.6)\n\t\t\t\tfor ( var i=0, ien=this.length ; i<ien ; i++ ) {\n\t\t\t\t\tif ( fn.call( this, this[i], i, this ) ) {\n\t\t\t\t\t\ta.push( this[i] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn new _Api( this.context, a );\n\t\t},\n\t\n\t\n\t\tflatten: function ()\n\t\t{\n\t\t\tvar a = [];\n\t\t\treturn new _Api( this.context, a.concat.apply( a, this.toArray() ) );\n\t\t},\n\t\n\t\n\t\tjoin:    __arrayProto.join,\n\t\n\t\n\t\tindexOf: __arrayProto.indexOf || function (obj, start)\n\t\t{\n\t\t\tfor ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {\n\t\t\t\tif ( this[i] === obj ) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t},\n\t\n\t\titerator: function ( flatten, type, fn, alwaysNew ) {\n\t\t\tvar\n\t\t\t\ta = [], ret,\n\t\t\t\ti, ien, j, jen,\n\t\t\t\tcontext = this.context,\n\t\t\t\trows, items, item,\n\t\t\t\tselector = this.selector;\n\t\n\t\t\t// Argument shifting\n\t\t\tif ( typeof flatten === 'string' ) {\n\t\t\t\talwaysNew = fn;\n\t\t\t\tfn = type;\n\t\t\t\ttype = flatten;\n\t\t\t\tflatten = false;\n\t\t\t}\n\t\n\t\t\tfor ( i=0, ien=context.length ; i<ien ; i++ ) {\n\t\t\t\tvar apiInst = new _Api( context[i] );\n\t\n\t\t\t\tif ( type === 'table' ) {\n\t\t\t\t\tret = fn.call( apiInst, context[i], i );\n\t\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\ta.push( ret );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ( type === 'columns' || type === 'rows' ) {\n\t\t\t\t\t// this has same length as context - one entry for each table\n\t\t\t\t\tret = fn.call( apiInst, context[i], this[i], i );\n\t\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\ta.push( ret );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {\n\t\t\t\t\t// columns and rows share the same structure.\n\t\t\t\t\t// 'this' is an array of column indexes for each context\n\t\t\t\t\titems = this[i];\n\t\n\t\t\t\t\tif ( type === 'column-rows' ) {\n\t\t\t\t\t\trows = _selector_row_indexes( context[i], selector.opts );\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfor ( j=0, jen=items.length ; j<jen ; j++ ) {\n\t\t\t\t\t\titem = items[j];\n\t\n\t\t\t\t\t\tif ( type === 'cell' ) {\n\t\t\t\t\t\t\tret = fn.call( apiInst, context[i], item.row, item.column, i, j );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tret = fn.call( apiInst, context[i], item, i, j, rows );\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\t\ta.push( ret );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif ( a.length || alwaysNew ) {\n\t\t\t\tvar api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );\n\t\t\t\tvar apiSelector = api.selector;\n\t\t\t\tapiSelector.rows = selector.rows;\n\t\t\t\tapiSelector.cols = selector.cols;\n\t\t\t\tapiSelector.opts = selector.opts;\n\t\t\t\treturn api;\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\n\t\n\t\tlastIndexOf: __arrayProto.lastIndexOf || function (obj, start)\n\t\t{\n\t\t\t// Bit cheeky...\n\t\t\treturn this.indexOf.apply( this.toArray.reverse(), arguments );\n\t\t},\n\t\n\t\n\t\tlength:  0,\n\t\n\t\n\t\tmap: function ( fn )\n\t\t{\n\t\t\tvar a = [];\n\t\n\t\t\tif ( __arrayProto.map ) {\n\t\t\t\ta = __arrayProto.map.call( this, fn, this );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Compatibility for browsers without EMCA-252-5 (JS 1.6)\n\t\t\t\tfor ( var i=0, ien=this.length ; i<ien ; i++ ) {\n\t\t\t\t\ta.push( fn.call( this, this[i], i ) );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn new _Api( this.context, a );\n\t\t},\n\t\n\t\n\t\tpluck: function ( prop )\n\t\t{\n\t\t\treturn this.map( function ( el ) {\n\t\t\t\treturn el[ prop ];\n\t\t\t} );\n\t\t},\n\t\n\t\tpop:     __arrayProto.pop,\n\t\n\t\n\t\tpush:    __arrayProto.push,\n\t\n\t\n\t\t// Does not return an API instance\n\t\treduce: __arrayProto.reduce || function ( fn, init )\n\t\t{\n\t\t\treturn _fnReduce( this, fn, init, 0, this.length, 1 );\n\t\t},\n\t\n\t\n\t\treduceRight: __arrayProto.reduceRight || function ( fn, init )\n\t\t{\n\t\t\treturn _fnReduce( this, fn, init, this.length-1, -1, -1 );\n\t\t},\n\t\n\t\n\t\treverse: __arrayProto.reverse,\n\t\n\t\n\t\t// Object with rows, columns and opts\n\t\tselector: null,\n\t\n\t\n\t\tshift:   __arrayProto.shift,\n\t\n\t\n\t\tslice: function () {\n\t\t\treturn new _Api( this.context, this );\n\t\t},\n\t\n\t\n\t\tsort:    __arrayProto.sort, // ? name - order?\n\t\n\t\n\t\tsplice:  __arrayProto.splice,\n\t\n\t\n\t\ttoArray: function ()\n\t\t{\n\t\t\treturn __arrayProto.slice.call( this );\n\t\t},\n\t\n\t\n\t\tto$: function ()\n\t\t{\n\t\t\treturn $( this );\n\t\t},\n\t\n\t\n\t\ttoJQuery: function ()\n\t\t{\n\t\t\treturn $( this );\n\t\t},\n\t\n\t\n\t\tunique: function ()\n\t\t{\n\t\t\treturn new _Api( this.context, _unique(this) );\n\t\t},\n\t\n\t\n\t\tunshift: __arrayProto.unshift\n\t} );\n\t\n\t\n\t_Api.extend = function ( scope, obj, ext )\n\t{\n\t\t// Only extend API instances and static properties of the API\n\t\tif ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\tvar\n\t\t\ti, ien,\n\t\t\tj, jen,\n\t\t\tstruct, inner,\n\t\t\tmethodScoping = function ( scope, fn, struc ) {\n\t\t\t\treturn function () {\n\t\t\t\t\tvar ret = fn.apply( scope, arguments );\n\t\n\t\t\t\t\t// Method extension\n\t\t\t\t\t_Api.extend( ret, ret, struc.methodExt );\n\t\t\t\t\treturn ret;\n\t\t\t\t};\n\t\t\t};\n\t\n\t\tfor ( i=0, ien=ext.length ; i<ien ; i++ ) {\n\t\t\tstruct = ext[i];\n\t\n\t\t\t// Value\n\t\t\tobj[ struct.name ] = typeof struct.val === 'function' ?\n\t\t\t\tmethodScoping( scope, struct.val, struct ) :\n\t\t\t\t$.isPlainObject( struct.val ) ?\n\t\t\t\t\t{} :\n\t\t\t\t\tstruct.val;\n\t\n\t\t\tobj[ struct.name ].__dt_wrapper = true;\n\t\n\t\t\t// Property extension\n\t\t\t_Api.extend( scope, obj[ struct.name ], struct.propExt );\n\t\t}\n\t};\n\t\n\t\n\t// @todo - Is there need for an augment function?\n\t// _Api.augment = function ( inst, name )\n\t// {\n\t// \t// Find src object in the structure from the name\n\t// \tvar parts = name.split('.');\n\t\n\t// \t_Api.extend( inst, obj );\n\t// };\n\t\n\t\n\t//     [\n\t//       {\n\t//         name:      'data'                -- string   - Property name\n\t//         val:       function () {},       -- function - Api method (or undefined if just an object\n\t//         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n\t//         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n\t//       },\n\t//       {\n\t//         name:     'row'\n\t//         val:       {},\n\t//         methodExt: [ ... ],\n\t//         propExt:   [\n\t//           {\n\t//             name:      'data'\n\t//             val:       function () {},\n\t//             methodExt: [ ... ],\n\t//             propExt:   [ ... ]\n\t//           },\n\t//           ...\n\t//         ]\n\t//       }\n\t//     ]\n\t\n\t_Api.register = _api_register = function ( name, val )\n\t{\n\t\tif ( $.isArray( name ) ) {\n\t\t\tfor ( var j=0, jen=name.length ; j<jen ; j++ ) {\n\t\t\t\t_Api.register( name[j], val );\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\tvar\n\t\t\ti, ien,\n\t\t\their = name.split('.'),\n\t\t\tstruct = __apiStruct,\n\t\t\tkey, method;\n\t\n\t\tvar find = function ( src, name ) {\n\t\t\tfor ( var i=0, ien=src.length ; i<ien ; i++ ) {\n\t\t\t\tif ( src[i].name === name ) {\n\t\t\t\t\treturn src[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\t\n\t\tfor ( i=0, ien=heir.length ; i<ien ; i++ ) {\n\t\t\tmethod = heir[i].indexOf('()') !== -1;\n\t\t\tkey = method ?\n\t\t\t\their[i].replace('()', '') :\n\t\t\t\their[i];\n\t\n\t\t\tvar src = find( struct, key );\n\t\t\tif ( ! src ) {\n\t\t\t\tsrc = {\n\t\t\t\t\tname:      key,\n\t\t\t\t\tval:       {},\n\t\t\t\t\tmethodExt: [],\n\t\t\t\t\tpropExt:   []\n\t\t\t\t};\n\t\t\t\tstruct.push( src );\n\t\t\t}\n\t\n\t\t\tif ( i === ien-1 ) {\n\t\t\t\tsrc.val = val;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstruct = method ?\n\t\t\t\t\tsrc.methodExt :\n\t\t\t\t\tsrc.propExt;\n\t\t\t}\n\t\t}\n\t};\n\t\n\t\n\t_Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {\n\t\t_Api.register( pluralName, val );\n\t\n\t\t_Api.register( singularName, function () {\n\t\t\tvar ret = val.apply( this, arguments );\n\t\n\t\t\tif ( ret === this ) {\n\t\t\t\t// Returned item is the API instance that was passed in, return it\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\telse if ( ret instanceof _Api ) {\n\t\t\t\t// New API instance returned, want the value from the first item\n\t\t\t\t// in the returned array for the singular result.\n\t\t\t\treturn ret.length ?\n\t\t\t\t\t$.isArray( ret[0] ) ?\n\t\t\t\t\t\tnew _Api( ret.context, ret[0] ) : // Array results are 'enhanced'\n\t\t\t\t\t\tret[0] :\n\t\t\t\t\tundefined;\n\t\t\t}\n\t\n\t\t\t// Non-API return - just fire it back\n\t\t\treturn ret;\n\t\t} );\n\t};\n\t\n\t\n\t/**\n\t * Selector for HTML tables. Apply the given selector to the give array of\n\t * DataTables settings objects.\n\t *\n\t * @param {string|integer} [selector] jQuery selector string or integer\n\t * @param  {array} Array of DataTables settings objects to be filtered\n\t * @return {array}\n\t * @ignore\n\t */\n\tvar __table_selector = function ( selector, a )\n\t{\n\t\t// Integer is used to pick out a table by index\n\t\tif ( typeof selector === 'number' ) {\n\t\t\treturn [ a[ selector ] ];\n\t\t}\n\t\n\t\t// Perform a jQuery selector on the table nodes\n\t\tvar nodes = $.map( a, function (el, i) {\n\t\t\treturn el.nTable;\n\t\t} );\n\t\n\t\treturn $(nodes)\n\t\t\t.filter( selector )\n\t\t\t.map( function (i) {\n\t\t\t\t// Need to translate back from the table node to the settings\n\t\t\t\tvar idx = $.inArray( this, nodes );\n\t\t\t\treturn a[ idx ];\n\t\t\t} )\n\t\t\t.toArray();\n\t};\n\t\n\t\n\t\n\t/**\n\t * Context selector for the API's context (i.e. the tables the API instance\n\t * refers to.\n\t *\n\t * @name    DataTable.Api#tables\n\t * @param {string|integer} [selector] Selector to pick which tables the iterator\n\t *   should operate on. If not given, all tables in the current context are\n\t *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to\n\t *   select multiple tables or as an integer to select a single table.\n\t * @returns {DataTable.Api} Returns a new API instance if a selector is given.\n\t */\n\t_api_register( 'tables()', function ( selector ) {\n\t\t// A new instance is created if there was a selector specified\n\t\treturn selector ?\n\t\t\tnew _Api( __table_selector( selector, this.context ) ) :\n\t\t\tthis;\n\t} );\n\t\n\t\n\t_api_register( 'table()', function ( selector ) {\n\t\tvar tables = this.tables( selector );\n\t\tvar ctx = tables.context;\n\t\n\t\t// Truncate to the first matched table\n\t\treturn ctx.length ?\n\t\t\tnew _Api( ctx[0] ) :\n\t\t\ttables;\n\t} );\n\t\n\t\n\t_api_registerPlural( 'tables().nodes()', 'table().node()' , function () {\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\treturn ctx.nTable;\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'tables().body()', 'table().body()' , function () {\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\treturn ctx.nTBody;\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'tables().header()', 'table().header()' , function () {\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\treturn ctx.nTHead;\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'tables().footer()', 'table().footer()' , function () {\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\treturn ctx.nTFoot;\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'tables().containers()', 'table().container()' , function () {\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\treturn ctx.nTableWrapper;\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t\n\t/**\n\t * Redraw the tables in the current context.\n\t */\n\t_api_register( 'draw()', function ( paging ) {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\tif ( paging === 'page' ) {\n\t\t\t\t_fnDraw( settings );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif ( typeof paging === 'string' ) {\n\t\t\t\t\tpaging = paging === 'full-hold' ?\n\t\t\t\t\t\tfalse :\n\t\t\t\t\t\ttrue;\n\t\t\t\t}\n\t\n\t\t\t\t_fnReDraw( settings, paging===false );\n\t\t\t}\n\t\t} );\n\t} );\n\t\n\t\n\t\n\t/**\n\t * Get the current page index.\n\t *\n\t * @return {integer} Current page index (zero based)\n\t *//**\n\t * Set the current page.\n\t *\n\t * Note that if you attempt to show a page which does not exist, DataTables will\n\t * not throw an error, but rather reset the paging.\n\t *\n\t * @param {integer|string} action The paging action to take. This can be one of:\n\t *  * `integer` - The page index to jump to\n\t *  * `string` - An action to take:\n\t *    * `first` - Jump to first page.\n\t *    * `next` - Jump to the next page\n\t *    * `previous` - Jump to previous page\n\t *    * `last` - Jump to the last page.\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'page()', function ( action ) {\n\t\tif ( action === undefined ) {\n\t\t\treturn this.page.info().page; // not an expensive call\n\t\t}\n\t\n\t\t// else, have an action to take on all tables\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnPageChange( settings, action );\n\t\t} );\n\t} );\n\t\n\t\n\t/**\n\t * Paging information for the first table in the current context.\n\t *\n\t * If you require paging information for another table, use the `table()` method\n\t * with a suitable selector.\n\t *\n\t * @return {object} Object with the following properties set:\n\t *  * `page` - Current page index (zero based - i.e. the first page is `0`)\n\t *  * `pages` - Total number of pages\n\t *  * `start` - Display index for the first record shown on the current page\n\t *  * `end` - Display index for the last record shown on the current page\n\t *  * `length` - Display length (number of records). Note that generally `start\n\t *    + length = end`, but this is not always true, for example if there are\n\t *    only 2 records to show on the final page, with a length of 10.\n\t *  * `recordsTotal` - Full data set length\n\t *  * `recordsDisplay` - Data set length once the current filtering criterion\n\t *    are applied.\n\t */\n\t_api_register( 'page.info()', function ( action ) {\n\t\tif ( this.context.length === 0 ) {\n\t\t\treturn undefined;\n\t\t}\n\t\n\t\tvar\n\t\t\tsettings   = this.context[0],\n\t\t\tstart      = settings._iDisplayStart,\n\t\t\tlen        = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,\n\t\t\tvisRecords = settings.fnRecordsDisplay(),\n\t\t\tall        = len === -1;\n\t\n\t\treturn {\n\t\t\t\"page\":           all ? 0 : Math.floor( start / len ),\n\t\t\t\"pages\":          all ? 1 : Math.ceil( visRecords / len ),\n\t\t\t\"start\":          start,\n\t\t\t\"end\":            settings.fnDisplayEnd(),\n\t\t\t\"length\":         len,\n\t\t\t\"recordsTotal\":   settings.fnRecordsTotal(),\n\t\t\t\"recordsDisplay\": visRecords,\n\t\t\t\"serverSide\":     _fnDataSource( settings ) === 'ssp'\n\t\t};\n\t} );\n\t\n\t\n\t/**\n\t * Get the current page length.\n\t *\n\t * @return {integer} Current page length. Note `-1` indicates that all records\n\t *   are to be shown.\n\t *//**\n\t * Set the current page length.\n\t *\n\t * @param {integer} Page length to set. Use `-1` to show all records.\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'page.len()', function ( len ) {\n\t\t// Note that we can't call this function 'length()' because `length`\n\t\t// is a Javascript property of functions which defines how many arguments\n\t\t// the function expects.\n\t\tif ( len === undefined ) {\n\t\t\treturn this.context.length !== 0 ?\n\t\t\t\tthis.context[0]._iDisplayLength :\n\t\t\t\tundefined;\n\t\t}\n\t\n\t\t// else, set the page length\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnLengthChange( settings, len );\n\t\t} );\n\t} );\n\t\n\t\n\t\n\tvar __reload = function ( settings, holdPosition, callback ) {\n\t\t// Use the draw event to trigger a callback\n\t\tif ( callback ) {\n\t\t\tvar api = new _Api( settings );\n\t\n\t\t\tapi.one( 'draw', function () {\n\t\t\t\tcallback( api.ajax.json() );\n\t\t\t} );\n\t\t}\n\t\n\t\tif ( _fnDataSource( settings ) == 'ssp' ) {\n\t\t\t_fnReDraw( settings, holdPosition );\n\t\t}\n\t\telse {\n\t\t\t_fnProcessingDisplay( settings, true );\n\t\n\t\t\t// Cancel an existing request\n\t\t\tvar xhr = settings.jqXHR;\n\t\t\tif ( xhr && xhr.readyState !== 4 ) {\n\t\t\t\txhr.abort();\n\t\t\t}\n\t\n\t\t\t// Trigger xhr\n\t\t\t_fnBuildAjax( settings, [], function( json ) {\n\t\t\t\t_fnClearTable( settings );\n\t\n\t\t\t\tvar data = _fnAjaxDataSrc( settings, json );\n\t\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t\t\t_fnAddData( settings, data[i] );\n\t\t\t\t}\n\t\n\t\t\t\t_fnReDraw( settings, holdPosition );\n\t\t\t\t_fnProcessingDisplay( settings, false );\n\t\t\t} );\n\t\t}\n\t};\n\t\n\t\n\t/**\n\t * Get the JSON response from the last Ajax request that DataTables made to the\n\t * server. Note that this returns the JSON from the first table in the current\n\t * context.\n\t *\n\t * @return {object} JSON received from the server.\n\t */\n\t_api_register( 'ajax.json()', function () {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( ctx.length > 0 ) {\n\t\t\treturn ctx[0].json;\n\t\t}\n\t\n\t\t// else return undefined;\n\t} );\n\t\n\t\n\t/**\n\t * Get the data submitted in the last Ajax request\n\t */\n\t_api_register( 'ajax.params()', function () {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( ctx.length > 0 ) {\n\t\t\treturn ctx[0].oAjaxData;\n\t\t}\n\t\n\t\t// else return undefined;\n\t} );\n\t\n\t\n\t/**\n\t * Reload tables from the Ajax data source. Note that this function will\n\t * automatically re-draw the table when the remote data has been loaded.\n\t *\n\t * @param {boolean} [reset=true] Reset (default) or hold the current paging\n\t *   position. A full re-sort and re-filter is performed when this method is\n\t *   called, which is why the pagination reset is the default action.\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'ajax.reload()', function ( callback, resetPaging ) {\n\t\treturn this.iterator( 'table', function (settings) {\n\t\t\t__reload( settings, resetPaging===false, callback );\n\t\t} );\n\t} );\n\t\n\t\n\t/**\n\t * Get the current Ajax URL. Note that this returns the URL from the first\n\t * table in the current context.\n\t *\n\t * @return {string} Current Ajax source URL\n\t *//**\n\t * Set the Ajax URL. Note that this will set the URL for all tables in the\n\t * current context.\n\t *\n\t * @param {string} url URL to set.\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'ajax.url()', function ( url ) {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( url === undefined ) {\n\t\t\t// get\n\t\t\tif ( ctx.length === 0 ) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tctx = ctx[0];\n\t\n\t\t\treturn ctx.ajax ?\n\t\t\t\t$.isPlainObject( ctx.ajax ) ?\n\t\t\t\t\tctx.ajax.url :\n\t\t\t\t\tctx.ajax :\n\t\t\t\tctx.sAjaxSource;\n\t\t}\n\t\n\t\t// set\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\tif ( $.isPlainObject( settings.ajax ) ) {\n\t\t\t\tsettings.ajax.url = url;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsettings.ajax = url;\n\t\t\t}\n\t\t\t// No need to consider sAjaxSource here since DataTables gives priority\n\t\t\t// to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any\n\t\t\t// value of `sAjaxSource` redundant.\n\t\t} );\n\t} );\n\t\n\t\n\t/**\n\t * Load data from the newly set Ajax URL. Note that this method is only\n\t * available when `ajax.url()` is used to set a URL. Additionally, this method\n\t * has the same effect as calling `ajax.reload()` but is provided for\n\t * convenience when setting a new URL. Like `ajax.reload()` it will\n\t * automatically redraw the table once the remote data has been loaded.\n\t *\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'ajax.url().load()', function ( callback, resetPaging ) {\n\t\t// Same as a reload, but makes sense to present it for easy access after a\n\t\t// url change\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\t__reload( ctx, resetPaging===false, callback );\n\t\t} );\n\t} );\n\t\n\t\n\t\n\t\n\tvar _selector_run = function ( type, selector, selectFn, settings, opts )\n\t{\n\t\tvar\n\t\t\tout = [], res,\n\t\t\ta, i, ien, j, jen,\n\t\t\tselectorType = typeof selector;\n\t\n\t\t// Can't just check for isArray here, as an API or jQuery instance might be\n\t\t// given with their array like look\n\t\tif ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {\n\t\t\tselector = [ selector ];\n\t\t}\n\t\n\t\tfor ( i=0, ien=selector.length ; i<ien ; i++ ) {\n\t\t\t// Only split on simple strings - complex expressions will be jQuery selectors\n\t\t\ta = selector[i] && selector[i].split && ! selector[i].match(/[\\[\\(:]/) ?\n\t\t\t\tselector[i].split(',') :\n\t\t\t\t[ selector[i] ];\n\t\n\t\t\tfor ( j=0, jen=a.length ; j<jen ; j++ ) {\n\t\t\t\tres = selectFn( typeof a[j] === 'string' ? $.trim(a[j]) : a[j] );\n\t\n\t\t\t\tif ( res && res.length ) {\n\t\t\t\t\tout = out.concat( res );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t// selector extensions\n\t\tvar ext = _ext.selector[ type ];\n\t\tif ( ext.length ) {\n\t\t\tfor ( i=0, ien=ext.length ; i<ien ; i++ ) {\n\t\t\t\tout = ext[i]( settings, opts, out );\n\t\t\t}\n\t\t}\n\t\n\t\treturn _unique( out );\n\t};\n\t\n\t\n\tvar _selector_opts = function ( opts )\n\t{\n\t\tif ( ! opts ) {\n\t\t\topts = {};\n\t\t}\n\t\n\t\t// Backwards compatibility for 1.9- which used the terminology filter rather\n\t\t// than search\n\t\tif ( opts.filter && opts.search === undefined ) {\n\t\t\topts.search = opts.filter;\n\t\t}\n\t\n\t\treturn $.extend( {\n\t\t\tsearch: 'none',\n\t\t\torder: 'current',\n\t\t\tpage: 'all'\n\t\t}, opts );\n\t};\n\t\n\t\n\tvar _selector_first = function ( inst )\n\t{\n\t\t// Reduce the API instance to the first item found\n\t\tfor ( var i=0, ien=inst.length ; i<ien ; i++ ) {\n\t\t\tif ( inst[i].length > 0 ) {\n\t\t\t\t// Assign the first element to the first item in the instance\n\t\t\t\t// and truncate the instance and context\n\t\t\t\tinst[0] = inst[i];\n\t\t\t\tinst[0].length = 1;\n\t\t\t\tinst.length = 1;\n\t\t\t\tinst.context = [ inst.context[i] ];\n\t\n\t\t\t\treturn inst;\n\t\t\t}\n\t\t}\n\t\n\t\t// Not found - return an empty instance\n\t\tinst.length = 0;\n\t\treturn inst;\n\t};\n\t\n\t\n\tvar _selector_row_indexes = function ( settings, opts )\n\t{\n\t\tvar\n\t\t\ti, ien, tmp, a=[],\n\t\t\tdisplayFiltered = settings.aiDisplay,\n\t\t\tdisplayMaster = settings.aiDisplayMaster;\n\t\n\t\tvar\n\t\t\tsearch = opts.search,  // none, applied, removed\n\t\t\torder  = opts.order,   // applied, current, index (original - compatibility with 1.9)\n\t\t\tpage   = opts.page;    // all, current\n\t\n\t\tif ( _fnDataSource( settings ) == 'ssp' ) {\n\t\t\t// In server-side processing mode, most options are irrelevant since\n\t\t\t// rows not shown don't exist and the index order is the applied order\n\t\t\t// Removed is a special case - for consistency just return an empty\n\t\t\t// array\n\t\t\treturn search === 'removed' ?\n\t\t\t\t[] :\n\t\t\t\t_range( 0, displayMaster.length );\n\t\t}\n\t\telse if ( page == 'current' ) {\n\t\t\t// Current page implies that order=current and fitler=applied, since it is\n\t\t\t// fairly senseless otherwise, regardless of what order and search actually\n\t\t\t// are\n\t\t\tfor ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {\n\t\t\t\ta.push( displayFiltered[i] );\n\t\t\t}\n\t\t}\n\t\telse if ( order == 'current' || order == 'applied' ) {\n\t\t\ta = search == 'none' ?\n\t\t\t\tdisplayMaster.slice() :                      // no search\n\t\t\t\tsearch == 'applied' ?\n\t\t\t\t\tdisplayFiltered.slice() :                // applied search\n\t\t\t\t\t$.map( displayMaster, function (el, i) { // removed search\n\t\t\t\t\t\treturn $.inArray( el, displayFiltered ) === -1 ? el : null;\n\t\t\t\t\t} );\n\t\t}\n\t\telse if ( order == 'index' || order == 'original' ) {\n\t\t\tfor ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\t\t\tif ( search == 'none' ) {\n\t\t\t\t\ta.push( i );\n\t\t\t\t}\n\t\t\t\telse { // applied | removed\n\t\t\t\t\ttmp = $.inArray( i, displayFiltered );\n\t\n\t\t\t\t\tif ((tmp === -1 && search == 'removed') ||\n\t\t\t\t\t\t(tmp >= 0   && search == 'applied') )\n\t\t\t\t\t{\n\t\t\t\t\t\ta.push( i );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn a;\n\t};\n\t\n\t\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Rows\n\t *\n\t * {}          - no selector - use all available rows\n\t * {integer}   - row aoData index\n\t * {node}      - TR node\n\t * {string}    - jQuery selector to apply to the TR elements\n\t * {array}     - jQuery array of nodes, or simply an array of TR nodes\n\t *\n\t */\n\t\n\t\n\tvar __row_selector = function ( settings, selector, opts )\n\t{\n\t\tvar rows;\n\t\tvar run = function ( sel ) {\n\t\t\tvar selInt = _intVal( sel );\n\t\t\tvar i, ien;\n\t\n\t\t\t// Short cut - selector is a number and no options provided (default is\n\t\t\t// all records, so no need to check if the index is in there, since it\n\t\t\t// must be - dev error if the index doesn't exist).\n\t\t\tif ( selInt !== null && ! opts ) {\n\t\t\t\treturn [ selInt ];\n\t\t\t}\n\t\n\t\t\tif ( ! rows ) {\n\t\t\t\trows = _selector_row_indexes( settings, opts );\n\t\t\t}\n\t\n\t\t\tif ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {\n\t\t\t\t// Selector - integer\n\t\t\t\treturn [ selInt ];\n\t\t\t}\n\t\t\telse if ( sel === null || sel === undefined || sel === '' ) {\n\t\t\t\t// Selector - none\n\t\t\t\treturn rows;\n\t\t\t}\n\t\n\t\t\t// Selector - function\n\t\t\tif ( typeof sel === 'function' ) {\n\t\t\t\treturn $.map( rows, function (idx) {\n\t\t\t\t\tvar row = settings.aoData[ idx ];\n\t\t\t\t\treturn sel( idx, row._aData, row.nTr ) ? idx : null;\n\t\t\t\t} );\n\t\t\t}\n\t\n\t\t\t// Get nodes in the order from the `rows` array with null values removed\n\t\t\tvar nodes = _removeEmpty(\n\t\t\t\t_pluck_order( settings.aoData, rows, 'nTr' )\n\t\t\t);\n\t\n\t\t\t// Selector - node\n\t\t\tif ( sel.nodeName ) {\n\t\t\t\tif ( sel._DT_RowIndex !== undefined ) {\n\t\t\t\t\treturn [ sel._DT_RowIndex ]; // Property added by DT for fast lookup\n\t\t\t\t}\n\t\t\t\telse if ( sel._DT_CellIndex ) {\n\t\t\t\t\treturn [ sel._DT_CellIndex.row ];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar host = $(sel).closest('*[data-dt-row]');\n\t\t\t\t\treturn host.length ?\n\t\t\t\t\t\t[ host.data('dt-row') ] :\n\t\t\t\t\t\t[];\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// ID selector. Want to always be able to select rows by id, regardless\n\t\t\t// of if the tr element has been created or not, so can't rely upon\n\t\t\t// jQuery here - hence a custom implementation. This does not match\n\t\t\t// Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,\n\t\t\t// but to select it using a CSS selector engine (like Sizzle or\n\t\t\t// querySelect) it would need to need to be escaped for some characters.\n\t\t\t// DataTables simplifies this for row selectors since you can select\n\t\t\t// only a row. A # indicates an id any anything that follows is the id -\n\t\t\t// unescaped.\n\t\t\tif ( typeof sel === 'string' && sel.charAt(0) === '#' ) {\n\t\t\t\t// get row index from id\n\t\t\t\tvar rowObj = settings.aIds[ sel.replace( /^#/, '' ) ];\n\t\t\t\tif ( rowObj !== undefined ) {\n\t\t\t\t\treturn [ rowObj.idx ];\n\t\t\t\t}\n\t\n\t\t\t\t// need to fall through to jQuery in case there is DOM id that\n\t\t\t\t// matches\n\t\t\t}\n\t\n\t\t\t// Selector - jQuery selector string, array of nodes or jQuery object/\n\t\t\t// As jQuery's .filter() allows jQuery objects to be passed in filter,\n\t\t\t// it also allows arrays, so this will cope with all three options\n\t\t\treturn $(nodes)\n\t\t\t\t.filter( sel )\n\t\t\t\t.map( function () {\n\t\t\t\t\treturn this._DT_RowIndex;\n\t\t\t\t} )\n\t\t\t\t.toArray();\n\t\t};\n\t\n\t\treturn _selector_run( 'row', selector, run, settings, opts );\n\t};\n\t\n\t\n\t_api_register( 'rows()', function ( selector, opts ) {\n\t\t// argument shifting\n\t\tif ( selector === undefined ) {\n\t\t\tselector = '';\n\t\t}\n\t\telse if ( $.isPlainObject( selector ) ) {\n\t\t\topts = selector;\n\t\t\tselector = '';\n\t\t}\n\t\n\t\topts = _selector_opts( opts );\n\t\n\t\tvar inst = this.iterator( 'table', function ( settings ) {\n\t\t\treturn __row_selector( settings, selector, opts );\n\t\t}, 1 );\n\t\n\t\t// Want argument shifting here and in __row_selector?\n\t\tinst.selector.rows = selector;\n\t\tinst.selector.opts = opts;\n\t\n\t\treturn inst;\n\t} );\n\t\n\t_api_register( 'rows().nodes()', function () {\n\t\treturn this.iterator( 'row', function ( settings, row ) {\n\t\t\treturn settings.aoData[ row ].nTr || undefined;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_register( 'rows().data()', function () {\n\t\treturn this.iterator( true, 'rows', function ( settings, rows ) {\n\t\t\treturn _pluck_order( settings.aoData, rows, '_aData' );\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {\n\t\treturn this.iterator( 'row', function ( settings, row ) {\n\t\t\tvar r = settings.aoData[ row ];\n\t\t\treturn type === 'search' ? r._aFilterData : r._aSortData;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {\n\t\treturn this.iterator( 'row', function ( settings, row ) {\n\t\t\t_fnInvalidate( settings, row, src );\n\t\t} );\n\t} );\n\t\n\t_api_registerPlural( 'rows().indexes()', 'row().index()', function () {\n\t\treturn this.iterator( 'row', function ( settings, row ) {\n\t\t\treturn row;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'rows().ids()', 'row().id()', function ( hash ) {\n\t\tvar a = [];\n\t\tvar context = this.context;\n\t\n\t\t// `iterator` will drop undefined values, but in this case we want them\n\t\tfor ( var i=0, ien=context.length ; i<ien ; i++ ) {\n\t\t\tfor ( var j=0, jen=this[i].length ; j<jen ; j++ ) {\n\t\t\t\tvar id = context[i].rowIdFn( context[i].aoData[ this[i][j] ]._aData );\n\t\t\t\ta.push( (hash === true ? '#' : '' )+ id );\n\t\t\t}\n\t\t}\n\t\n\t\treturn new _Api( context, a );\n\t} );\n\t\n\t_api_registerPlural( 'rows().remove()', 'row().remove()', function () {\n\t\tvar that = this;\n\t\n\t\tthis.iterator( 'row', function ( settings, row, thatIdx ) {\n\t\t\tvar data = settings.aoData;\n\t\t\tvar rowData = data[ row ];\n\t\t\tvar i, ien, j, jen;\n\t\t\tvar loopRow, loopCells;\n\t\n\t\t\tdata.splice( row, 1 );\n\t\n\t\t\t// Update the cached indexes\n\t\t\tfor ( i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t\tloopRow = data[i];\n\t\t\t\tloopCells = loopRow.anCells;\n\t\n\t\t\t\t// Rows\n\t\t\t\tif ( loopRow.nTr !== null ) {\n\t\t\t\t\tloopRow.nTr._DT_RowIndex = i;\n\t\t\t\t}\n\t\n\t\t\t\t// Cells\n\t\t\t\tif ( loopCells !== null ) {\n\t\t\t\t\tfor ( j=0, jen=loopCells.length ; j<jen ; j++ ) {\n\t\t\t\t\t\tloopCells[j]._DT_CellIndex.row = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// Delete from the display arrays\n\t\t\t_fnDeleteIndex( settings.aiDisplayMaster, row );\n\t\t\t_fnDeleteIndex( settings.aiDisplay, row );\n\t\t\t_fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes\n\t\n\t\t\t// For server-side processing tables - subtract the deleted row from the count\n\t\t\tif ( settings._iRecordsDisplay > 0 ) {\n\t\t\t\tsettings._iRecordsDisplay--;\n\t\t\t}\n\t\n\t\t\t// Check for an 'overflow' they case for displaying the table\n\t\t\t_fnLengthOverflow( settings );\n\t\n\t\t\t// Remove the row's ID reference if there is one\n\t\t\tvar id = settings.rowIdFn( rowData._aData );\n\t\t\tif ( id !== undefined ) {\n\t\t\t\tdelete settings.aIds[ id ];\n\t\t\t}\n\t\t} );\n\t\n\t\tthis.iterator( 'table', function ( settings ) {\n\t\t\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\t\t\tsettings.aoData[i].idx = i;\n\t\t\t}\n\t\t} );\n\t\n\t\treturn this;\n\t} );\n\t\n\t\n\t_api_register( 'rows.add()', function ( rows ) {\n\t\tvar newRows = this.iterator( 'table', function ( settings ) {\n\t\t\t\tvar row, i, ien;\n\t\t\t\tvar out = [];\n\t\n\t\t\t\tfor ( i=0, ien=rows.length ; i<ien ; i++ ) {\n\t\t\t\t\trow = rows[i];\n\t\n\t\t\t\t\tif ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\n\t\t\t\t\t\tout.push( _fnAddTr( settings, row )[0] );\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tout.push( _fnAddData( settings, row ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\treturn out;\n\t\t\t}, 1 );\n\t\n\t\t// Return an Api.rows() extended instance, so rows().nodes() etc can be used\n\t\tvar modRows = this.rows( -1 );\n\t\tmodRows.pop();\n\t\t$.merge( modRows, newRows );\n\t\n\t\treturn modRows;\n\t} );\n\t\n\t\n\t\n\t\n\t\n\t/**\n\t *\n\t */\n\t_api_register( 'row()', function ( selector, opts ) {\n\t\treturn _selector_first( this.rows( selector, opts ) );\n\t} );\n\t\n\t\n\t_api_register( 'row().data()', function ( data ) {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( data === undefined ) {\n\t\t\t// Get\n\t\t\treturn ctx.length && this.length ?\n\t\t\t\tctx[0].aoData[ this[0] ]._aData :\n\t\t\t\tundefined;\n\t\t}\n\t\n\t\t// Set\n\t\tctx[0].aoData[ this[0] ]._aData = data;\n\t\n\t\t// Automatically invalidate\n\t\t_fnInvalidate( ctx[0], this[0], 'data' );\n\t\n\t\treturn this;\n\t} );\n\t\n\t\n\t_api_register( 'row().node()', function () {\n\t\tvar ctx = this.context;\n\t\n\t\treturn ctx.length && this.length ?\n\t\t\tctx[0].aoData[ this[0] ].nTr || null :\n\t\t\tnull;\n\t} );\n\t\n\t\n\t_api_register( 'row.add()', function ( row ) {\n\t\t// Allow a jQuery object to be passed in - only a single row is added from\n\t\t// it though - the first element in the set\n\t\tif ( row instanceof $ && row.length ) {\n\t\t\trow = row[0];\n\t\t}\n\t\n\t\tvar rows = this.iterator( 'table', function ( settings ) {\n\t\t\tif ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\n\t\t\t\treturn _fnAddTr( settings, row )[0];\n\t\t\t}\n\t\t\treturn _fnAddData( settings, row );\n\t\t} );\n\t\n\t\t// Return an Api.rows() extended instance, with the newly added row selected\n\t\treturn this.row( rows[0] );\n\t} );\n\t\n\t\n\t\n\tvar __details_add = function ( ctx, row, data, klass )\n\t{\n\t\t// Convert to array of TR elements\n\t\tvar rows = [];\n\t\tvar addRow = function ( r, k ) {\n\t\t\t// Recursion to allow for arrays of jQuery objects\n\t\t\tif ( $.isArray( r ) || r instanceof $ ) {\n\t\t\t\tfor ( var i=0, ien=r.length ; i<ien ; i++ ) {\n\t\t\t\t\taddRow( r[i], k );\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// If we get a TR element, then just add it directly - up to the dev\n\t\t\t// to add the correct number of columns etc\n\t\t\tif ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {\n\t\t\t\trows.push( r );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Otherwise create a row with a wrapper\n\t\t\t\tvar created = $('<tr><td/></tr>').addClass( k );\n\t\t\t\t$('td', created)\n\t\t\t\t\t.addClass( k )\n\t\t\t\t\t.html( r )\n\t\t\t\t\t[0].colSpan = _fnVisbleColumns( ctx );\n\t\n\t\t\t\trows.push( created[0] );\n\t\t\t}\n\t\t};\n\t\n\t\taddRow( data, klass );\n\t\n\t\tif ( row._details ) {\n\t\t\trow._details.detach();\n\t\t}\n\t\n\t\trow._details = $(rows);\n\t\n\t\t// If the children were already shown, that state should be retained\n\t\tif ( row._detailsShow ) {\n\t\t\trow._details.insertAfter( row.nTr );\n\t\t}\n\t};\n\t\n\t\n\tvar __details_remove = function ( api, idx )\n\t{\n\t\tvar ctx = api.context;\n\t\n\t\tif ( ctx.length ) {\n\t\t\tvar row = ctx[0].aoData[ idx !== undefined ? idx : api[0] ];\n\t\n\t\t\tif ( row && row._details ) {\n\t\t\t\trow._details.remove();\n\t\n\t\t\t\trow._detailsShow = undefined;\n\t\t\t\trow._details = undefined;\n\t\t\t}\n\t\t}\n\t};\n\t\n\t\n\tvar __details_display = function ( api, show ) {\n\t\tvar ctx = api.context;\n\t\n\t\tif ( ctx.length && api.length ) {\n\t\t\tvar row = ctx[0].aoData[ api[0] ];\n\t\n\t\t\tif ( row._details ) {\n\t\t\t\trow._detailsShow = show;\n\t\n\t\t\t\tif ( show ) {\n\t\t\t\t\trow._details.insertAfter( row.nTr );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\trow._details.detach();\n\t\t\t\t}\n\t\n\t\t\t\t__details_events( ctx[0] );\n\t\t\t}\n\t\t}\n\t};\n\t\n\t\n\tvar __details_events = function ( settings )\n\t{\n\t\tvar api = new _Api( settings );\n\t\tvar namespace = '.dt.DT_details';\n\t\tvar drawEvent = 'draw'+namespace;\n\t\tvar colvisEvent = 'column-visibility'+namespace;\n\t\tvar destroyEvent = 'destroy'+namespace;\n\t\tvar data = settings.aoData;\n\t\n\t\tapi.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );\n\t\n\t\tif ( _pluck( data, '_details' ).length > 0 ) {\n\t\t\t// On each draw, insert the required elements into the document\n\t\t\tapi.on( drawEvent, function ( e, ctx ) {\n\t\t\t\tif ( settings !== ctx ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tapi.rows( {page:'current'} ).eq(0).each( function (idx) {\n\t\t\t\t\t// Internal data grab\n\t\t\t\t\tvar row = data[ idx ];\n\t\n\t\t\t\t\tif ( row._detailsShow ) {\n\t\t\t\t\t\trow._details.insertAfter( row.nTr );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} );\n\t\n\t\t\t// Column visibility change - update the colspan\n\t\t\tapi.on( colvisEvent, function ( e, ctx, idx, vis ) {\n\t\t\t\tif ( settings !== ctx ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\t// Update the colspan for the details rows (note, only if it already has\n\t\t\t\t// a colspan)\n\t\t\t\tvar row, visible = _fnVisbleColumns( ctx );\n\t\n\t\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t\t\trow = data[i];\n\t\n\t\t\t\t\tif ( row._details ) {\n\t\t\t\t\t\trow._details.children('td[colspan]').attr('colspan', visible );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\n\t\t\t// Table destroyed - nuke any child rows\n\t\t\tapi.on( destroyEvent, function ( e, ctx ) {\n\t\t\t\tif ( settings !== ctx ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t\t\tif ( data[i]._details ) {\n\t\t\t\t\t\t__details_remove( api, i );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t};\n\t\n\t// Strings for the method names to help minification\n\tvar _emp = '';\n\tvar _child_obj = _emp+'row().child';\n\tvar _child_mth = _child_obj+'()';\n\t\n\t// data can be:\n\t//  tr\n\t//  string\n\t//  jQuery or array of any of the above\n\t_api_register( _child_mth, function ( data, klass ) {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( data === undefined ) {\n\t\t\t// get\n\t\t\treturn ctx.length && this.length ?\n\t\t\t\tctx[0].aoData[ this[0] ]._details :\n\t\t\t\tundefined;\n\t\t}\n\t\telse if ( data === true ) {\n\t\t\t// show\n\t\t\tthis.child.show();\n\t\t}\n\t\telse if ( data === false ) {\n\t\t\t// remove\n\t\t\t__details_remove( this );\n\t\t}\n\t\telse if ( ctx.length && this.length ) {\n\t\t\t// set\n\t\t\t__details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );\n\t\t}\n\t\n\t\treturn this;\n\t} );\n\t\n\t\n\t_api_register( [\n\t\t_child_obj+'.show()',\n\t\t_child_mth+'.show()' // only when `child()` was called with parameters (without\n\t], function ( show ) {   // it returns an object and this method is not executed)\n\t\t__details_display( this, true );\n\t\treturn this;\n\t} );\n\t\n\t\n\t_api_register( [\n\t\t_child_obj+'.hide()',\n\t\t_child_mth+'.hide()' // only when `child()` was called with parameters (without\n\t], function () {         // it returns an object and this method is not executed)\n\t\t__details_display( this, false );\n\t\treturn this;\n\t} );\n\t\n\t\n\t_api_register( [\n\t\t_child_obj+'.remove()',\n\t\t_child_mth+'.remove()' // only when `child()` was called with parameters (without\n\t], function () {           // it returns an object and this method is not executed)\n\t\t__details_remove( this );\n\t\treturn this;\n\t} );\n\t\n\t\n\t_api_register( _child_obj+'.isShown()', function () {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( ctx.length && this.length ) {\n\t\t\t// _detailsShown as false or undefined will fall through to return false\n\t\t\treturn ctx[0].aoData[ this[0] ]._detailsShow || false;\n\t\t}\n\t\treturn false;\n\t} );\n\t\n\t\n\t\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Columns\n\t *\n\t * {integer}           - column index (>=0 count from left, <0 count from right)\n\t * \"{integer}:visIdx\"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)\n\t * \"{integer}:visible\" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)\n\t * \"{string}:name\"     - column name\n\t * \"{string}\"          - jQuery selector on column header nodes\n\t *\n\t */\n\t\n\t// can be an array of these items, comma separated list, or an array of comma\n\t// separated lists\n\t\n\tvar __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;\n\t\n\t\n\t// r1 and r2 are redundant - but it means that the parameters match for the\n\t// iterator callback in columns().data()\n\tvar __columnData = function ( settings, column, r1, r2, rows ) {\n\t\tvar a = [];\n\t\tfor ( var row=0, ien=rows.length ; row<ien ; row++ ) {\n\t\t\ta.push( _fnGetCellData( settings, rows[row], column ) );\n\t\t}\n\t\treturn a;\n\t};\n\t\n\t\n\tvar __column_selector = function ( settings, selector, opts )\n\t{\n\t\tvar\n\t\t\tcolumns = settings.aoColumns,\n\t\t\tnames = _pluck( columns, 'sName' ),\n\t\t\tnodes = _pluck( columns, 'nTh' );\n\t\n\t\tvar run = function ( s ) {\n\t\t\tvar selInt = _intVal( s );\n\t\n\t\t\t// Selector - all\n\t\t\tif ( s === '' ) {\n\t\t\t\treturn _range( columns.length );\n\t\t\t}\n\t\n\t\t\t// Selector - index\n\t\t\tif ( selInt !== null ) {\n\t\t\t\treturn [ selInt >= 0 ?\n\t\t\t\t\tselInt : // Count from left\n\t\t\t\t\tcolumns.length + selInt // Count from right (+ because its a negative value)\n\t\t\t\t];\n\t\t\t}\n\t\n\t\t\t// Selector = function\n\t\t\tif ( typeof s === 'function' ) {\n\t\t\t\tvar rows = _selector_row_indexes( settings, opts );\n\t\n\t\t\t\treturn $.map( columns, function (col, idx) {\n\t\t\t\t\treturn s(\n\t\t\t\t\t\t\tidx,\n\t\t\t\t\t\t\t__columnData( settings, idx, 0, 0, rows ),\n\t\t\t\t\t\t\tnodes[ idx ]\n\t\t\t\t\t\t) ? idx : null;\n\t\t\t\t} );\n\t\t\t}\n\t\n\t\t\t// jQuery or string selector\n\t\t\tvar match = typeof s === 'string' ?\n\t\t\t\ts.match( __re_column_selector ) :\n\t\t\t\t'';\n\t\n\t\t\tif ( match ) {\n\t\t\t\tswitch( match[2] ) {\n\t\t\t\t\tcase 'visIdx':\n\t\t\t\t\tcase 'visible':\n\t\t\t\t\t\tvar idx = parseInt( match[1], 10 );\n\t\t\t\t\t\t// Visible index given, convert to column index\n\t\t\t\t\t\tif ( idx < 0 ) {\n\t\t\t\t\t\t\t// Counting from the right\n\t\t\t\t\t\t\tvar visColumns = $.map( columns, function (col,i) {\n\t\t\t\t\t\t\t\treturn col.bVisible ? i : null;\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\treturn [ visColumns[ visColumns.length + idx ] ];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Counting from the left\n\t\t\t\t\t\treturn [ _fnVisibleToColumnIndex( settings, idx ) ];\n\t\n\t\t\t\t\tcase 'name':\n\t\t\t\t\t\t// match by name. `names` is column index complete and in order\n\t\t\t\t\t\treturn $.map( names, function (name, i) {\n\t\t\t\t\t\t\treturn name === match[1] ? i : null;\n\t\t\t\t\t\t} );\n\t\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// Cell in the table body\n\t\t\tif ( s.nodeName && s._DT_CellIndex ) {\n\t\t\t\treturn [ s._DT_CellIndex.column ];\n\t\t\t}\n\t\n\t\t\t// jQuery selector on the TH elements for the columns\n\t\t\tvar jqResult = $( nodes )\n\t\t\t\t.filter( s )\n\t\t\t\t.map( function () {\n\t\t\t\t\treturn $.inArray( this, nodes ); // `nodes` is column index complete and in order\n\t\t\t\t} )\n\t\t\t\t.toArray();\n\t\n\t\t\tif ( jqResult.length || ! s.nodeName ) {\n\t\t\t\treturn jqResult;\n\t\t\t}\n\t\n\t\t\t// Otherwise a node which might have a `dt-column` data attribute, or be\n\t\t\t// a child or such an element\n\t\t\tvar host = $(s).closest('*[data-dt-column]');\n\t\t\treturn host.length ?\n\t\t\t\t[ host.data('dt-column') ] :\n\t\t\t\t[];\n\t\t};\n\t\n\t\treturn _selector_run( 'column', selector, run, settings, opts );\n\t};\n\t\n\t\n\tvar __setColumnVis = function ( settings, column, vis ) {\n\t\tvar\n\t\t\tcols = settings.aoColumns,\n\t\t\tcol  = cols[ column ],\n\t\t\tdata = settings.aoData,\n\t\t\trow, cells, i, ien, tr;\n\t\n\t\t// Get\n\t\tif ( vis === undefined ) {\n\t\t\treturn col.bVisible;\n\t\t}\n\t\n\t\t// Set\n\t\t// No change\n\t\tif ( col.bVisible === vis ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\tif ( vis ) {\n\t\t\t// Insert column\n\t\t\t// Need to decide if we should use appendChild or insertBefore\n\t\t\tvar insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );\n\t\n\t\t\tfor ( i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t\ttr = data[i].nTr;\n\t\t\t\tcells = data[i].anCells;\n\t\n\t\t\t\tif ( tr ) {\n\t\t\t\t\t// insertBefore can act like appendChild if 2nd arg is null\n\t\t\t\t\ttr.insertBefore( cells[ column ], cells[ insertBefore ] || null );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Remove column\n\t\t\t$( _pluck( settings.aoData, 'anCells', column ) ).detach();\n\t\t}\n\t\n\t\t// Common actions\n\t\tcol.bVisible = vis;\n\t\t_fnDrawHead( settings, settings.aoHeader );\n\t\t_fnDrawHead( settings, settings.aoFooter );\n\t\n\t\t_fnSaveState( settings );\n\t};\n\t\n\t\n\t_api_register( 'columns()', function ( selector, opts ) {\n\t\t// argument shifting\n\t\tif ( selector === undefined ) {\n\t\t\tselector = '';\n\t\t}\n\t\telse if ( $.isPlainObject( selector ) ) {\n\t\t\topts = selector;\n\t\t\tselector = '';\n\t\t}\n\t\n\t\topts = _selector_opts( opts );\n\t\n\t\tvar inst = this.iterator( 'table', function ( settings ) {\n\t\t\treturn __column_selector( settings, selector, opts );\n\t\t}, 1 );\n\t\n\t\t// Want argument shifting here and in _row_selector?\n\t\tinst.selector.cols = selector;\n\t\tinst.selector.opts = opts;\n\t\n\t\treturn inst;\n\t} );\n\t\n\t_api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {\n\t\treturn this.iterator( 'column', function ( settings, column ) {\n\t\t\treturn settings.aoColumns[column].nTh;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {\n\t\treturn this.iterator( 'column', function ( settings, column ) {\n\t\t\treturn settings.aoColumns[column].nTf;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'columns().data()', 'column().data()', function () {\n\t\treturn this.iterator( 'column-rows', __columnData, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {\n\t\treturn this.iterator( 'column', function ( settings, column ) {\n\t\t\treturn settings.aoColumns[column].mData;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {\n\t\treturn this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\n\t\t\treturn _pluck_order( settings.aoData, rows,\n\t\t\t\ttype === 'search' ? '_aFilterData' : '_aSortData', column\n\t\t\t);\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {\n\t\treturn this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\n\t\t\treturn _pluck_order( settings.aoData, rows, 'anCells', column ) ;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {\n\t\tvar ret = this.iterator( 'column', function ( settings, column ) {\n\t\t\tif ( vis === undefined ) {\n\t\t\t\treturn settings.aoColumns[ column ].bVisible;\n\t\t\t} // else\n\t\t\t__setColumnVis( settings, column, vis );\n\t\t} );\n\t\n\t\t// Group the column visibility changes\n\t\tif ( vis !== undefined ) {\n\t\t\t// Second loop once the first is done for events\n\t\t\tthis.iterator( 'column', function ( settings, column ) {\n\t\t\t\t_fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis, calc] );\n\t\t\t} );\n\t\n\t\t\tif ( calc === undefined || calc ) {\n\t\t\t\tthis.columns.adjust();\n\t\t\t}\n\t\t}\n\t\n\t\treturn ret;\n\t} );\n\t\n\t_api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {\n\t\treturn this.iterator( 'column', function ( settings, column ) {\n\t\t\treturn type === 'visible' ?\n\t\t\t\t_fnColumnIndexToVisible( settings, column ) :\n\t\t\t\tcolumn;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_register( 'columns.adjust()', function () {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnAdjustColumnSizing( settings );\n\t\t}, 1 );\n\t} );\n\t\n\t_api_register( 'column.index()', function ( type, idx ) {\n\t\tif ( this.context.length !== 0 ) {\n\t\t\tvar ctx = this.context[0];\n\t\n\t\t\tif ( type === 'fromVisible' || type === 'toData' ) {\n\t\t\t\treturn _fnVisibleToColumnIndex( ctx, idx );\n\t\t\t}\n\t\t\telse if ( type === 'fromData' || type === 'toVisible' ) {\n\t\t\t\treturn _fnColumnIndexToVisible( ctx, idx );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\t_api_register( 'column()', function ( selector, opts ) {\n\t\treturn _selector_first( this.columns( selector, opts ) );\n\t} );\n\t\n\t\n\t\n\tvar __cell_selector = function ( settings, selector, opts )\n\t{\n\t\tvar data = settings.aoData;\n\t\tvar rows = _selector_row_indexes( settings, opts );\n\t\tvar cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );\n\t\tvar allCells = $( [].concat.apply([], cells) );\n\t\tvar row;\n\t\tvar columns = settings.aoColumns.length;\n\t\tvar a, i, ien, j, o, host;\n\t\n\t\tvar run = function ( s ) {\n\t\t\tvar fnSelector = typeof s === 'function';\n\t\n\t\t\tif ( s === null || s === undefined || fnSelector ) {\n\t\t\t\t// All cells and function selectors\n\t\t\t\ta = [];\n\t\n\t\t\t\tfor ( i=0, ien=rows.length ; i<ien ; i++ ) {\n\t\t\t\t\trow = rows[i];\n\t\n\t\t\t\t\tfor ( j=0 ; j<columns ; j++ ) {\n\t\t\t\t\t\to = {\n\t\t\t\t\t\t\trow: row,\n\t\t\t\t\t\t\tcolumn: j\n\t\t\t\t\t\t};\n\t\n\t\t\t\t\t\tif ( fnSelector ) {\n\t\t\t\t\t\t\t// Selector - function\n\t\t\t\t\t\t\thost = data[ row ];\n\t\n\t\t\t\t\t\t\tif ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {\n\t\t\t\t\t\t\t\ta.push( o );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// Selector - all\n\t\t\t\t\t\t\ta.push( o );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\treturn a;\n\t\t\t}\n\t\t\t\n\t\t\t// Selector - index\n\t\t\tif ( $.isPlainObject( s ) ) {\n\t\t\t\treturn [s];\n\t\t\t}\n\t\n\t\t\t// Selector - jQuery filtered cells\n\t\t\tvar jqResult = allCells\n\t\t\t\t.filter( s )\n\t\t\t\t.map( function (i, el) {\n\t\t\t\t\treturn { // use a new object, in case someone changes the values\n\t\t\t\t\t\trow:    el._DT_CellIndex.row,\n\t\t\t\t\t\tcolumn: el._DT_CellIndex.column\n\t \t\t\t\t};\n\t\t\t\t} )\n\t\t\t\t.toArray();\n\t\n\t\t\tif ( jqResult.length || ! s.nodeName ) {\n\t\t\t\treturn jqResult;\n\t\t\t}\n\t\n\t\t\t// Otherwise the selector is a node, and there is one last option - the\n\t\t\t// element might be a child of an element which has dt-row and dt-column\n\t\t\t// data attributes\n\t\t\thost = $(s).closest('*[data-dt-row]');\n\t\t\treturn host.length ?\n\t\t\t\t[ {\n\t\t\t\t\trow: host.data('dt-row'),\n\t\t\t\t\tcolumn: host.data('dt-column')\n\t\t\t\t} ] :\n\t\t\t\t[];\n\t\t};\n\t\n\t\treturn _selector_run( 'cell', selector, run, settings, opts );\n\t};\n\t\n\t\n\t\n\t\n\t_api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {\n\t\t// Argument shifting\n\t\tif ( $.isPlainObject( rowSelector ) ) {\n\t\t\t// Indexes\n\t\t\tif ( rowSelector.row === undefined ) {\n\t\t\t\t// Selector options in first parameter\n\t\t\t\topts = rowSelector;\n\t\t\t\trowSelector = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Cell index objects in first parameter\n\t\t\t\topts = columnSelector;\n\t\t\t\tcolumnSelector = null;\n\t\t\t}\n\t\t}\n\t\tif ( $.isPlainObject( columnSelector ) ) {\n\t\t\topts = columnSelector;\n\t\t\tcolumnSelector = null;\n\t\t}\n\t\n\t\t// Cell selector\n\t\tif ( columnSelector === null || columnSelector === undefined ) {\n\t\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t\treturn __cell_selector( settings, rowSelector, _selector_opts( opts ) );\n\t\t\t} );\n\t\t}\n\t\n\t\t// Row + column selector\n\t\tvar columns = this.columns( columnSelector, opts );\n\t\tvar rows = this.rows( rowSelector, opts );\n\t\tvar a, i, ien, j, jen;\n\t\n\t\tvar cells = this.iterator( 'table', function ( settings, idx ) {\n\t\t\ta = [];\n\t\n\t\t\tfor ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {\n\t\t\t\tfor ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {\n\t\t\t\t\ta.push( {\n\t\t\t\t\t\trow:    rows[idx][i],\n\t\t\t\t\t\tcolumn: columns[idx][j]\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn a;\n\t\t}, 1 );\n\t\n\t\t$.extend( cells.selector, {\n\t\t\tcols: columnSelector,\n\t\t\trows: rowSelector,\n\t\t\topts: opts\n\t\t} );\n\t\n\t\treturn cells;\n\t} );\n\t\n\t\n\t_api_registerPlural( 'cells().nodes()', 'cell().node()', function () {\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\tvar data = settings.aoData[ row ];\n\t\n\t\t\treturn data && data.anCells ?\n\t\t\t\tdata.anCells[ column ] :\n\t\t\t\tundefined;\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_register( 'cells().data()', function () {\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\treturn _fnGetCellData( settings, row, column );\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {\n\t\ttype = type === 'search' ? '_aFilterData' : '_aSortData';\n\t\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\treturn settings.aoData[ row ][ type ][ column ];\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\treturn _fnGetCellData( settings, row, column, type );\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'cells().indexes()', 'cell().index()', function () {\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\treturn {\n\t\t\t\trow: row,\n\t\t\t\tcolumn: column,\n\t\t\t\tcolumnVisible: _fnColumnIndexToVisible( settings, column )\n\t\t\t};\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\t_fnInvalidate( settings, row, src, column );\n\t\t} );\n\t} );\n\t\n\t\n\t\n\t_api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {\n\t\treturn _selector_first( this.cells( rowSelector, columnSelector, opts ) );\n\t} );\n\t\n\t\n\t_api_register( 'cell().data()', function ( data ) {\n\t\tvar ctx = this.context;\n\t\tvar cell = this[0];\n\t\n\t\tif ( data === undefined ) {\n\t\t\t// Get\n\t\t\treturn ctx.length && cell.length ?\n\t\t\t\t_fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :\n\t\t\t\tundefined;\n\t\t}\n\t\n\t\t// Set\n\t\t_fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );\n\t\t_fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );\n\t\n\t\treturn this;\n\t} );\n\t\n\t\n\t\n\t/**\n\t * Get current ordering (sorting) that has been applied to the table.\n\t *\n\t * @returns {array} 2D array containing the sorting information for the first\n\t *   table in the current context. Each element in the parent array represents\n\t *   a column being sorted upon (i.e. multi-sorting with two columns would have\n\t *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is\n\t *   the column index that the sorting condition applies to, the second is the\n\t *   direction of the sort (`desc` or `asc`) and, optionally, the third is the\n\t *   index of the sorting order from the `column.sorting` initialisation array.\n\t *//**\n\t * Set the ordering for the table.\n\t *\n\t * @param {integer} order Column index to sort upon.\n\t * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)\n\t * @returns {DataTables.Api} this\n\t *//**\n\t * Set the ordering for the table.\n\t *\n\t * @param {array} order 1D array of sorting information to be applied.\n\t * @param {array} [...] Optional additional sorting conditions\n\t * @returns {DataTables.Api} this\n\t *//**\n\t * Set the ordering for the table.\n\t *\n\t * @param {array} order 2D array of sorting information to be applied.\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'order()', function ( order, dir ) {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( order === undefined ) {\n\t\t\t// get\n\t\t\treturn ctx.length !== 0 ?\n\t\t\t\tctx[0].aaSorting :\n\t\t\t\tundefined;\n\t\t}\n\t\n\t\t// set\n\t\tif ( typeof order === 'number' ) {\n\t\t\t// Simple column / direction passed in\n\t\t\torder = [ [ order, dir ] ];\n\t\t}\n\t\telse if ( order.length && ! $.isArray( order[0] ) ) {\n\t\t\t// Arguments passed in (list of 1D arrays)\n\t\t\torder = Array.prototype.slice.call( arguments );\n\t\t}\n\t\t// otherwise a 2D array was passed in\n\t\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\tsettings.aaSorting = order.slice();\n\t\t} );\n\t} );\n\t\n\t\n\t/**\n\t * Attach a sort listener to an element for a given column\n\t *\n\t * @param {node|jQuery|string} node Identifier for the element(s) to attach the\n\t *   listener to. This can take the form of a single DOM node, a jQuery\n\t *   collection of nodes or a jQuery selector which will identify the node(s).\n\t * @param {integer} column the column that a click on this node will sort on\n\t * @param {function} [callback] callback function when sort is run\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'order.listener()', function ( node, column, callback ) {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnSortAttachListener( settings, node, column, callback );\n\t\t} );\n\t} );\n\t\n\t\n\t_api_register( 'order.fixed()', function ( set ) {\n\t\tif ( ! set ) {\n\t\t\tvar ctx = this.context;\n\t\t\tvar fixed = ctx.length ?\n\t\t\t\tctx[0].aaSortingFixed :\n\t\t\t\tundefined;\n\t\n\t\t\treturn $.isArray( fixed ) ?\n\t\t\t\t{ pre: fixed } :\n\t\t\t\tfixed;\n\t\t}\n\t\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\tsettings.aaSortingFixed = $.extend( true, {}, set );\n\t\t} );\n\t} );\n\t\n\t\n\t// Order by the selected column(s)\n\t_api_register( [\n\t\t'columns().order()',\n\t\t'column().order()'\n\t], function ( dir ) {\n\t\tvar that = this;\n\t\n\t\treturn this.iterator( 'table', function ( settings, i ) {\n\t\t\tvar sort = [];\n\t\n\t\t\t$.each( that[i], function (j, col) {\n\t\t\t\tsort.push( [ col, dir ] );\n\t\t\t} );\n\t\n\t\t\tsettings.aaSorting = sort;\n\t\t} );\n\t} );\n\t\n\t\n\t\n\t_api_register( 'search()', function ( input, regex, smart, caseInsen ) {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( input === undefined ) {\n\t\t\t// get\n\t\t\treturn ctx.length !== 0 ?\n\t\t\t\tctx[0].oPreviousSearch.sSearch :\n\t\t\t\tundefined;\n\t\t}\n\t\n\t\t// set\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\tif ( ! settings.oFeatures.bFilter ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t_fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {\n\t\t\t\t\"sSearch\": input+\"\",\n\t\t\t\t\"bRegex\":  regex === null ? false : regex,\n\t\t\t\t\"bSmart\":  smart === null ? true  : smart,\n\t\t\t\t\"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n\t\t\t} ), 1 );\n\t\t} );\n\t} );\n\t\n\t\n\t_api_registerPlural(\n\t\t'columns().search()',\n\t\t'column().search()',\n\t\tfunction ( input, regex, smart, caseInsen ) {\n\t\t\treturn this.iterator( 'column', function ( settings, column ) {\n\t\t\t\tvar preSearch = settings.aoPreSearchCols;\n\t\n\t\t\t\tif ( input === undefined ) {\n\t\t\t\t\t// get\n\t\t\t\t\treturn preSearch[ column ].sSearch;\n\t\t\t\t}\n\t\n\t\t\t\t// set\n\t\t\t\tif ( ! settings.oFeatures.bFilter ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\t$.extend( preSearch[ column ], {\n\t\t\t\t\t\"sSearch\": input+\"\",\n\t\t\t\t\t\"bRegex\":  regex === null ? false : regex,\n\t\t\t\t\t\"bSmart\":  smart === null ? true  : smart,\n\t\t\t\t\t\"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n\t\t\t\t} );\n\t\n\t\t\t\t_fnFilterComplete( settings, settings.oPreviousSearch, 1 );\n\t\t\t} );\n\t\t}\n\t);\n\t\n\t/*\n\t * State API methods\n\t */\n\t\n\t_api_register( 'state()', function () {\n\t\treturn this.context.length ?\n\t\t\tthis.context[0].oSavedState :\n\t\t\tnull;\n\t} );\n\t\n\t\n\t_api_register( 'state.clear()', function () {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t// Save an empty object\n\t\t\tsettings.fnStateSaveCallback.call( settings.oInstance, settings, {} );\n\t\t} );\n\t} );\n\t\n\t\n\t_api_register( 'state.loaded()', function () {\n\t\treturn this.context.length ?\n\t\t\tthis.context[0].oLoadedState :\n\t\t\tnull;\n\t} );\n\t\n\t\n\t_api_register( 'state.save()', function () {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnSaveState( settings );\n\t\t} );\n\t} );\n\t\n\t\n\t\n\t/**\n\t * Provide a common method for plug-ins to check the version of DataTables being\n\t * used, in order to ensure compatibility.\n\t *\n\t *  @param {string} version Version string to check for, in the format \"X.Y.Z\".\n\t *    Note that the formats \"X\" and \"X.Y\" are also acceptable.\n\t *  @returns {boolean} true if this version of DataTables is greater or equal to\n\t *    the required version, or false if this version of DataTales is not\n\t *    suitable\n\t *  @static\n\t *  @dtopt API-Static\n\t *\n\t *  @example\n\t *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );\n\t */\n\tDataTable.versionCheck = DataTable.fnVersionCheck = function( version )\n\t{\n\t\tvar aThis = DataTable.version.split('.');\n\t\tvar aThat = version.split('.');\n\t\tvar iThis, iThat;\n\t\n\t\tfor ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {\n\t\t\tiThis = parseInt( aThis[i], 10 ) || 0;\n\t\t\tiThat = parseInt( aThat[i], 10 ) || 0;\n\t\n\t\t\t// Parts are the same, keep comparing\n\t\t\tif (iThis === iThat) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// Parts are different, return immediately\n\t\t\treturn iThis > iThat;\n\t\t}\n\t\n\t\treturn true;\n\t};\n\t\n\t\n\t/**\n\t * Check if a `<table>` node is a DataTable table already or not.\n\t *\n\t *  @param {node|jquery|string} table Table node, jQuery object or jQuery\n\t *      selector for the table to test. Note that if more than more than one\n\t *      table is passed on, only the first will be checked\n\t *  @returns {boolean} true the table given is a DataTable, or false otherwise\n\t *  @static\n\t *  @dtopt API-Static\n\t *\n\t *  @example\n\t *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {\n\t *      $('#example').dataTable();\n\t *    }\n\t */\n\tDataTable.isDataTable = DataTable.fnIsDataTable = function ( table )\n\t{\n\t\tvar t = $(table).get(0);\n\t\tvar is = false;\n\t\n\t\tif ( table instanceof DataTable.Api ) {\n\t\t\treturn true;\n\t\t}\n\t\n\t\t$.each( DataTable.settings, function (i, o) {\n\t\t\tvar head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;\n\t\t\tvar foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;\n\t\n\t\t\tif ( o.nTable === t || head === t || foot === t ) {\n\t\t\t\tis = true;\n\t\t\t}\n\t\t} );\n\t\n\t\treturn is;\n\t};\n\t\n\t\n\t/**\n\t * Get all DataTable tables that have been initialised - optionally you can\n\t * select to get only currently visible tables.\n\t *\n\t *  @param {boolean} [visible=false] Flag to indicate if you want all (default)\n\t *    or visible tables only.\n\t *  @returns {array} Array of `table` nodes (not DataTable instances) which are\n\t *    DataTables\n\t *  @static\n\t *  @dtopt API-Static\n\t *\n\t *  @example\n\t *    $.each( $.fn.dataTable.tables(true), function () {\n\t *      $(table).DataTable().columns.adjust();\n\t *    } );\n\t */\n\tDataTable.tables = DataTable.fnTables = function ( visible )\n\t{\n\t\tvar api = false;\n\t\n\t\tif ( $.isPlainObject( visible ) ) {\n\t\t\tapi = visible.api;\n\t\t\tvisible = visible.visible;\n\t\t}\n\t\n\t\tvar a = $.map( DataTable.settings, function (o) {\n\t\t\tif ( !visible || (visible && $(o.nTable).is(':visible')) ) {\n\t\t\t\treturn o.nTable;\n\t\t\t}\n\t\t} );\n\t\n\t\treturn api ?\n\t\t\tnew _Api( a ) :\n\t\t\ta;\n\t};\n\t\n\t\n\t/**\n\t * Convert from camel case parameters to Hungarian notation. This is made public\n\t * for the extensions to provide the same ability as DataTables core to accept\n\t * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase\n\t * parameters.\n\t *\n\t *  @param {object} src The model object which holds all parameters that can be\n\t *    mapped.\n\t *  @param {object} user The object to convert from camel case to Hungarian.\n\t *  @param {boolean} force When set to `true`, properties which already have a\n\t *    Hungarian value in the `user` object will be overwritten. Otherwise they\n\t *    won't be.\n\t */\n\tDataTable.camelToHungarian = _fnCamelToHungarian;\n\t\n\t\n\t\n\t/**\n\t *\n\t */\n\t_api_register( '$()', function ( selector, opts ) {\n\t\tvar\n\t\t\trows   = this.rows( opts ).nodes(), // Get all rows\n\t\t\tjqRows = $(rows);\n\t\n\t\treturn $( [].concat(\n\t\t\tjqRows.filter( selector ).toArray(),\n\t\t\tjqRows.find( selector ).toArray()\n\t\t) );\n\t} );\n\t\n\t\n\t// jQuery functions to operate on the tables\n\t$.each( [ 'on', 'one', 'off' ], function (i, key) {\n\t\t_api_register( key+'()', function ( /* event, handler */ ) {\n\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\n\t\t\t// Add the `dt` namespace automatically if it isn't already present\n\t\t\targs[0] = $.map( args[0].split( /\\s/ ), function ( e ) {\n\t\t\t\treturn ! e.match(/\\.dt\\b/) ?\n\t\t\t\t\te+'.dt' :\n\t\t\t\t\te;\n\t\t\t\t} ).join( ' ' );\n\t\n\t\t\tvar inst = $( this.tables().nodes() );\n\t\t\tinst[key].apply( inst, args );\n\t\t\treturn this;\n\t\t} );\n\t} );\n\t\n\t\n\t_api_register( 'clear()', function () {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnClearTable( settings );\n\t\t} );\n\t} );\n\t\n\t\n\t_api_register( 'settings()', function () {\n\t\treturn new _Api( this.context, this.context );\n\t} );\n\t\n\t\n\t_api_register( 'init()', function () {\n\t\tvar ctx = this.context;\n\t\treturn ctx.length ? ctx[0].oInit : null;\n\t} );\n\t\n\t\n\t_api_register( 'data()', function () {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\treturn _pluck( settings.aoData, '_aData' );\n\t\t} ).flatten();\n\t} );\n\t\n\t\n\t_api_register( 'destroy()', function ( remove ) {\n\t\tremove = remove || false;\n\t\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\tvar orig      = settings.nTableWrapper.parentNode;\n\t\t\tvar classes   = settings.oClasses;\n\t\t\tvar table     = settings.nTable;\n\t\t\tvar tbody     = settings.nTBody;\n\t\t\tvar thead     = settings.nTHead;\n\t\t\tvar tfoot     = settings.nTFoot;\n\t\t\tvar jqTable   = $(table);\n\t\t\tvar jqTbody   = $(tbody);\n\t\t\tvar jqWrapper = $(settings.nTableWrapper);\n\t\t\tvar rows      = $.map( settings.aoData, function (r) { return r.nTr; } );\n\t\t\tvar i, ien;\n\t\n\t\t\t// Flag to note that the table is currently being destroyed - no action\n\t\t\t// should be taken\n\t\t\tsettings.bDestroying = true;\n\t\n\t\t\t// Fire off the destroy callbacks for plug-ins etc\n\t\t\t_fnCallbackFire( settings, \"aoDestroyCallback\", \"destroy\", [settings] );\n\t\n\t\t\t// If not being removed from the document, make all columns visible\n\t\t\tif ( ! remove ) {\n\t\t\t\tnew _Api( settings ).columns().visible( true );\n\t\t\t}\n\t\n\t\t\t// Blitz all `DT` namespaced events (these are internal events, the\n\t\t\t// lowercase, `dt` events are user subscribed and they are responsible\n\t\t\t// for removing them\n\t\t\tjqWrapper.off('.DT').find(':not(tbody *)').off('.DT');\n\t\t\t$(window).off('.DT-'+settings.sInstance);\n\t\n\t\t\t// When scrolling we had to break the table up - restore it\n\t\t\tif ( table != thead.parentNode ) {\n\t\t\t\tjqTable.children('thead').detach();\n\t\t\t\tjqTable.append( thead );\n\t\t\t}\n\t\n\t\t\tif ( tfoot && table != tfoot.parentNode ) {\n\t\t\t\tjqTable.children('tfoot').detach();\n\t\t\t\tjqTable.append( tfoot );\n\t\t\t}\n\t\n\t\t\tsettings.aaSorting = [];\n\t\t\tsettings.aaSortingFixed = [];\n\t\t\t_fnSortingClasses( settings );\n\t\n\t\t\t$( rows ).removeClass( settings.asStripeClasses.join(' ') );\n\t\n\t\t\t$('th, td', thead).removeClass( classes.sSortable+' '+\n\t\t\t\tclasses.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone\n\t\t\t);\n\t\n\t\t\t// Add the TR elements back into the table in their original order\n\t\t\tjqTbody.children().detach();\n\t\t\tjqTbody.append( rows );\n\t\n\t\t\t// Remove the DataTables generated nodes, events and classes\n\t\t\tvar removedMethod = remove ? 'remove' : 'detach';\n\t\t\tjqTable[ removedMethod ]();\n\t\t\tjqWrapper[ removedMethod ]();\n\t\n\t\t\t// If we need to reattach the table to the document\n\t\t\tif ( ! remove && orig ) {\n\t\t\t\t// insertBefore acts like appendChild if !arg[1]\n\t\t\t\torig.insertBefore( table, settings.nTableReinsertBefore );\n\t\n\t\t\t\t// Restore the width of the original table - was read from the style property,\n\t\t\t\t// so we can restore directly to that\n\t\t\t\tjqTable\n\t\t\t\t\t.css( 'width', settings.sDestroyWidth )\n\t\t\t\t\t.removeClass( classes.sTable );\n\t\n\t\t\t\t// If the were originally stripe classes - then we add them back here.\n\t\t\t\t// Note this is not fool proof (for example if not all rows had stripe\n\t\t\t\t// classes - but it's a good effort without getting carried away\n\t\t\t\tien = settings.asDestroyStripes.length;\n\t\n\t\t\t\tif ( ien ) {\n\t\t\t\t\tjqTbody.children().each( function (i) {\n\t\t\t\t\t\t$(this).addClass( settings.asDestroyStripes[i % ien] );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t/* Remove the settings object from the settings array */\n\t\t\tvar idx = $.inArray( settings, DataTable.settings );\n\t\t\tif ( idx !== -1 ) {\n\t\t\t\tDataTable.settings.splice( idx, 1 );\n\t\t\t}\n\t\t} );\n\t} );\n\t\n\t\n\t// Add the `every()` method for rows, columns and cells in a compact form\n\t$.each( [ 'column', 'row', 'cell' ], function ( i, type ) {\n\t\t_api_register( type+'s().every()', function ( fn ) {\n\t\t\tvar opts = this.selector.opts;\n\t\t\tvar api = this;\n\t\n\t\t\treturn this.iterator( type, function ( settings, arg1, arg2, arg3, arg4 ) {\n\t\t\t\t// Rows and columns:\n\t\t\t\t//  arg1 - index\n\t\t\t\t//  arg2 - table counter\n\t\t\t\t//  arg3 - loop counter\n\t\t\t\t//  arg4 - undefined\n\t\t\t\t// Cells:\n\t\t\t\t//  arg1 - row index\n\t\t\t\t//  arg2 - column index\n\t\t\t\t//  arg3 - table counter\n\t\t\t\t//  arg4 - loop counter\n\t\t\t\tfn.call(\n\t\t\t\t\tapi[ type ](\n\t\t\t\t\t\targ1,\n\t\t\t\t\t\ttype==='cell' ? arg2 : opts,\n\t\t\t\t\t\ttype==='cell' ? opts : undefined\n\t\t\t\t\t),\n\t\t\t\t\targ1, arg2, arg3, arg4\n\t\t\t\t);\n\t\t\t} );\n\t\t} );\n\t} );\n\t\n\t\n\t// i18n method for extensions to be able to use the language object from the\n\t// DataTable\n\t_api_register( 'i18n()', function ( token, def, plural ) {\n\t\tvar ctx = this.context[0];\n\t\tvar resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );\n\t\n\t\tif ( resolved === undefined ) {\n\t\t\tresolved = def;\n\t\t}\n\t\n\t\tif ( plural !== undefined && $.isPlainObject( resolved ) ) {\n\t\t\tresolved = resolved[ plural ] !== undefined ?\n\t\t\t\tresolved[ plural ] :\n\t\t\t\tresolved._;\n\t\t}\n\t\n\t\treturn resolved.replace( '%d', plural ); // nb: plural might be undefined,\n\t} );\n\n\t/**\n\t * Version string for plug-ins to check compatibility. Allowed format is\n\t * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used\n\t * only for non-release builds. See http://semver.org/ for more information.\n\t *  @member\n\t *  @type string\n\t *  @default Version number\n\t */\n\tDataTable.version = \"1.10.16\";\n\n\t/**\n\t * Private data store, containing all of the settings objects that are\n\t * created for the tables on a given page.\n\t *\n\t * Note that the `DataTable.settings` object is aliased to\n\t * `jQuery.fn.dataTableExt` through which it may be accessed and\n\t * manipulated, or `jQuery.fn.dataTable.settings`.\n\t *  @member\n\t *  @type array\n\t *  @default []\n\t *  @private\n\t */\n\tDataTable.settings = [];\n\n\t/**\n\t * Object models container, for the various models that DataTables has\n\t * available to it. These models define the objects that are used to hold\n\t * the active state and configuration of the table.\n\t *  @namespace\n\t */\n\tDataTable.models = {};\n\t\n\t\n\t\n\t/**\n\t * Template object for the way in which DataTables holds information about\n\t * search information for the global filter and individual column filters.\n\t *  @namespace\n\t */\n\tDataTable.models.oSearch = {\n\t\t/**\n\t\t * Flag to indicate if the filtering should be case insensitive or not\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t */\n\t\t\"bCaseInsensitive\": true,\n\t\n\t\t/**\n\t\t * Applied search term\n\t\t *  @type string\n\t\t *  @default <i>Empty string</i>\n\t\t */\n\t\t\"sSearch\": \"\",\n\t\n\t\t/**\n\t\t * Flag to indicate if the search term should be interpreted as a\n\t\t * regular expression (true) or not (false) and therefore and special\n\t\t * regex characters escaped.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t */\n\t\t\"bRegex\": false,\n\t\n\t\t/**\n\t\t * Flag to indicate if DataTables is to use its smart filtering or not.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t */\n\t\t\"bSmart\": true\n\t};\n\t\n\t\n\t\n\t\n\t/**\n\t * Template object for the way in which DataTables holds information about\n\t * each individual row. This is the object format used for the settings\n\t * aoData array.\n\t *  @namespace\n\t */\n\tDataTable.models.oRow = {\n\t\t/**\n\t\t * TR element for the row\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTr\": null,\n\t\n\t\t/**\n\t\t * Array of TD elements for each row. This is null until the row has been\n\t\t * created.\n\t\t *  @type array nodes\n\t\t *  @default []\n\t\t */\n\t\t\"anCells\": null,\n\t\n\t\t/**\n\t\t * Data object from the original data source for the row. This is either\n\t\t * an array if using the traditional form of DataTables, or an object if\n\t\t * using mData options. The exact type will depend on the passed in\n\t\t * data from the data source, or will be an array if using DOM a data\n\t\t * source.\n\t\t *  @type array|object\n\t\t *  @default []\n\t\t */\n\t\t\"_aData\": [],\n\t\n\t\t/**\n\t\t * Sorting data cache - this array is ostensibly the same length as the\n\t\t * number of columns (although each index is generated only as it is\n\t\t * needed), and holds the data that is used for sorting each column in the\n\t\t * row. We do this cache generation at the start of the sort in order that\n\t\t * the formatting of the sort data need be done only once for each cell\n\t\t * per sort. This array should not be read from or written to by anything\n\t\t * other than the master sorting methods.\n\t\t *  @type array\n\t\t *  @default null\n\t\t *  @private\n\t\t */\n\t\t\"_aSortData\": null,\n\t\n\t\t/**\n\t\t * Per cell filtering data cache. As per the sort data cache, used to\n\t\t * increase the performance of the filtering in DataTables\n\t\t *  @type array\n\t\t *  @default null\n\t\t *  @private\n\t\t */\n\t\t\"_aFilterData\": null,\n\t\n\t\t/**\n\t\t * Filtering data cache. This is the same as the cell filtering cache, but\n\t\t * in this case a string rather than an array. This is easily computed with\n\t\t * a join on `_aFilterData`, but is provided as a cache so the join isn't\n\t\t * needed on every search (memory traded for performance)\n\t\t *  @type array\n\t\t *  @default null\n\t\t *  @private\n\t\t */\n\t\t\"_sFilterRow\": null,\n\t\n\t\t/**\n\t\t * Cache of the class name that DataTables has applied to the row, so we\n\t\t * can quickly look at this variable rather than needing to do a DOM check\n\t\t * on className for the nTr property.\n\t\t *  @type string\n\t\t *  @default <i>Empty string</i>\n\t\t *  @private\n\t\t */\n\t\t\"_sRowStripe\": \"\",\n\t\n\t\t/**\n\t\t * Denote if the original data source was from the DOM, or the data source\n\t\t * object. This is used for invalidating data, so DataTables can\n\t\t * automatically read data from the original source, unless uninstructed\n\t\t * otherwise.\n\t\t *  @type string\n\t\t *  @default null\n\t\t *  @private\n\t\t */\n\t\t\"src\": null,\n\t\n\t\t/**\n\t\t * Index in the aoData array. This saves an indexOf lookup when we have the\n\t\t * object, but want to know the index\n\t\t *  @type integer\n\t\t *  @default -1\n\t\t *  @private\n\t\t */\n\t\t\"idx\": -1\n\t};\n\t\n\t\n\t/**\n\t * Template object for the column information object in DataTables. This object\n\t * is held in the settings aoColumns array and contains all the information that\n\t * DataTables needs about each individual column.\n\t *\n\t * Note that this object is related to {@link DataTable.defaults.column}\n\t * but this one is the internal data store for DataTables's cache of columns.\n\t * It should NOT be manipulated outside of DataTables. Any configuration should\n\t * be done through the initialisation options.\n\t *  @namespace\n\t */\n\tDataTable.models.oColumn = {\n\t\t/**\n\t\t * Column index. This could be worked out on-the-fly with $.inArray, but it\n\t\t * is faster to just hold it as a variable\n\t\t *  @type integer\n\t\t *  @default null\n\t\t */\n\t\t\"idx\": null,\n\t\n\t\t/**\n\t\t * A list of the columns that sorting should occur on when this column\n\t\t * is sorted. That this property is an array allows multi-column sorting\n\t\t * to be defined for a column (for example first name / last name columns\n\t\t * would benefit from this). The values are integers pointing to the\n\t\t * columns to be sorted on (typically it will be a single integer pointing\n\t\t * at itself, but that doesn't need to be the case).\n\t\t *  @type array\n\t\t */\n\t\t\"aDataSort\": null,\n\t\n\t\t/**\n\t\t * Define the sorting directions that are applied to the column, in sequence\n\t\t * as the column is repeatedly sorted upon - i.e. the first value is used\n\t\t * as the sorting direction when the column if first sorted (clicked on).\n\t\t * Sort it again (click again) and it will move on to the next index.\n\t\t * Repeat until loop.\n\t\t *  @type array\n\t\t */\n\t\t\"asSorting\": null,\n\t\n\t\t/**\n\t\t * Flag to indicate if the column is searchable, and thus should be included\n\t\t * in the filtering or not.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bSearchable\": null,\n\t\n\t\t/**\n\t\t * Flag to indicate if the column is sortable or not.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bSortable\": null,\n\t\n\t\t/**\n\t\t * Flag to indicate if the column is currently visible in the table or not\n\t\t *  @type boolean\n\t\t */\n\t\t\"bVisible\": null,\n\t\n\t\t/**\n\t\t * Store for manual type assignment using the `column.type` option. This\n\t\t * is held in store so we can manipulate the column's `sType` property.\n\t\t *  @type string\n\t\t *  @default null\n\t\t *  @private\n\t\t */\n\t\t\"_sManualType\": null,\n\t\n\t\t/**\n\t\t * Flag to indicate if HTML5 data attributes should be used as the data\n\t\t * source for filtering or sorting. True is either are.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *  @private\n\t\t */\n\t\t\"_bAttrSrc\": false,\n\t\n\t\t/**\n\t\t * Developer definable function that is called whenever a cell is created (Ajax source,\n\t\t * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n\t\t * allowing you to modify the DOM element (add background colour for example) when the\n\t\t * element is available.\n\t\t *  @type function\n\t\t *  @param {element} nTd The TD node that has been created\n\t\t *  @param {*} sData The Data for the cell\n\t\t *  @param {array|object} oData The data for the whole row\n\t\t *  @param {int} iRow The row index for the aoData data store\n\t\t *  @default null\n\t\t */\n\t\t\"fnCreatedCell\": null,\n\t\n\t\t/**\n\t\t * Function to get data from a cell in a column. You should <b>never</b>\n\t\t * access data directly through _aData internally in DataTables - always use\n\t\t * the method attached to this property. It allows mData to function as\n\t\t * required. This function is automatically assigned by the column\n\t\t * initialisation method\n\t\t *  @type function\n\t\t *  @param {array|object} oData The data array/object for the array\n\t\t *    (i.e. aoData[]._aData)\n\t\t *  @param {string} sSpecific The specific data type you want to get -\n\t\t *    'display', 'type' 'filter' 'sort'\n\t\t *  @returns {*} The data for the cell from the given row's data\n\t\t *  @default null\n\t\t */\n\t\t\"fnGetData\": null,\n\t\n\t\t/**\n\t\t * Function to set data for a cell in the column. You should <b>never</b>\n\t\t * set the data directly to _aData internally in DataTables - always use\n\t\t * this method. It allows mData to function as required. This function\n\t\t * is automatically assigned by the column initialisation method\n\t\t *  @type function\n\t\t *  @param {array|object} oData The data array/object for the array\n\t\t *    (i.e. aoData[]._aData)\n\t\t *  @param {*} sValue Value to set\n\t\t *  @default null\n\t\t */\n\t\t\"fnSetData\": null,\n\t\n\t\t/**\n\t\t * Property to read the value for the cells in the column from the data\n\t\t * source array / object. If null, then the default content is used, if a\n\t\t * function is given then the return from the function is used.\n\t\t *  @type function|int|string|null\n\t\t *  @default null\n\t\t */\n\t\t\"mData\": null,\n\t\n\t\t/**\n\t\t * Partner property to mData which is used (only when defined) to get\n\t\t * the data - i.e. it is basically the same as mData, but without the\n\t\t * 'set' option, and also the data fed to it is the result from mData.\n\t\t * This is the rendering method to match the data method of mData.\n\t\t *  @type function|int|string|null\n\t\t *  @default null\n\t\t */\n\t\t\"mRender\": null,\n\t\n\t\t/**\n\t\t * Unique header TH/TD element for this column - this is what the sorting\n\t\t * listener is attached to (if sorting is enabled.)\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTh\": null,\n\t\n\t\t/**\n\t\t * Unique footer TH/TD element for this column (if there is one). Not used\n\t\t * in DataTables as such, but can be used for plug-ins to reference the\n\t\t * footer for each column.\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTf\": null,\n\t\n\t\t/**\n\t\t * The class to apply to all TD elements in the table's TBODY for the column\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sClass\": null,\n\t\n\t\t/**\n\t\t * When DataTables calculates the column widths to assign to each column,\n\t\t * it finds the longest string in each column and then constructs a\n\t\t * temporary table and reads the widths from that. The problem with this\n\t\t * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n\t\t * string - thus the calculation can go wrong (doing it properly and putting\n\t\t * it into an DOM object and measuring that is horribly(!) slow). Thus as\n\t\t * a \"work around\" we provide this option. It will append its value to the\n\t\t * text that is found to be the longest string for the column - i.e. padding.\n\t\t *  @type string\n\t\t */\n\t\t\"sContentPadding\": null,\n\t\n\t\t/**\n\t\t * Allows a default value to be given for a column's data, and will be used\n\t\t * whenever a null data source is encountered (this can be because mData\n\t\t * is set to null, or because the data source itself is null).\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sDefaultContent\": null,\n\t\n\t\t/**\n\t\t * Name for the column, allowing reference to the column by name as well as\n\t\t * by index (needs a lookup to work by name).\n\t\t *  @type string\n\t\t */\n\t\t\"sName\": null,\n\t\n\t\t/**\n\t\t * Custom sorting data type - defines which of the available plug-ins in\n\t\t * afnSortData the custom sorting will use - if any is defined.\n\t\t *  @type string\n\t\t *  @default std\n\t\t */\n\t\t\"sSortDataType\": 'std',\n\t\n\t\t/**\n\t\t * Class to be applied to the header element when sorting on this column\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sSortingClass\": null,\n\t\n\t\t/**\n\t\t * Class to be applied to the header element when sorting on this column -\n\t\t * when jQuery UI theming is used.\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sSortingClassJUI\": null,\n\t\n\t\t/**\n\t\t * Title of the column - what is seen in the TH element (nTh).\n\t\t *  @type string\n\t\t */\n\t\t\"sTitle\": null,\n\t\n\t\t/**\n\t\t * Column sorting and filtering type\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sType\": null,\n\t\n\t\t/**\n\t\t * Width of the column\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sWidth\": null,\n\t\n\t\t/**\n\t\t * Width of the column when it was first \"encountered\"\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sWidthOrig\": null\n\t};\n\t\n\t\n\t/*\n\t * Developer note: The properties of the object below are given in Hungarian\n\t * notation, that was used as the interface for DataTables prior to v1.10, however\n\t * from v1.10 onwards the primary interface is camel case. In order to avoid\n\t * breaking backwards compatibility utterly with this change, the Hungarian\n\t * version is still, internally the primary interface, but is is not documented\n\t * - hence the @name tags in each doc comment. This allows a Javascript function\n\t * to create a map from Hungarian notation to camel case (going the other direction\n\t * would require each property to be listed, which would at around 3K to the size\n\t * of DataTables, while this method is about a 0.5K hit.\n\t *\n\t * Ultimately this does pave the way for Hungarian notation to be dropped\n\t * completely, but that is a massive amount of work and will break current\n\t * installs (therefore is on-hold until v2).\n\t */\n\t\n\t/**\n\t * Initialisation options that can be given to DataTables at initialisation\n\t * time.\n\t *  @namespace\n\t */\n\tDataTable.defaults = {\n\t\t/**\n\t\t * An array of data to use for the table, passed in at initialisation which\n\t\t * will be used in preference to any data which is already in the DOM. This is\n\t\t * particularly useful for constructing tables purely in Javascript, for\n\t\t * example with a custom Ajax call.\n\t\t *  @type array\n\t\t *  @default null\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.data\n\t\t *\n\t\t *  @example\n\t\t *    // Using a 2D array data source\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"data\": [\n\t\t *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],\n\t\t *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],\n\t\t *        ],\n\t\t *        \"columns\": [\n\t\t *          { \"title\": \"Engine\" },\n\t\t *          { \"title\": \"Browser\" },\n\t\t *          { \"title\": \"Platform\" },\n\t\t *          { \"title\": \"Version\" },\n\t\t *          { \"title\": \"Grade\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using an array of objects as a data source (`data`)\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"data\": [\n\t\t *          {\n\t\t *            \"engine\":   \"Trident\",\n\t\t *            \"browser\":  \"Internet Explorer 4.0\",\n\t\t *            \"platform\": \"Win 95+\",\n\t\t *            \"version\":  4,\n\t\t *            \"grade\":    \"X\"\n\t\t *          },\n\t\t *          {\n\t\t *            \"engine\":   \"Trident\",\n\t\t *            \"browser\":  \"Internet Explorer 5.0\",\n\t\t *            \"platform\": \"Win 95+\",\n\t\t *            \"version\":  5,\n\t\t *            \"grade\":    \"C\"\n\t\t *          }\n\t\t *        ],\n\t\t *        \"columns\": [\n\t\t *          { \"title\": \"Engine\",   \"data\": \"engine\" },\n\t\t *          { \"title\": \"Browser\",  \"data\": \"browser\" },\n\t\t *          { \"title\": \"Platform\", \"data\": \"platform\" },\n\t\t *          { \"title\": \"Version\",  \"data\": \"version\" },\n\t\t *          { \"title\": \"Grade\",    \"data\": \"grade\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"aaData\": null,\n\t\n\t\n\t\t/**\n\t\t * If ordering is enabled, then DataTables will perform a first pass sort on\n\t\t * initialisation. You can define which column(s) the sort is performed\n\t\t * upon, and the sorting direction, with this variable. The `sorting` array\n\t\t * should contain an array for each column to be sorted initially containing\n\t\t * the column's index and a direction string ('asc' or 'desc').\n\t\t *  @type array\n\t\t *  @default [[0,'asc']]\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.order\n\t\t *\n\t\t *  @example\n\t\t *    // Sort by 3rd column first, and then 4th column\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"order\": [[2,'asc'], [3,'desc']]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *    // No initial sorting\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"order\": []\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"aaSorting\": [[0,'asc']],\n\t\n\t\n\t\t/**\n\t\t * This parameter is basically identical to the `sorting` parameter, but\n\t\t * cannot be overridden by user interaction with the table. What this means\n\t\t * is that you could have a column (visible or hidden) which the sorting\n\t\t * will always be forced on first - any sorting after that (from the user)\n\t\t * will then be performed as required. This can be useful for grouping rows\n\t\t * together.\n\t\t *  @type array\n\t\t *  @default null\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.orderFixed\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"orderFixed\": [[0,'asc']]\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"aaSortingFixed\": [],\n\t\n\t\n\t\t/**\n\t\t * DataTables can be instructed to load data to display in the table from a\n\t\t * Ajax source. This option defines how that Ajax call is made and where to.\n\t\t *\n\t\t * The `ajax` property has three different modes of operation, depending on\n\t\t * how it is defined. These are:\n\t\t *\n\t\t * * `string` - Set the URL from where the data should be loaded from.\n\t\t * * `object` - Define properties for `jQuery.ajax`.\n\t\t * * `function` - Custom data get function\n\t\t *\n\t\t * `string`\n\t\t * --------\n\t\t *\n\t\t * As a string, the `ajax` property simply defines the URL from which\n\t\t * DataTables will load data.\n\t\t *\n\t\t * `object`\n\t\t * --------\n\t\t *\n\t\t * As an object, the parameters in the object are passed to\n\t\t * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control\n\t\t * of the Ajax request. DataTables has a number of default parameters which\n\t\t * you can override using this option. Please refer to the jQuery\n\t\t * documentation for a full description of the options available, although\n\t\t * the following parameters provide additional options in DataTables or\n\t\t * require special consideration:\n\t\t *\n\t\t * * `data` - As with jQuery, `data` can be provided as an object, but it\n\t\t *   can also be used as a function to manipulate the data DataTables sends\n\t\t *   to the server. The function takes a single parameter, an object of\n\t\t *   parameters with the values that DataTables has readied for sending. An\n\t\t *   object may be returned which will be merged into the DataTables\n\t\t *   defaults, or you can add the items to the object that was passed in and\n\t\t *   not return anything from the function. This supersedes `fnServerParams`\n\t\t *   from DataTables 1.9-.\n\t\t *\n\t\t * * `dataSrc` - By default DataTables will look for the property `data` (or\n\t\t *   `aaData` for compatibility with DataTables 1.9-) when obtaining data\n\t\t *   from an Ajax source or for server-side processing - this parameter\n\t\t *   allows that property to be changed. You can use Javascript dotted\n\t\t *   object notation to get a data source for multiple levels of nesting, or\n\t\t *   it my be used as a function. As a function it takes a single parameter,\n\t\t *   the JSON returned from the server, which can be manipulated as\n\t\t *   required, with the returned value being that used by DataTables as the\n\t\t *   data source for the table. This supersedes `sAjaxDataProp` from\n\t\t *   DataTables 1.9-.\n\t\t *\n\t\t * * `success` - Should not be overridden it is used internally in\n\t\t *   DataTables. To manipulate / transform the data returned by the server\n\t\t *   use `ajax.dataSrc`, or use `ajax` as a function (see below).\n\t\t *\n\t\t * `function`\n\t\t * ----------\n\t\t *\n\t\t * As a function, making the Ajax call is left up to yourself allowing\n\t\t * complete control of the Ajax request. Indeed, if desired, a method other\n\t\t * than Ajax could be used to obtain the required data, such as Web storage\n\t\t * or an AIR database.\n\t\t *\n\t\t * The function is given four parameters and no return is required. The\n\t\t * parameters are:\n\t\t *\n\t\t * 1. _object_ - Data to send to the server\n\t\t * 2. _function_ - Callback function that must be executed when the required\n\t\t *    data has been obtained. That data should be passed into the callback\n\t\t *    as the only parameter\n\t\t * 3. _object_ - DataTables settings object for the table\n\t\t *\n\t\t * Note that this supersedes `fnServerData` from DataTables 1.9-.\n\t\t *\n\t\t *  @type string|object|function\n\t\t *  @default null\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.ajax\n\t\t *  @since 1.10.0\n\t\t *\n\t\t * @example\n\t\t *   // Get JSON data from a file via Ajax.\n\t\t *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": \"data.json\"\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Get JSON data from a file via Ajax, using `dataSrc` to change\n\t\t *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"dataSrc\": \"tableData\"\n\t\t *     }\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Get JSON data from a file via Ajax, using `dataSrc` to read data\n\t\t *   // from a plain array rather than an array in an object\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"dataSrc\": \"\"\n\t\t *     }\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Manipulate the data returned from the server - add a link to data\n\t\t *   // (note this can, should, be done using `render` for the column - this\n\t\t *   // is just a simple example of how the data can be manipulated).\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"dataSrc\": function ( json ) {\n\t\t *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {\n\t\t *           json[i][0] = '<a href=\"/message/'+json[i][0]+'>View message</a>';\n\t\t *         }\n\t\t *         return json;\n\t\t *       }\n\t\t *     }\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Add data to the request\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"data\": function ( d ) {\n\t\t *         return {\n\t\t *           \"extra_search\": $('#extra').val()\n\t\t *         };\n\t\t *       }\n\t\t *     }\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Send request as POST\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"type\": \"POST\"\n\t\t *     }\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Get the data from localStorage (could interface with a form for\n\t\t *   // adding, editing and removing rows).\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": function (data, callback, settings) {\n\t\t *       callback(\n\t\t *         JSON.parse( localStorage.getItem('dataTablesData') )\n\t\t *       );\n\t\t *     }\n\t\t *   } );\n\t\t */\n\t\t\"ajax\": null,\n\t\n\t\n\t\t/**\n\t\t * This parameter allows you to readily specify the entries in the length drop\n\t\t * down menu that DataTables shows when pagination is enabled. It can be\n\t\t * either a 1D array of options which will be used for both the displayed\n\t\t * option and the value, or a 2D array which will use the array in the first\n\t\t * position as the value, and the array in the second position as the\n\t\t * displayed options (useful for language strings such as 'All').\n\t\t *\n\t\t * Note that the `pageLength` property will be automatically set to the\n\t\t * first value given in this array, unless `pageLength` is also provided.\n\t\t *  @type array\n\t\t *  @default [ 10, 25, 50, 100 ]\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.lengthMenu\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"aLengthMenu\": [ 10, 25, 50, 100 ],\n\t\n\t\n\t\t/**\n\t\t * The `columns` option in the initialisation parameter allows you to define\n\t\t * details about the way individual columns behave. For a full list of\n\t\t * column options that can be set, please see\n\t\t * {@link DataTable.defaults.column}. Note that if you use `columns` to\n\t\t * define your columns, you must have an entry in the array for every single\n\t\t * column that you have in your table (these can be null if you don't which\n\t\t * to specify any options).\n\t\t *  @member\n\t\t *\n\t\t *  @name DataTable.defaults.column\n\t\t */\n\t\t\"aoColumns\": null,\n\t\n\t\t/**\n\t\t * Very similar to `columns`, `columnDefs` allows you to target a specific\n\t\t * column, multiple columns, or all columns, using the `targets` property of\n\t\t * each object in the array. This allows great flexibility when creating\n\t\t * tables, as the `columnDefs` arrays can be of any length, targeting the\n\t\t * columns you specifically want. `columnDefs` may use any of the column\n\t\t * options available: {@link DataTable.defaults.column}, but it _must_\n\t\t * have `targets` defined in each object in the array. Values in the `targets`\n\t\t * array may be:\n\t\t *   <ul>\n\t\t *     <li>a string - class name will be matched on the TH for the column</li>\n\t\t *     <li>0 or a positive integer - column index counting from the left</li>\n\t\t *     <li>a negative integer - column index counting from the right</li>\n\t\t *     <li>the string \"_all\" - all columns (i.e. assign a default)</li>\n\t\t *   </ul>\n\t\t *  @member\n\t\t *\n\t\t *  @name DataTable.defaults.columnDefs\n\t\t */\n\t\t\"aoColumnDefs\": null,\n\t\n\t\n\t\t/**\n\t\t * Basically the same as `search`, this parameter defines the individual column\n\t\t * filtering state at initialisation time. The array must be of the same size\n\t\t * as the number of columns, and each element be an object with the parameters\n\t\t * `search` and `escapeRegex` (the latter is optional). 'null' is also\n\t\t * accepted and the default will be used.\n\t\t *  @type array\n\t\t *  @default []\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.searchCols\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"searchCols\": [\n\t\t *          null,\n\t\t *          { \"search\": \"My filter\" },\n\t\t *          null,\n\t\t *          { \"search\": \"^[0-9]\", \"escapeRegex\": false }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"aoSearchCols\": [],\n\t\n\t\n\t\t/**\n\t\t * An array of CSS classes that should be applied to displayed rows. This\n\t\t * array may be of any length, and DataTables will apply each class\n\t\t * sequentially, looping when required.\n\t\t *  @type array\n\t\t *  @default null <i>Will take the values determined by the `oClasses.stripe*`\n\t\t *    options</i>\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.stripeClasses\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stripeClasses\": [ 'strip1', 'strip2', 'strip3' ]\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"asStripeClasses\": null,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable automatic column width calculation. This can be disabled\n\t\t * as an optimisation (it takes some time to calculate the widths) if the\n\t\t * tables widths are passed in using `columns`.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.autoWidth\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"autoWidth\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bAutoWidth\": true,\n\t\n\t\n\t\t/**\n\t\t * Deferred rendering can provide DataTables with a huge speed boost when you\n\t\t * are using an Ajax or JS data source for the table. This option, when set to\n\t\t * true, will cause DataTables to defer the creation of the table elements for\n\t\t * each row until they are needed for a draw - saving a significant amount of\n\t\t * time.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.deferRender\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ajax\": \"sources/arrays.txt\",\n\t\t *        \"deferRender\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bDeferRender\": false,\n\t\n\t\n\t\t/**\n\t\t * Replace a DataTable which matches the given selector and replace it with\n\t\t * one which has the properties of the new initialisation object passed. If no\n\t\t * table matches the selector, then the new DataTable will be constructed as\n\t\t * per normal.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.destroy\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"srollY\": \"200px\",\n\t\t *        \"paginate\": false\n\t\t *      } );\n\t\t *\n\t\t *      // Some time later....\n\t\t *      $('#example').dataTable( {\n\t\t *        \"filter\": false,\n\t\t *        \"destroy\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bDestroy\": false,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable filtering of data. Filtering in DataTables is \"smart\" in\n\t\t * that it allows the end user to input multiple words (space separated) and\n\t\t * will match a row containing those words, even if not in the order that was\n\t\t * specified (this allow matching across multiple columns). Note that if you\n\t\t * wish to use filtering in DataTables this must remain 'true' - to remove the\n\t\t * default filtering input box and retain filtering abilities, please use\n\t\t * {@link DataTable.defaults.dom}.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.searching\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"searching\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bFilter\": true,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable the table information display. This shows information\n\t\t * about the data that is currently visible on the page, including information\n\t\t * about filtered data if that action is being performed.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.info\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"info\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bInfo\": true,\n\t\n\t\n\t\t/**\n\t\t * Allows the end user to select the size of a formatted page from a select\n\t\t * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.lengthChange\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"lengthChange\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bLengthChange\": true,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable pagination.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.paging\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"paging\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bPaginate\": true,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable the display of a 'processing' indicator when the table is\n\t\t * being processed (e.g. a sort). This is particularly useful for tables with\n\t\t * large amounts of data where it can take a noticeable amount of time to sort\n\t\t * the entries.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.processing\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"processing\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bProcessing\": false,\n\t\n\t\n\t\t/**\n\t\t * Retrieve the DataTables object for the given selector. Note that if the\n\t\t * table has already been initialised, this parameter will cause DataTables\n\t\t * to simply return the object that has already been set up - it will not take\n\t\t * account of any changes you might have made to the initialisation object\n\t\t * passed to DataTables (setting this parameter to true is an acknowledgement\n\t\t * that you understand this). `destroy` can be used to reinitialise a table if\n\t\t * you need.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.retrieve\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      initTable();\n\t\t *      tableActions();\n\t\t *    } );\n\t\t *\n\t\t *    function initTable ()\n\t\t *    {\n\t\t *      return $('#example').dataTable( {\n\t\t *        \"scrollY\": \"200px\",\n\t\t *        \"paginate\": false,\n\t\t *        \"retrieve\": true\n\t\t *      } );\n\t\t *    }\n\t\t *\n\t\t *    function tableActions ()\n\t\t *    {\n\t\t *      var table = initTable();\n\t\t *      // perform API operations with oTable\n\t\t *    }\n\t\t */\n\t\t\"bRetrieve\": false,\n\t\n\t\n\t\t/**\n\t\t * When vertical (y) scrolling is enabled, DataTables will force the height of\n\t\t * the table's viewport to the given height at all times (useful for layout).\n\t\t * However, this can look odd when filtering data down to a small data set,\n\t\t * and the footer is left \"floating\" further down. This parameter (when\n\t\t * enabled) will cause DataTables to collapse the table's viewport down when\n\t\t * the result set will fit within the given Y height.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.scrollCollapse\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"scrollY\": \"200\",\n\t\t *        \"scrollCollapse\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bScrollCollapse\": false,\n\t\n\t\n\t\t/**\n\t\t * Configure DataTables to use server-side processing. Note that the\n\t\t * `ajax` parameter must also be given in order to give DataTables a\n\t\t * source to obtain the required data for each draw.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.serverSide\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"serverSide\": true,\n\t\t *        \"ajax\": \"xhr.php\"\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bServerSide\": false,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable sorting of columns. Sorting of individual columns can be\n\t\t * disabled by the `sortable` option for each column.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.ordering\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ordering\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bSort\": true,\n\t\n\t\n\t\t/**\n\t\t * Enable or display DataTables' ability to sort multiple columns at the\n\t\t * same time (activated by shift-click by the user).\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.orderMulti\n\t\t *\n\t\t *  @example\n\t\t *    // Disable multiple column sorting ability\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"orderMulti\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bSortMulti\": true,\n\t\n\t\n\t\t/**\n\t\t * Allows control over whether DataTables should use the top (true) unique\n\t\t * cell that is found for a single column, or the bottom (false - default).\n\t\t * This is useful when using complex headers.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.orderCellsTop\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"orderCellsTop\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bSortCellsTop\": false,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and\n\t\t * `sorting\\_3` to the columns which are currently being sorted on. This is\n\t\t * presented as a feature switch as it can increase processing time (while\n\t\t * classes are removed and added) so for large data sets you might want to\n\t\t * turn this off.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.orderClasses\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"orderClasses\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bSortClasses\": true,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable state saving. When enabled HTML5 `localStorage` will be\n\t\t * used to save table display information such as pagination information,\n\t\t * display length, filtering and sorting. As such when the end user reloads\n\t\t * the page the display display will match what thy had previously set up.\n\t\t *\n\t\t * Due to the use of `localStorage` the default state saving is not supported\n\t\t * in IE6 or 7. If state saving is required in those browsers, use\n\t\t * `stateSaveCallback` to provide a storage solution such as cookies.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.stateSave\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bStateSave\": false,\n\t\n\t\n\t\t/**\n\t\t * This function is called when a TR element is created (and all TD child\n\t\t * elements have been inserted), or registered if using a DOM source, allowing\n\t\t * manipulation of the TR element (adding classes etc).\n\t\t *  @type function\n\t\t *  @param {node} row \"TR\" element for the current row\n\t\t *  @param {array} data Raw data array for this row\n\t\t *  @param {int} dataIndex The index of this row in the internal aoData array\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.createdRow\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"createdRow\": function( row, data, dataIndex ) {\n\t\t *          // Bold the grade for all 'A' grade browsers\n\t\t *          if ( data[4] == \"A\" )\n\t\t *          {\n\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );\n\t\t *          }\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnCreatedRow\": null,\n\t\n\t\n\t\t/**\n\t\t * This function is called on every 'draw' event, and allows you to\n\t\t * dynamically modify any aspect you want about the created DOM.\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.drawCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"drawCallback\": function( settings ) {\n\t\t *          alert( 'DataTables has redrawn the table' );\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnDrawCallback\": null,\n\t\n\t\n\t\t/**\n\t\t * Identical to fnHeaderCallback() but for the table footer this function\n\t\t * allows you to modify the table footer on every 'draw' event.\n\t\t *  @type function\n\t\t *  @param {node} foot \"TR\" element for the footer\n\t\t *  @param {array} data Full table data (as derived from the original HTML)\n\t\t *  @param {int} start Index for the current display starting point in the\n\t\t *    display array\n\t\t *  @param {int} end Index for the current display ending point in the\n\t\t *    display array\n\t\t *  @param {array int} display Index array to translate the visual position\n\t\t *    to the full data array\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.footerCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"footerCallback\": function( tfoot, data, start, end, display ) {\n\t\t *          tfoot.getElementsByTagName('th')[0].innerHTML = \"Starting index is \"+start;\n\t\t *        }\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"fnFooterCallback\": null,\n\t\n\t\n\t\t/**\n\t\t * When rendering large numbers in the information element for the table\n\t\t * (i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers\n\t\t * to have a comma separator for the 'thousands' units (e.g. 1 million is\n\t\t * rendered as \"1,000,000\") to help readability for the end user. This\n\t\t * function will override the default method DataTables uses.\n\t\t *  @type function\n\t\t *  @member\n\t\t *  @param {int} toFormat number to be formatted\n\t\t *  @returns {string} formatted string for DataTables to show the number\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.formatNumber\n\t\t *\n\t\t *  @example\n\t\t *    // Format a number using a single quote for the separator (note that\n\t\t *    // this can also be done with the language.thousands option)\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"formatNumber\": function ( toFormat ) {\n\t\t *          return toFormat.toString().replace(\n\t\t *            /\\B(?=(\\d{3})+(?!\\d))/g, \"'\"\n\t\t *          );\n\t\t *        };\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnFormatNumber\": function ( toFormat ) {\n\t\t\treturn toFormat.toString().replace(\n\t\t\t\t/\\B(?=(\\d{3})+(?!\\d))/g,\n\t\t\t\tthis.oLanguage.sThousands\n\t\t\t);\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * This function is called on every 'draw' event, and allows you to\n\t\t * dynamically modify the header row. This can be used to calculate and\n\t\t * display useful information about the table.\n\t\t *  @type function\n\t\t *  @param {node} head \"TR\" element for the header\n\t\t *  @param {array} data Full table data (as derived from the original HTML)\n\t\t *  @param {int} start Index for the current display starting point in the\n\t\t *    display array\n\t\t *  @param {int} end Index for the current display ending point in the\n\t\t *    display array\n\t\t *  @param {array int} display Index array to translate the visual position\n\t\t *    to the full data array\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.headerCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"fheaderCallback\": function( head, data, start, end, display ) {\n\t\t *          head.getElementsByTagName('th')[0].innerHTML = \"Displaying \"+(end-start)+\" records\";\n\t\t *        }\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"fnHeaderCallback\": null,\n\t\n\t\n\t\t/**\n\t\t * The information element can be used to convey information about the current\n\t\t * state of the table. Although the internationalisation options presented by\n\t\t * DataTables are quite capable of dealing with most customisations, there may\n\t\t * be times where you wish to customise the string further. This callback\n\t\t * allows you to do exactly that.\n\t\t *  @type function\n\t\t *  @param {object} oSettings DataTables settings object\n\t\t *  @param {int} start Starting position in data for the draw\n\t\t *  @param {int} end End position in data for the draw\n\t\t *  @param {int} max Total number of rows in the table (regardless of\n\t\t *    filtering)\n\t\t *  @param {int} total Total number of rows in the data set, after filtering\n\t\t *  @param {string} pre The string that DataTables has formatted using it's\n\t\t *    own rules\n\t\t *  @returns {string} The string to be displayed in the information element.\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.infoCallback\n\t\t *\n\t\t *  @example\n\t\t *    $('#example').dataTable( {\n\t\t *      \"infoCallback\": function( settings, start, end, max, total, pre ) {\n\t\t *        return start +\" to \"+ end;\n\t\t *      }\n\t\t *    } );\n\t\t */\n\t\t\"fnInfoCallback\": null,\n\t\n\t\n\t\t/**\n\t\t * Called when the table has been initialised. Normally DataTables will\n\t\t * initialise sequentially and there will be no need for this function,\n\t\t * however, this does not hold true when using external language information\n\t\t * since that is obtained using an async XHR call.\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @param {object} json The JSON object request from the server - only\n\t\t *    present if client-side Ajax sourced data is used\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.initComplete\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"initComplete\": function(settings, json) {\n\t\t *          alert( 'DataTables has finished its initialisation.' );\n\t\t *        }\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"fnInitComplete\": null,\n\t\n\t\n\t\t/**\n\t\t * Called at the very start of each table draw and can be used to cancel the\n\t\t * draw by returning false, any other return (including undefined) results in\n\t\t * the full draw occurring).\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @returns {boolean} False will cancel the draw, anything else (including no\n\t\t *    return) will allow it to complete.\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.preDrawCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"preDrawCallback\": function( settings ) {\n\t\t *          if ( $('#test').val() == 1 ) {\n\t\t *            return false;\n\t\t *          }\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnPreDrawCallback\": null,\n\t\n\t\n\t\t/**\n\t\t * This function allows you to 'post process' each row after it have been\n\t\t * generated for each table draw, but before it is rendered on screen. This\n\t\t * function might be used for setting the row class name etc.\n\t\t *  @type function\n\t\t *  @param {node} row \"TR\" element for the current row\n\t\t *  @param {array} data Raw data array for this row\n\t\t *  @param {int} displayIndex The display index for the current table draw\n\t\t *  @param {int} displayIndexFull The index of the data in the full list of\n\t\t *    rows (after filtering)\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.rowCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"rowCallback\": function( row, data, displayIndex, displayIndexFull ) {\n\t\t *          // Bold the grade for all 'A' grade browsers\n\t\t *          if ( data[4] == \"A\" ) {\n\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );\n\t\t *          }\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnRowCallback\": null,\n\t\n\t\n\t\t/**\n\t\t * __Deprecated__ The functionality provided by this parameter has now been\n\t\t * superseded by that provided through `ajax`, which should be used instead.\n\t\t *\n\t\t * This parameter allows you to override the default function which obtains\n\t\t * the data from the server so something more suitable for your application.\n\t\t * For example you could use POST data, or pull information from a Gears or\n\t\t * AIR database.\n\t\t *  @type function\n\t\t *  @member\n\t\t *  @param {string} source HTTP source to obtain the data from (`ajax`)\n\t\t *  @param {array} data A key/value pair object containing the data to send\n\t\t *    to the server\n\t\t *  @param {function} callback to be called on completion of the data get\n\t\t *    process that will draw the data on the page.\n\t\t *  @param {object} settings DataTables settings object\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.serverData\n\t\t *\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t\t */\n\t\t\"fnServerData\": null,\n\t\n\t\n\t\t/**\n\t\t * __Deprecated__ The functionality provided by this parameter has now been\n\t\t * superseded by that provided through `ajax`, which should be used instead.\n\t\t *\n\t\t *  It is often useful to send extra data to the server when making an Ajax\n\t\t * request - for example custom filtering information, and this callback\n\t\t * function makes it trivial to send extra information to the server. The\n\t\t * passed in parameter is the data set that has been constructed by\n\t\t * DataTables, and you can add to this or modify it as you require.\n\t\t *  @type function\n\t\t *  @param {array} data Data array (array of objects which are name/value\n\t\t *    pairs) that has been constructed by DataTables and will be sent to the\n\t\t *    server. In the case of Ajax sourced data with server-side processing\n\t\t *    this will be an empty array, for server-side processing there will be a\n\t\t *    significant number of parameters!\n\t\t *  @returns {undefined} Ensure that you modify the data array passed in,\n\t\t *    as this is passed by reference.\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.serverParams\n\t\t *\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t\t */\n\t\t\"fnServerParams\": null,\n\t\n\t\n\t\t/**\n\t\t * Load the table state. With this function you can define from where, and how, the\n\t\t * state of a table is loaded. By default DataTables will load from `localStorage`\n\t\t * but you might wish to use a server-side database or cookies.\n\t\t *  @type function\n\t\t *  @member\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @param {object} callback Callback that can be executed when done. It\n\t\t *    should be passed the loaded state object.\n\t\t *  @return {object} The DataTables state object to be loaded\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.stateLoadCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateLoadCallback\": function (settings, callback) {\n\t\t *          $.ajax( {\n\t\t *            \"url\": \"/state_load\",\n\t\t *            \"dataType\": \"json\",\n\t\t *            \"success\": function (json) {\n\t\t *              callback( json );\n\t\t *            }\n\t\t *          } );\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnStateLoadCallback\": function ( settings ) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(\n\t\t\t\t\t(settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(\n\t\t\t\t\t\t'DataTables_'+settings.sInstance+'_'+location.pathname\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} catch (e) {}\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * Callback which allows modification of the saved state prior to loading that state.\n\t\t * This callback is called when the table is loading state from the stored data, but\n\t\t * prior to the settings object being modified by the saved state. Note that for\n\t\t * plug-in authors, you should use the `stateLoadParams` event to load parameters for\n\t\t * a plug-in.\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @param {object} data The state object that is to be loaded\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.stateLoadParams\n\t\t *\n\t\t *  @example\n\t\t *    // Remove a saved filter, so filtering is never loaded\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateLoadParams\": function (settings, data) {\n\t\t *          data.oSearch.sSearch = \"\";\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Disallow state loading by returning false\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateLoadParams\": function (settings, data) {\n\t\t *          return false;\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnStateLoadParams\": null,\n\t\n\t\n\t\t/**\n\t\t * Callback that is called when the state has been loaded from the state saving method\n\t\t * and the DataTables settings object has been modified as a result of the loaded state.\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @param {object} data The state object that was loaded\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.stateLoaded\n\t\t *\n\t\t *  @example\n\t\t *    // Show an alert with the filtering value that was saved\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateLoaded\": function (settings, data) {\n\t\t *          alert( 'Saved filter was: '+data.oSearch.sSearch );\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnStateLoaded\": null,\n\t\n\t\n\t\t/**\n\t\t * Save the table state. This function allows you to define where and how the state\n\t\t * information for the table is stored By default DataTables will use `localStorage`\n\t\t * but you might wish to use a server-side database or cookies.\n\t\t *  @type function\n\t\t *  @member\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @param {object} data The state object to be saved\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.stateSaveCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateSaveCallback\": function (settings, data) {\n\t\t *          // Send an Ajax request to the server with the state object\n\t\t *          $.ajax( {\n\t\t *            \"url\": \"/state_save\",\n\t\t *            \"data\": data,\n\t\t *            \"dataType\": \"json\",\n\t\t *            \"method\": \"POST\"\n\t\t *            \"success\": function () {}\n\t\t *          } );\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnStateSaveCallback\": function ( settings, data ) {\n\t\t\ttry {\n\t\t\t\t(settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(\n\t\t\t\t\t'DataTables_'+settings.sInstance+'_'+location.pathname,\n\t\t\t\t\tJSON.stringify( data )\n\t\t\t\t);\n\t\t\t} catch (e) {}\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * Callback which allows modification of the state to be saved. Called when the table\n\t\t * has changed state a new state save is required. This method allows modification of\n\t\t * the state saving object prior to actually doing the save, including addition or\n\t\t * other state properties or modification. Note that for plug-in authors, you should\n\t\t * use the `stateSaveParams` event to save parameters for a plug-in.\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @param {object} data The state object to be saved\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.stateSaveParams\n\t\t *\n\t\t *  @example\n\t\t *    // Remove a saved filter, so filtering is never saved\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateSaveParams\": function (settings, data) {\n\t\t *          data.oSearch.sSearch = \"\";\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnStateSaveParams\": null,\n\t\n\t\n\t\t/**\n\t\t * Duration for which the saved state information is considered valid. After this period\n\t\t * has elapsed the state will be returned to the default.\n\t\t * Value is given in seconds.\n\t\t *  @type int\n\t\t *  @default 7200 <i>(2 hours)</i>\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.stateDuration\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateDuration\": 60*60*24; // 1 day\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"iStateDuration\": 7200,\n\t\n\t\n\t\t/**\n\t\t * When enabled DataTables will not make a request to the server for the first\n\t\t * page draw - rather it will use the data already on the page (no sorting etc\n\t\t * will be applied to it), thus saving on an XHR at load time. `deferLoading`\n\t\t * is used to indicate that deferred loading is required, but it is also used\n\t\t * to tell DataTables how many records there are in the full table (allowing\n\t\t * the information element and pagination to be displayed correctly). In the case\n\t\t * where a filtering is applied to the table on initial load, this can be\n\t\t * indicated by giving the parameter as an array, where the first element is\n\t\t * the number of records available after filtering and the second element is the\n\t\t * number of records without filtering (allowing the table information element\n\t\t * to be shown correctly).\n\t\t *  @type int | array\n\t\t *  @default null\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.deferLoading\n\t\t *\n\t\t *  @example\n\t\t *    // 57 records available in the table, no filtering applied\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"serverSide\": true,\n\t\t *        \"ajax\": \"scripts/server_processing.php\",\n\t\t *        \"deferLoading\": 57\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // 57 records after filtering, 100 without filtering (an initial filter applied)\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"serverSide\": true,\n\t\t *        \"ajax\": \"scripts/server_processing.php\",\n\t\t *        \"deferLoading\": [ 57, 100 ],\n\t\t *        \"search\": {\n\t\t *          \"search\": \"my_filter\"\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"iDeferLoading\": null,\n\t\n\t\n\t\t/**\n\t\t * Number of rows to display on a single page when using pagination. If\n\t\t * feature enabled (`lengthChange`) then the end user will be able to override\n\t\t * this to a custom setting using a pop-up menu.\n\t\t *  @type int\n\t\t *  @default 10\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.pageLength\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"pageLength\": 50\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"iDisplayLength\": 10,\n\t\n\t\n\t\t/**\n\t\t * Define the starting point for data display when using DataTables with\n\t\t * pagination. Note that this parameter is the number of records, rather than\n\t\t * the page number, so if you have 10 records per page and want to start on\n\t\t * the third page, it should be \"20\".\n\t\t *  @type int\n\t\t *  @default 0\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.displayStart\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"displayStart\": 20\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"iDisplayStart\": 0,\n\t\n\t\n\t\t/**\n\t\t * By default DataTables allows keyboard navigation of the table (sorting, paging,\n\t\t * and filtering) by adding a `tabindex` attribute to the required elements. This\n\t\t * allows you to tab through the controls and press the enter key to activate them.\n\t\t * The tabindex is default 0, meaning that the tab follows the flow of the document.\n\t\t * You can overrule this using this parameter if you wish. Use a value of -1 to\n\t\t * disable built-in keyboard navigation.\n\t\t *  @type int\n\t\t *  @default 0\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.tabIndex\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"tabIndex\": 1\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"iTabIndex\": 0,\n\t\n\t\n\t\t/**\n\t\t * Classes that DataTables assigns to the various components and features\n\t\t * that it adds to the HTML table. This allows classes to be configured\n\t\t * during initialisation in addition to through the static\n\t\t * {@link DataTable.ext.oStdClasses} object).\n\t\t *  @namespace\n\t\t *  @name DataTable.defaults.classes\n\t\t */\n\t\t\"oClasses\": {},\n\t\n\t\n\t\t/**\n\t\t * All strings that DataTables uses in the user interface that it creates\n\t\t * are defined in this object, allowing you to modified them individually or\n\t\t * completely replace them all as required.\n\t\t *  @namespace\n\t\t *  @name DataTable.defaults.language\n\t\t */\n\t\t\"oLanguage\": {\n\t\t\t/**\n\t\t\t * Strings that are used for WAI-ARIA labels and controls only (these are not\n\t\t\t * actually visible on the page, but will be read by screenreaders, and thus\n\t\t\t * must be internationalised as well).\n\t\t\t *  @namespace\n\t\t\t *  @name DataTable.defaults.language.aria\n\t\t\t */\n\t\t\t\"oAria\": {\n\t\t\t\t/**\n\t\t\t\t * ARIA label that is added to the table headers when the column may be\n\t\t\t\t * sorted ascending by activing the column (click or return when focused).\n\t\t\t\t * Note that the column header is prefixed to this string.\n\t\t\t\t *  @type string\n\t\t\t\t *  @default : activate to sort column ascending\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.aria.sortAscending\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"aria\": {\n\t\t\t\t *            \"sortAscending\": \" - click/return to sort ascending\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sSortAscending\": \": activate to sort column ascending\",\n\t\n\t\t\t\t/**\n\t\t\t\t * ARIA label that is added to the table headers when the column may be\n\t\t\t\t * sorted descending by activing the column (click or return when focused).\n\t\t\t\t * Note that the column header is prefixed to this string.\n\t\t\t\t *  @type string\n\t\t\t\t *  @default : activate to sort column ascending\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.aria.sortDescending\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"aria\": {\n\t\t\t\t *            \"sortDescending\": \" - click/return to sort descending\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sSortDescending\": \": activate to sort column descending\"\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * Pagination string used by DataTables for the built-in pagination\n\t\t\t * control types.\n\t\t\t *  @namespace\n\t\t\t *  @name DataTable.defaults.language.paginate\n\t\t\t */\n\t\t\t\"oPaginate\": {\n\t\t\t\t/**\n\t\t\t\t * Text to use when using the 'full_numbers' type of pagination for the\n\t\t\t\t * button to take the user to the first page.\n\t\t\t\t *  @type string\n\t\t\t\t *  @default First\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.paginate.first\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"paginate\": {\n\t\t\t\t *            \"first\": \"First page\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sFirst\": \"First\",\n\t\n\t\n\t\t\t\t/**\n\t\t\t\t * Text to use when using the 'full_numbers' type of pagination for the\n\t\t\t\t * button to take the user to the last page.\n\t\t\t\t *  @type string\n\t\t\t\t *  @default Last\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.paginate.last\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"paginate\": {\n\t\t\t\t *            \"last\": \"Last page\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sLast\": \"Last\",\n\t\n\t\n\t\t\t\t/**\n\t\t\t\t * Text to use for the 'next' pagination button (to take the user to the\n\t\t\t\t * next page).\n\t\t\t\t *  @type string\n\t\t\t\t *  @default Next\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.paginate.next\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"paginate\": {\n\t\t\t\t *            \"next\": \"Next page\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sNext\": \"Next\",\n\t\n\t\n\t\t\t\t/**\n\t\t\t\t * Text to use for the 'previous' pagination button (to take the user to\n\t\t\t\t * the previous page).\n\t\t\t\t *  @type string\n\t\t\t\t *  @default Previous\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.paginate.previous\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"paginate\": {\n\t\t\t\t *            \"previous\": \"Previous page\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sPrevious\": \"Previous\"\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * This string is shown in preference to `zeroRecords` when the table is\n\t\t\t * empty of data (regardless of filtering). Note that this is an optional\n\t\t\t * parameter - if it is not given, the value of `zeroRecords` will be used\n\t\t\t * instead (either the default or given value).\n\t\t\t *  @type string\n\t\t\t *  @default No data available in table\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.emptyTable\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"emptyTable\": \"No data available in table\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sEmptyTable\": \"No data available in table\",\n\t\n\t\n\t\t\t/**\n\t\t\t * This string gives information to the end user about the information\n\t\t\t * that is current on display on the page. The following tokens can be\n\t\t\t * used in the string and will be dynamically replaced as the table\n\t\t\t * display updates. This tokens can be placed anywhere in the string, or\n\t\t\t * removed as needed by the language requires:\n\t\t\t *\n\t\t\t * * `\\_START\\_` - Display index of the first record on the current page\n\t\t\t * * `\\_END\\_` - Display index of the last record on the current page\n\t\t\t * * `\\_TOTAL\\_` - Number of records in the table after filtering\n\t\t\t * * `\\_MAX\\_` - Number of records in the table without filtering\n\t\t\t * * `\\_PAGE\\_` - Current page number\n\t\t\t * * `\\_PAGES\\_` - Total number of pages of data in the table\n\t\t\t *\n\t\t\t *  @type string\n\t\t\t *  @default Showing _START_ to _END_ of _TOTAL_ entries\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.info\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"info\": \"Showing page _PAGE_ of _PAGES_\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ entries\",\n\t\n\t\n\t\t\t/**\n\t\t\t * Display information string for when the table is empty. Typically the\n\t\t\t * format of this string should match `info`.\n\t\t\t *  @type string\n\t\t\t *  @default Showing 0 to 0 of 0 entries\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.infoEmpty\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"infoEmpty\": \"No entries to show\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sInfoEmpty\": \"Showing 0 to 0 of 0 entries\",\n\t\n\t\n\t\t\t/**\n\t\t\t * When a user filters the information in a table, this string is appended\n\t\t\t * to the information (`info`) to give an idea of how strong the filtering\n\t\t\t * is. The variable _MAX_ is dynamically updated.\n\t\t\t *  @type string\n\t\t\t *  @default (filtered from _MAX_ total entries)\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.infoFiltered\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"infoFiltered\": \" - filtering from _MAX_ records\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sInfoFiltered\": \"(filtered from _MAX_ total entries)\",\n\t\n\t\n\t\t\t/**\n\t\t\t * If can be useful to append extra information to the info string at times,\n\t\t\t * and this variable does exactly that. This information will be appended to\n\t\t\t * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are\n\t\t\t * being used) at all times.\n\t\t\t *  @type string\n\t\t\t *  @default <i>Empty string</i>\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.infoPostFix\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"infoPostFix\": \"All records shown are derived from real information.\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sInfoPostFix\": \"\",\n\t\n\t\n\t\t\t/**\n\t\t\t * This decimal place operator is a little different from the other\n\t\t\t * language options since DataTables doesn't output floating point\n\t\t\t * numbers, so it won't ever use this for display of a number. Rather,\n\t\t\t * what this parameter does is modify the sort methods of the table so\n\t\t\t * that numbers which are in a format which has a character other than\n\t\t\t * a period (`.`) as a decimal place will be sorted numerically.\n\t\t\t *\n\t\t\t * Note that numbers with different decimal places cannot be shown in\n\t\t\t * the same table and still be sortable, the table must be consistent.\n\t\t\t * However, multiple different tables on the page can use different\n\t\t\t * decimal place characters.\n\t\t\t *  @type string\n\t\t\t *  @default \n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.decimal\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"decimal\": \",\"\n\t\t\t *          \"thousands\": \".\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sDecimal\": \"\",\n\t\n\t\n\t\t\t/**\n\t\t\t * DataTables has a build in number formatter (`formatNumber`) which is\n\t\t\t * used to format large numbers that are used in the table information.\n\t\t\t * By default a comma is used, but this can be trivially changed to any\n\t\t\t * character you wish with this parameter.\n\t\t\t *  @type string\n\t\t\t *  @default ,\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.thousands\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"thousands\": \"'\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sThousands\": \",\",\n\t\n\t\n\t\t\t/**\n\t\t\t * Detail the action that will be taken when the drop down menu for the\n\t\t\t * pagination length option is changed. The '_MENU_' variable is replaced\n\t\t\t * with a default select list of 10, 25, 50 and 100, and can be replaced\n\t\t\t * with a custom select box if required.\n\t\t\t *  @type string\n\t\t\t *  @default Show _MENU_ entries\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.lengthMenu\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Language change only\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"lengthMenu\": \"Display _MENU_ records\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Language and options change\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"lengthMenu\": 'Display <select>'+\n\t\t\t *            '<option value=\"10\">10</option>'+\n\t\t\t *            '<option value=\"20\">20</option>'+\n\t\t\t *            '<option value=\"30\">30</option>'+\n\t\t\t *            '<option value=\"40\">40</option>'+\n\t\t\t *            '<option value=\"50\">50</option>'+\n\t\t\t *            '<option value=\"-1\">All</option>'+\n\t\t\t *            '</select> records'\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sLengthMenu\": \"Show _MENU_ entries\",\n\t\n\t\n\t\t\t/**\n\t\t\t * When using Ajax sourced data and during the first draw when DataTables is\n\t\t\t * gathering the data, this message is shown in an empty row in the table to\n\t\t\t * indicate to the end user the the data is being loaded. Note that this\n\t\t\t * parameter is not used when loading data by server-side processing, just\n\t\t\t * Ajax sourced data with client-side processing.\n\t\t\t *  @type string\n\t\t\t *  @default Loading...\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.loadingRecords\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"loadingRecords\": \"Please wait - loading...\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sLoadingRecords\": \"Loading...\",\n\t\n\t\n\t\t\t/**\n\t\t\t * Text which is displayed when the table is processing a user action\n\t\t\t * (usually a sort command or similar).\n\t\t\t *  @type string\n\t\t\t *  @default Processing...\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.processing\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"processing\": \"DataTables is currently busy\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sProcessing\": \"Processing...\",\n\t\n\t\n\t\t\t/**\n\t\t\t * Details the actions that will be taken when the user types into the\n\t\t\t * filtering input text box. The variable \"_INPUT_\", if used in the string,\n\t\t\t * is replaced with the HTML text box for the filtering input allowing\n\t\t\t * control over where it appears in the string. If \"_INPUT_\" is not given\n\t\t\t * then the input box is appended to the string automatically.\n\t\t\t *  @type string\n\t\t\t *  @default Search:\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.search\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Input text box will be appended at the end automatically\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"search\": \"Filter records:\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Specify where the filter should appear\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"search\": \"Apply filter _INPUT_ to table\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sSearch\": \"Search:\",\n\t\n\t\n\t\t\t/**\n\t\t\t * Assign a `placeholder` attribute to the search `input` element\n\t\t\t *  @type string\n\t\t\t *  @default \n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.searchPlaceholder\n\t\t\t */\n\t\t\t\"sSearchPlaceholder\": \"\",\n\t\n\t\n\t\t\t/**\n\t\t\t * All of the language information can be stored in a file on the\n\t\t\t * server-side, which DataTables will look up if this parameter is passed.\n\t\t\t * It must store the URL of the language file, which is in a JSON format,\n\t\t\t * and the object has the same properties as the oLanguage object in the\n\t\t\t * initialiser object (i.e. the above parameters). Please refer to one of\n\t\t\t * the example language files to see how this works in action.\n\t\t\t *  @type string\n\t\t\t *  @default <i>Empty string - i.e. disabled</i>\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.url\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"url\": \"http://www.sprymedia.co.uk/dataTables/lang.txt\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sUrl\": \"\",\n\t\n\t\n\t\t\t/**\n\t\t\t * Text shown inside the table records when the is no information to be\n\t\t\t * displayed after filtering. `emptyTable` is shown when there is simply no\n\t\t\t * information in the table at all (regardless of filtering).\n\t\t\t *  @type string\n\t\t\t *  @default No matching records found\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.zeroRecords\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"zeroRecords\": \"No records to display\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sZeroRecords\": \"No matching records found\"\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * This parameter allows you to have define the global filtering state at\n\t\t * initialisation time. As an object the `search` parameter must be\n\t\t * defined, but all other parameters are optional. When `regex` is true,\n\t\t * the search string will be treated as a regular expression, when false\n\t\t * (default) it will be treated as a straight string. When `smart`\n\t\t * DataTables will use it's smart filtering methods (to word match at\n\t\t * any point in the data), when false this will not be done.\n\t\t *  @namespace\n\t\t *  @extends DataTable.models.oSearch\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.search\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"search\": {\"search\": \"Initial search\"}\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"oSearch\": $.extend( {}, DataTable.models.oSearch ),\n\t\n\t\n\t\t/**\n\t\t * __Deprecated__ The functionality provided by this parameter has now been\n\t\t * superseded by that provided through `ajax`, which should be used instead.\n\t\t *\n\t\t * By default DataTables will look for the property `data` (or `aaData` for\n\t\t * compatibility with DataTables 1.9-) when obtaining data from an Ajax\n\t\t * source or for server-side processing - this parameter allows that\n\t\t * property to be changed. You can use Javascript dotted object notation to\n\t\t * get a data source for multiple levels of nesting.\n\t\t *  @type string\n\t\t *  @default data\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.ajaxDataProp\n\t\t *\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t\t */\n\t\t\"sAjaxDataProp\": \"data\",\n\t\n\t\n\t\t/**\n\t\t * __Deprecated__ The functionality provided by this parameter has now been\n\t\t * superseded by that provided through `ajax`, which should be used instead.\n\t\t *\n\t\t * You can instruct DataTables to load data from an external\n\t\t * source using this parameter (use aData if you want to pass data in you\n\t\t * already have). Simply provide a url a JSON object can be obtained from.\n\t\t *  @type string\n\t\t *  @default null\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.ajaxSource\n\t\t *\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t\t */\n\t\t\"sAjaxSource\": null,\n\t\n\t\n\t\t/**\n\t\t * This initialisation variable allows you to specify exactly where in the\n\t\t * DOM you want DataTables to inject the various controls it adds to the page\n\t\t * (for example you might want the pagination controls at the top of the\n\t\t * table). DIV elements (with or without a custom class) can also be added to\n\t\t * aid styling. The follow syntax is used:\n\t\t *   <ul>\n\t\t *     <li>The following options are allowed:\n\t\t *       <ul>\n\t\t *         <li>'l' - Length changing</li>\n\t\t *         <li>'f' - Filtering input</li>\n\t\t *         <li>'t' - The table!</li>\n\t\t *         <li>'i' - Information</li>\n\t\t *         <li>'p' - Pagination</li>\n\t\t *         <li>'r' - pRocessing</li>\n\t\t *       </ul>\n\t\t *     </li>\n\t\t *     <li>The following constants are allowed:\n\t\t *       <ul>\n\t\t *         <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>\n\t\t *         <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>\n\t\t *       </ul>\n\t\t *     </li>\n\t\t *     <li>The following syntax is expected:\n\t\t *       <ul>\n\t\t *         <li>'&lt;' and '&gt;' - div elements</li>\n\t\t *         <li>'&lt;\"class\" and '&gt;' - div with a class</li>\n\t\t *         <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>\n\t\t *       </ul>\n\t\t *     </li>\n\t\t *     <li>Examples:\n\t\t *       <ul>\n\t\t *         <li>'&lt;\"wrapper\"flipt&gt;'</li>\n\t\t *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>\n\t\t *       </ul>\n\t\t *     </li>\n\t\t *   </ul>\n\t\t *  @type string\n\t\t *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>\n\t\t *    <\"H\"lfr>t<\"F\"ip> <i>(when `jQueryUI` is true)</i>\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.dom\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"dom\": '&lt;\"top\"i&gt;rt&lt;\"bottom\"flp&gt;&lt;\"clear\"&gt;'\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sDom\": \"lfrtip\",\n\t\n\t\n\t\t/**\n\t\t * Search delay option. This will throttle full table searches that use the\n\t\t * DataTables provided search input element (it does not effect calls to\n\t\t * `dt-api search()`, providing a delay before the search is made.\n\t\t *  @type integer\n\t\t *  @default 0\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.searchDelay\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"searchDelay\": 200\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"searchDelay\": null,\n\t\n\t\n\t\t/**\n\t\t * DataTables features six different built-in options for the buttons to\n\t\t * display for pagination control:\n\t\t *\n\t\t * * `numbers` - Page number buttons only\n\t\t * * `simple` - 'Previous' and 'Next' buttons only\n\t\t * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers\n\t\t * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons\n\t\t * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers\n\t\t * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers\n\t\t *  \n\t\t * Further methods can be added using {@link DataTable.ext.oPagination}.\n\t\t *  @type string\n\t\t *  @default simple_numbers\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.pagingType\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"pagingType\": \"full_numbers\"\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"sPaginationType\": \"simple_numbers\",\n\t\n\t\n\t\t/**\n\t\t * Enable horizontal scrolling. When a table is too wide to fit into a\n\t\t * certain layout, or you have a large number of columns in the table, you\n\t\t * can enable x-scrolling to show the table in a viewport, which can be\n\t\t * scrolled. This property can be `true` which will allow the table to\n\t\t * scroll horizontally when needed, or any CSS unit, or a number (in which\n\t\t * case it will be treated as a pixel measurement). Setting as simply `true`\n\t\t * is recommended.\n\t\t *  @type boolean|string\n\t\t *  @default <i>blank string - i.e. disabled</i>\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.scrollX\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"scrollX\": true,\n\t\t *        \"scrollCollapse\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sScrollX\": \"\",\n\t\n\t\n\t\t/**\n\t\t * This property can be used to force a DataTable to use more width than it\n\t\t * might otherwise do when x-scrolling is enabled. For example if you have a\n\t\t * table which requires to be well spaced, this parameter is useful for\n\t\t * \"over-sizing\" the table, and thus forcing scrolling. This property can by\n\t\t * any CSS unit, or a number (in which case it will be treated as a pixel\n\t\t * measurement).\n\t\t *  @type string\n\t\t *  @default <i>blank string - i.e. disabled</i>\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.scrollXInner\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"scrollX\": \"100%\",\n\t\t *        \"scrollXInner\": \"110%\"\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sScrollXInner\": \"\",\n\t\n\t\n\t\t/**\n\t\t * Enable vertical scrolling. Vertical scrolling will constrain the DataTable\n\t\t * to the given height, and enable scrolling for any data which overflows the\n\t\t * current viewport. This can be used as an alternative to paging to display\n\t\t * a lot of data in a small area (although paging and scrolling can both be\n\t\t * enabled at the same time). This property can be any CSS unit, or a number\n\t\t * (in which case it will be treated as a pixel measurement).\n\t\t *  @type string\n\t\t *  @default <i>blank string - i.e. disabled</i>\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.scrollY\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"scrollY\": \"200px\",\n\t\t *        \"paginate\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sScrollY\": \"\",\n\t\n\t\n\t\t/**\n\t\t * __Deprecated__ The functionality provided by this parameter has now been\n\t\t * superseded by that provided through `ajax`, which should be used instead.\n\t\t *\n\t\t * Set the HTTP method that is used to make the Ajax call for server-side\n\t\t * processing or Ajax sourced data.\n\t\t *  @type string\n\t\t *  @default GET\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.serverMethod\n\t\t *\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t\t */\n\t\t\"sServerMethod\": \"GET\",\n\t\n\t\n\t\t/**\n\t\t * DataTables makes use of renderers when displaying HTML elements for\n\t\t * a table. These renderers can be added or modified by plug-ins to\n\t\t * generate suitable mark-up for a site. For example the Bootstrap\n\t\t * integration plug-in for DataTables uses a paging button renderer to\n\t\t * display pagination buttons in the mark-up required by Bootstrap.\n\t\t *\n\t\t * For further information about the renderers available see\n\t\t * DataTable.ext.renderer\n\t\t *  @type string|object\n\t\t *  @default null\n\t\t *\n\t\t *  @name DataTable.defaults.renderer\n\t\t *\n\t\t */\n\t\t\"renderer\": null,\n\t\n\t\n\t\t/**\n\t\t * Set the data property name that DataTables should use to get a row's id\n\t\t * to set as the `id` property in the node.\n\t\t *  @type string\n\t\t *  @default DT_RowId\n\t\t *\n\t\t *  @name DataTable.defaults.rowId\n\t\t */\n\t\t\"rowId\": \"DT_RowId\"\n\t};\n\t\n\t_fnHungarianMap( DataTable.defaults );\n\t\n\t\n\t\n\t/*\n\t * Developer note - See note in model.defaults.js about the use of Hungarian\n\t * notation and camel case.\n\t */\n\t\n\t/**\n\t * Column options that can be given to DataTables at initialisation time.\n\t *  @namespace\n\t */\n\tDataTable.defaults.column = {\n\t\t/**\n\t\t * Define which column(s) an order will occur on for this column. This\n\t\t * allows a column's ordering to take multiple columns into account when\n\t\t * doing a sort or use the data from a different column. For example first\n\t\t * name / last name columns make sense to do a multi-column sort over the\n\t\t * two columns.\n\t\t *  @type array|int\n\t\t *  @default null <i>Takes the value of the column index automatically</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.orderData\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"orderData\": [ 0, 1 ], \"targets\": [ 0 ] },\n\t\t *          { \"orderData\": [ 1, 0 ], \"targets\": [ 1 ] },\n\t\t *          { \"orderData\": 2, \"targets\": [ 2 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"orderData\": [ 0, 1 ] },\n\t\t *          { \"orderData\": [ 1, 0 ] },\n\t\t *          { \"orderData\": 2 },\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"aDataSort\": null,\n\t\t\"iDataSort\": -1,\n\t\n\t\n\t\t/**\n\t\t * You can control the default ordering direction, and even alter the\n\t\t * behaviour of the sort handler (i.e. only allow ascending ordering etc)\n\t\t * using this parameter.\n\t\t *  @type array\n\t\t *  @default [ 'asc', 'desc' ]\n\t\t *\n\t\t *  @name DataTable.defaults.column.orderSequence\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"orderSequence\": [ \"asc\" ], \"targets\": [ 1 ] },\n\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ], \"targets\": [ 2 ] },\n\t\t *          { \"orderSequence\": [ \"desc\" ], \"targets\": [ 3 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          null,\n\t\t *          { \"orderSequence\": [ \"asc\" ] },\n\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ] },\n\t\t *          { \"orderSequence\": [ \"desc\" ] },\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"asSorting\": [ 'asc', 'desc' ],\n\t\n\t\n\t\t/**\n\t\t * Enable or disable filtering on the data in this column.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @name DataTable.defaults.column.searchable\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"searchable\": false, \"targets\": [ 0 ] }\n\t\t *        ] } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"searchable\": false },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ] } );\n\t\t *    } );\n\t\t */\n\t\t\"bSearchable\": true,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable ordering on this column.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @name DataTable.defaults.column.orderable\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"orderable\": false, \"targets\": [ 0 ] }\n\t\t *        ] } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"orderable\": false },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ] } );\n\t\t *    } );\n\t\t */\n\t\t\"bSortable\": true,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable the display of this column.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @name DataTable.defaults.column.visible\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"visible\": false, \"targets\": [ 0 ] }\n\t\t *        ] } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"visible\": false },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ] } );\n\t\t *    } );\n\t\t */\n\t\t\"bVisible\": true,\n\t\n\t\n\t\t/**\n\t\t * Developer definable function that is called whenever a cell is created (Ajax source,\n\t\t * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n\t\t * allowing you to modify the DOM element (add background colour for example) when the\n\t\t * element is available.\n\t\t *  @type function\n\t\t *  @param {element} td The TD node that has been created\n\t\t *  @param {*} cellData The Data for the cell\n\t\t *  @param {array|object} rowData The data for the whole row\n\t\t *  @param {int} row The row index for the aoData data store\n\t\t *  @param {int} col The column index for aoColumns\n\t\t *\n\t\t *  @name DataTable.defaults.column.createdCell\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [3],\n\t\t *          \"createdCell\": function (td, cellData, rowData, row, col) {\n\t\t *            if ( cellData == \"1.7\" ) {\n\t\t *              $(td).css('color', 'blue')\n\t\t *            }\n\t\t *          }\n\t\t *        } ]\n\t\t *      });\n\t\t *    } );\n\t\t */\n\t\t\"fnCreatedCell\": null,\n\t\n\t\n\t\t/**\n\t\t * This parameter has been replaced by `data` in DataTables to ensure naming\n\t\t * consistency. `dataProp` can still be used, as there is backwards\n\t\t * compatibility in DataTables for this option, but it is strongly\n\t\t * recommended that you use `data` in preference to `dataProp`.\n\t\t *  @name DataTable.defaults.column.dataProp\n\t\t */\n\t\n\t\n\t\t/**\n\t\t * This property can be used to read data from any data source property,\n\t\t * including deeply nested objects / properties. `data` can be given in a\n\t\t * number of different ways which effect its behaviour:\n\t\t *\n\t\t * * `integer` - treated as an array index for the data source. This is the\n\t\t *   default that DataTables uses (incrementally increased for each column).\n\t\t * * `string` - read an object property from the data source. There are\n\t\t *   three 'special' options that can be used in the string to alter how\n\t\t *   DataTables reads the data from the source object:\n\t\t *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n\t\t *      Javascript to read from nested objects, so to can the options\n\t\t *      specified in `data`. For example: `browser.version` or\n\t\t *      `browser.name`. If your object parameter name contains a period, use\n\t\t *      `\\\\` to escape it - i.e. `first\\\\.name`.\n\t\t *    * `[]` - Array notation. DataTables can automatically combine data\n\t\t *      from and array source, joining the data with the characters provided\n\t\t *      between the two brackets. For example: `name[, ]` would provide a\n\t\t *      comma-space separated list from the source array. If no characters\n\t\t *      are provided between the brackets, the original array source is\n\t\t *      returned.\n\t\t *    * `()` - Function notation. Adding `()` to the end of a parameter will\n\t\t *      execute a function of the name given. For example: `browser()` for a\n\t\t *      simple function on the data source, `browser.version()` for a\n\t\t *      function in a nested property or even `browser().version` to get an\n\t\t *      object property if the function called returns an object. Note that\n\t\t *      function notation is recommended for use in `render` rather than\n\t\t *      `data` as it is much simpler to use as a renderer.\n\t\t * * `null` - use the original data source for the row rather than plucking\n\t\t *   data directly from it. This action has effects on two other\n\t\t *   initialisation options:\n\t\t *    * `defaultContent` - When null is given as the `data` option and\n\t\t *      `defaultContent` is specified for the column, the value defined by\n\t\t *      `defaultContent` will be used for the cell.\n\t\t *    * `render` - When null is used for the `data` option and the `render`\n\t\t *      option is specified for the column, the whole data source for the\n\t\t *      row is used for the renderer.\n\t\t * * `function` - the function given will be executed whenever DataTables\n\t\t *   needs to set or get the data for a cell in the column. The function\n\t\t *   takes three parameters:\n\t\t *    * Parameters:\n\t\t *      * `{array|object}` The data source for the row\n\t\t *      * `{string}` The type call data requested - this will be 'set' when\n\t\t *        setting data or 'filter', 'display', 'type', 'sort' or undefined\n\t\t *        when gathering data. Note that when `undefined` is given for the\n\t\t *        type DataTables expects to get the raw data for the object back<\n\t\t *      * `{*}` Data to set when the second parameter is 'set'.\n\t\t *    * Return:\n\t\t *      * The return value from the function is not required when 'set' is\n\t\t *        the type of call, but otherwise the return is what will be used\n\t\t *        for the data requested.\n\t\t *\n\t\t * Note that `data` is a getter and setter option. If you just require\n\t\t * formatting of data for output, you will likely want to use `render` which\n\t\t * is simply a getter and thus simpler to use.\n\t\t *\n\t\t * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The\n\t\t * name change reflects the flexibility of this property and is consistent\n\t\t * with the naming of mRender. If 'mDataProp' is given, then it will still\n\t\t * be used by DataTables, as it automatically maps the old name to the new\n\t\t * if required.\n\t\t *\n\t\t *  @type string|int|function|null\n\t\t *  @default null <i>Use automatically calculated column index</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.data\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Read table data from objects\n\t\t *    // JSON structure for each row:\n\t\t *    //   {\n\t\t *    //      \"engine\": {value},\n\t\t *    //      \"browser\": {value},\n\t\t *    //      \"platform\": {value},\n\t\t *    //      \"version\": {value},\n\t\t *    //      \"grade\": {value}\n\t\t *    //   }\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ajaxSource\": \"sources/objects.txt\",\n\t\t *        \"columns\": [\n\t\t *          { \"data\": \"engine\" },\n\t\t *          { \"data\": \"browser\" },\n\t\t *          { \"data\": \"platform\" },\n\t\t *          { \"data\": \"version\" },\n\t\t *          { \"data\": \"grade\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Read information from deeply nested objects\n\t\t *    // JSON structure for each row:\n\t\t *    //   {\n\t\t *    //      \"engine\": {value},\n\t\t *    //      \"browser\": {value},\n\t\t *    //      \"platform\": {\n\t\t *    //         \"inner\": {value}\n\t\t *    //      },\n\t\t *    //      \"details\": [\n\t\t *    //         {value}, {value}\n\t\t *    //      ]\n\t\t *    //   }\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ajaxSource\": \"sources/deep.txt\",\n\t\t *        \"columns\": [\n\t\t *          { \"data\": \"engine\" },\n\t\t *          { \"data\": \"browser\" },\n\t\t *          { \"data\": \"platform.inner\" },\n\t\t *          { \"data\": \"platform.details.0\" },\n\t\t *          { \"data\": \"platform.details.1\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `data` as a function to provide different information for\n\t\t *    // sorting, filtering and display. In this case, currency (price)\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": function ( source, type, val ) {\n\t\t *            if (type === 'set') {\n\t\t *              source.price = val;\n\t\t *              // Store the computed dislay and filter values for efficiency\n\t\t *              source.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);\n\t\t *              source.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;\n\t\t *              return;\n\t\t *            }\n\t\t *            else if (type === 'display') {\n\t\t *              return source.price_display;\n\t\t *            }\n\t\t *            else if (type === 'filter') {\n\t\t *              return source.price_filter;\n\t\t *            }\n\t\t *            // 'sort', 'type' and undefined all just use the integer\n\t\t *            return source.price;\n\t\t *          }\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using default content\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": null,\n\t\t *          \"defaultContent\": \"Click to edit\"\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using array notation - outputting a list from an array\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": \"name[, ]\"\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t */\n\t\t\"mData\": null,\n\t\n\t\n\t\t/**\n\t\t * This property is the rendering partner to `data` and it is suggested that\n\t\t * when you want to manipulate data for display (including filtering,\n\t\t * sorting etc) without altering the underlying data for the table, use this\n\t\t * property. `render` can be considered to be the the read only companion to\n\t\t * `data` which is read / write (then as such more complex). Like `data`\n\t\t * this option can be given in a number of different ways to effect its\n\t\t * behaviour:\n\t\t *\n\t\t * * `integer` - treated as an array index for the data source. This is the\n\t\t *   default that DataTables uses (incrementally increased for each column).\n\t\t * * `string` - read an object property from the data source. There are\n\t\t *   three 'special' options that can be used in the string to alter how\n\t\t *   DataTables reads the data from the source object:\n\t\t *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n\t\t *      Javascript to read from nested objects, so to can the options\n\t\t *      specified in `data`. For example: `browser.version` or\n\t\t *      `browser.name`. If your object parameter name contains a period, use\n\t\t *      `\\\\` to escape it - i.e. `first\\\\.name`.\n\t\t *    * `[]` - Array notation. DataTables can automatically combine data\n\t\t *      from and array source, joining the data with the characters provided\n\t\t *      between the two brackets. For example: `name[, ]` would provide a\n\t\t *      comma-space separated list from the source array. If no characters\n\t\t *      are provided between the brackets, the original array source is\n\t\t *      returned.\n\t\t *    * `()` - Function notation. Adding `()` to the end of a parameter will\n\t\t *      execute a function of the name given. For example: `browser()` for a\n\t\t *      simple function on the data source, `browser.version()` for a\n\t\t *      function in a nested property or even `browser().version` to get an\n\t\t *      object property if the function called returns an object.\n\t\t * * `object` - use different data for the different data types requested by\n\t\t *   DataTables ('filter', 'display', 'type' or 'sort'). The property names\n\t\t *   of the object is the data type the property refers to and the value can\n\t\t *   defined using an integer, string or function using the same rules as\n\t\t *   `render` normally does. Note that an `_` option _must_ be specified.\n\t\t *   This is the default value to use if you haven't specified a value for\n\t\t *   the data type requested by DataTables.\n\t\t * * `function` - the function given will be executed whenever DataTables\n\t\t *   needs to set or get the data for a cell in the column. The function\n\t\t *   takes three parameters:\n\t\t *    * Parameters:\n\t\t *      * {array|object} The data source for the row (based on `data`)\n\t\t *      * {string} The type call data requested - this will be 'filter',\n\t\t *        'display', 'type' or 'sort'.\n\t\t *      * {array|object} The full data source for the row (not based on\n\t\t *        `data`)\n\t\t *    * Return:\n\t\t *      * The return value from the function is what will be used for the\n\t\t *        data requested.\n\t\t *\n\t\t *  @type string|int|function|object|null\n\t\t *  @default null Use the data source value.\n\t\t *\n\t\t *  @name DataTable.defaults.column.render\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Create a comma separated list from an array of objects\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ajaxSource\": \"sources/deep.txt\",\n\t\t *        \"columns\": [\n\t\t *          { \"data\": \"engine\" },\n\t\t *          { \"data\": \"browser\" },\n\t\t *          {\n\t\t *            \"data\": \"platform\",\n\t\t *            \"render\": \"[, ].name\"\n\t\t *          }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Execute a function to obtain data\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": null, // Use the full data source object for the renderer's source\n\t\t *          \"render\": \"browserName()\"\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // As an object, extracting different data for the different types\n\t\t *    // This would be used with a data source such as:\n\t\t *    //   { \"phone\": 5552368, \"phone_filter\": \"5552368 555-2368\", \"phone_display\": \"555-2368\" }\n\t\t *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`\n\t\t *    // (which has both forms) is used for filtering for if a user inputs either format, while\n\t\t *    // the formatted phone number is the one that is shown in the table.\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": null, // Use the full data source object for the renderer's source\n\t\t *          \"render\": {\n\t\t *            \"_\": \"phone\",\n\t\t *            \"filter\": \"phone_filter\",\n\t\t *            \"display\": \"phone_display\"\n\t\t *          }\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Use as a function to create a link from the data source\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": \"download_link\",\n\t\t *          \"render\": function ( data, type, full ) {\n\t\t *            return '<a href=\"'+data+'\">Download</a>';\n\t\t *          }\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"mRender\": null,\n\t\n\t\n\t\t/**\n\t\t * Change the cell type created for the column - either TD cells or TH cells. This\n\t\t * can be useful as TH cells have semantic meaning in the table body, allowing them\n\t\t * to act as a header for a row (you may wish to add scope='row' to the TH elements).\n\t\t *  @type string\n\t\t *  @default td\n\t\t *\n\t\t *  @name DataTable.defaults.column.cellType\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Make the first column use TH cells\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"cellType\": \"th\"\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sCellType\": \"td\",\n\t\n\t\n\t\t/**\n\t\t * Class to give to each cell in this column.\n\t\t *  @type string\n\t\t *  @default <i>Empty string</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.class\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"class\": \"my_class\", \"targets\": [ 0 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"class\": \"my_class\" },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sClass\": \"\",\n\t\n\t\t/**\n\t\t * When DataTables calculates the column widths to assign to each column,\n\t\t * it finds the longest string in each column and then constructs a\n\t\t * temporary table and reads the widths from that. The problem with this\n\t\t * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n\t\t * string - thus the calculation can go wrong (doing it properly and putting\n\t\t * it into an DOM object and measuring that is horribly(!) slow). Thus as\n\t\t * a \"work around\" we provide this option. It will append its value to the\n\t\t * text that is found to be the longest string for the column - i.e. padding.\n\t\t * Generally you shouldn't need this!\n\t\t *  @type string\n\t\t *  @default <i>Empty string<i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.contentPadding\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          {\n\t\t *            \"contentPadding\": \"mmm\"\n\t\t *          }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sContentPadding\": \"\",\n\t\n\t\n\t\t/**\n\t\t * Allows a default value to be given for a column's data, and will be used\n\t\t * whenever a null data source is encountered (this can be because `data`\n\t\t * is set to null, or because the data source itself is null).\n\t\t *  @type string\n\t\t *  @default null\n\t\t *\n\t\t *  @name DataTable.defaults.column.defaultContent\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          {\n\t\t *            \"data\": null,\n\t\t *            \"defaultContent\": \"Edit\",\n\t\t *            \"targets\": [ -1 ]\n\t\t *          }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          {\n\t\t *            \"data\": null,\n\t\t *            \"defaultContent\": \"Edit\"\n\t\t *          }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sDefaultContent\": null,\n\t\n\t\n\t\t/**\n\t\t * This parameter is only used in DataTables' server-side processing. It can\n\t\t * be exceptionally useful to know what columns are being displayed on the\n\t\t * client side, and to map these to database fields. When defined, the names\n\t\t * also allow DataTables to reorder information from the server if it comes\n\t\t * back in an unexpected order (i.e. if you switch your columns around on the\n\t\t * client-side, your server-side code does not also need updating).\n\t\t *  @type string\n\t\t *  @default <i>Empty string</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.name\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"name\": \"engine\", \"targets\": [ 0 ] },\n\t\t *          { \"name\": \"browser\", \"targets\": [ 1 ] },\n\t\t *          { \"name\": \"platform\", \"targets\": [ 2 ] },\n\t\t *          { \"name\": \"version\", \"targets\": [ 3 ] },\n\t\t *          { \"name\": \"grade\", \"targets\": [ 4 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"name\": \"engine\" },\n\t\t *          { \"name\": \"browser\" },\n\t\t *          { \"name\": \"platform\" },\n\t\t *          { \"name\": \"version\" },\n\t\t *          { \"name\": \"grade\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sName\": \"\",\n\t\n\t\n\t\t/**\n\t\t * Defines a data source type for the ordering which can be used to read\n\t\t * real-time information from the table (updating the internally cached\n\t\t * version) prior to ordering. This allows ordering to occur on user\n\t\t * editable elements such as form inputs.\n\t\t *  @type string\n\t\t *  @default std\n\t\t *\n\t\t *  @name DataTable.defaults.column.orderDataType\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"orderDataType\": \"dom-text\", \"targets\": [ 2, 3 ] },\n\t\t *          { \"type\": \"numeric\", \"targets\": [ 3 ] },\n\t\t *          { \"orderDataType\": \"dom-select\", \"targets\": [ 4 ] },\n\t\t *          { \"orderDataType\": \"dom-checkbox\", \"targets\": [ 5 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          null,\n\t\t *          null,\n\t\t *          { \"orderDataType\": \"dom-text\" },\n\t\t *          { \"orderDataType\": \"dom-text\", \"type\": \"numeric\" },\n\t\t *          { \"orderDataType\": \"dom-select\" },\n\t\t *          { \"orderDataType\": \"dom-checkbox\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sSortDataType\": \"std\",\n\t\n\t\n\t\t/**\n\t\t * The title of this column.\n\t\t *  @type string\n\t\t *  @default null <i>Derived from the 'TH' value for this column in the\n\t\t *    original HTML table.</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.title\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"title\": \"My column title\", \"targets\": [ 0 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"title\": \"My column title\" },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sTitle\": null,\n\t\n\t\n\t\t/**\n\t\t * The type allows you to specify how the data for this column will be\n\t\t * ordered. Four types (string, numeric, date and html (which will strip\n\t\t * HTML tags before ordering)) are currently available. Note that only date\n\t\t * formats understood by Javascript's Date() object will be accepted as type\n\t\t * date. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',\n\t\t * 'numeric', 'date' or 'html' (by default). Further types can be adding\n\t\t * through plug-ins.\n\t\t *  @type string\n\t\t *  @default null <i>Auto-detected from raw data</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.type\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"type\": \"html\", \"targets\": [ 0 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"type\": \"html\" },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sType\": null,\n\t\n\t\n\t\t/**\n\t\t * Defining the width of the column, this parameter may take any CSS value\n\t\t * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not\n\t\t * been given a specific width through this interface ensuring that the table\n\t\t * remains readable.\n\t\t *  @type string\n\t\t *  @default null <i>Automatic</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.width\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"width\": \"20%\", \"targets\": [ 0 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"width\": \"20%\" },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sWidth\": null\n\t};\n\t\n\t_fnHungarianMap( DataTable.defaults.column );\n\t\n\t\n\t\n\t/**\n\t * DataTables settings object - this holds all the information needed for a\n\t * given table, including configuration, data and current application of the\n\t * table options. DataTables does not have a single instance for each DataTable\n\t * with the settings attached to that instance, but rather instances of the\n\t * DataTable \"class\" are created on-the-fly as needed (typically by a\n\t * $().dataTable() call) and the settings object is then applied to that\n\t * instance.\n\t *\n\t * Note that this object is related to {@link DataTable.defaults} but this\n\t * one is the internal data store for DataTables's cache of columns. It should\n\t * NOT be manipulated outside of DataTables. Any configuration should be done\n\t * through the initialisation options.\n\t *  @namespace\n\t *  @todo Really should attach the settings object to individual instances so we\n\t *    don't need to create new instances on each $().dataTable() call (if the\n\t *    table already exists). It would also save passing oSettings around and\n\t *    into every single function. However, this is a very significant\n\t *    architecture change for DataTables and will almost certainly break\n\t *    backwards compatibility with older installations. This is something that\n\t *    will be done in 2.0.\n\t */\n\tDataTable.models.oSettings = {\n\t\t/**\n\t\t * Primary features of DataTables and their enablement state.\n\t\t *  @namespace\n\t\t */\n\t\t\"oFeatures\": {\n\t\n\t\t\t/**\n\t\t\t * Flag to say if DataTables should automatically try to calculate the\n\t\t\t * optimum table and columns widths (true) or not (false).\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bAutoWidth\": null,\n\t\n\t\t\t/**\n\t\t\t * Delay the creation of TR and TD elements until they are actually\n\t\t\t * needed by a driven page draw. This can give a significant speed\n\t\t\t * increase for Ajax source and Javascript source data, but makes no\n\t\t\t * difference at all fro DOM and server-side processing tables.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bDeferRender\": null,\n\t\n\t\t\t/**\n\t\t\t * Enable filtering on the table or not. Note that if this is disabled\n\t\t\t * then there is no filtering at all on the table, including fnFilter.\n\t\t\t * To just remove the filtering input use sDom and remove the 'f' option.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bFilter\": null,\n\t\n\t\t\t/**\n\t\t\t * Table information element (the 'Showing x of y records' div) enable\n\t\t\t * flag.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bInfo\": null,\n\t\n\t\t\t/**\n\t\t\t * Present a user control allowing the end user to change the page size\n\t\t\t * when pagination is enabled.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bLengthChange\": null,\n\t\n\t\t\t/**\n\t\t\t * Pagination enabled or not. Note that if this is disabled then length\n\t\t\t * changing must also be disabled.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bPaginate\": null,\n\t\n\t\t\t/**\n\t\t\t * Processing indicator enable flag whenever DataTables is enacting a\n\t\t\t * user request - typically an Ajax request for server-side processing.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bProcessing\": null,\n\t\n\t\t\t/**\n\t\t\t * Server-side processing enabled flag - when enabled DataTables will\n\t\t\t * get all data from the server for every draw - there is no filtering,\n\t\t\t * sorting or paging done on the client-side.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bServerSide\": null,\n\t\n\t\t\t/**\n\t\t\t * Sorting enablement flag.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bSort\": null,\n\t\n\t\t\t/**\n\t\t\t * Multi-column sorting\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bSortMulti\": null,\n\t\n\t\t\t/**\n\t\t\t * Apply a class to the columns which are being sorted to provide a\n\t\t\t * visual highlight or not. This can slow things down when enabled since\n\t\t\t * there is a lot of DOM interaction.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bSortClasses\": null,\n\t\n\t\t\t/**\n\t\t\t * State saving enablement flag.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bStateSave\": null\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * Scrolling settings for a table.\n\t\t *  @namespace\n\t\t */\n\t\t\"oScroll\": {\n\t\t\t/**\n\t\t\t * When the table is shorter in height than sScrollY, collapse the\n\t\t\t * table container down to the height of the table (when true).\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bCollapse\": null,\n\t\n\t\t\t/**\n\t\t\t * Width of the scrollbar for the web-browser's platform. Calculated\n\t\t\t * during table initialisation.\n\t\t\t *  @type int\n\t\t\t *  @default 0\n\t\t\t */\n\t\t\t\"iBarWidth\": 0,\n\t\n\t\t\t/**\n\t\t\t * Viewport width for horizontal scrolling. Horizontal scrolling is\n\t\t\t * disabled if an empty string.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type string\n\t\t\t */\n\t\t\t\"sX\": null,\n\t\n\t\t\t/**\n\t\t\t * Width to expand the table to when using x-scrolling. Typically you\n\t\t\t * should not need to use this.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type string\n\t\t\t *  @deprecated\n\t\t\t */\n\t\t\t\"sXInner\": null,\n\t\n\t\t\t/**\n\t\t\t * Viewport height for vertical scrolling. Vertical scrolling is disabled\n\t\t\t * if an empty string.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type string\n\t\t\t */\n\t\t\t\"sY\": null\n\t\t},\n\t\n\t\t/**\n\t\t * Language information for the table.\n\t\t *  @namespace\n\t\t *  @extends DataTable.defaults.oLanguage\n\t\t */\n\t\t\"oLanguage\": {\n\t\t\t/**\n\t\t\t * Information callback function. See\n\t\t\t * {@link DataTable.defaults.fnInfoCallback}\n\t\t\t *  @type function\n\t\t\t *  @default null\n\t\t\t */\n\t\t\t\"fnInfoCallback\": null\n\t\t},\n\t\n\t\t/**\n\t\t * Browser support parameters\n\t\t *  @namespace\n\t\t */\n\t\t\"oBrowser\": {\n\t\t\t/**\n\t\t\t * Indicate if the browser incorrectly calculates width:100% inside a\n\t\t\t * scrolling element (IE6/7)\n\t\t\t *  @type boolean\n\t\t\t *  @default false\n\t\t\t */\n\t\t\t\"bScrollOversize\": false,\n\t\n\t\t\t/**\n\t\t\t * Determine if the vertical scrollbar is on the right or left of the\n\t\t\t * scrolling container - needed for rtl language layout, although not\n\t\t\t * all browsers move the scrollbar (Safari).\n\t\t\t *  @type boolean\n\t\t\t *  @default false\n\t\t\t */\n\t\t\t\"bScrollbarLeft\": false,\n\t\n\t\t\t/**\n\t\t\t * Flag for if `getBoundingClientRect` is fully supported or not\n\t\t\t *  @type boolean\n\t\t\t *  @default false\n\t\t\t */\n\t\t\t\"bBounding\": false,\n\t\n\t\t\t/**\n\t\t\t * Browser scrollbar width\n\t\t\t *  @type integer\n\t\t\t *  @default 0\n\t\t\t */\n\t\t\t\"barWidth\": 0\n\t\t},\n\t\n\t\n\t\t\"ajax\": null,\n\t\n\t\n\t\t/**\n\t\t * Array referencing the nodes which are used for the features. The\n\t\t * parameters of this object match what is allowed by sDom - i.e.\n\t\t *   <ul>\n\t\t *     <li>'l' - Length changing</li>\n\t\t *     <li>'f' - Filtering input</li>\n\t\t *     <li>'t' - The table!</li>\n\t\t *     <li>'i' - Information</li>\n\t\t *     <li>'p' - Pagination</li>\n\t\t *     <li>'r' - pRocessing</li>\n\t\t *   </ul>\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aanFeatures\": [],\n\t\n\t\t/**\n\t\t * Store data information - see {@link DataTable.models.oRow} for detailed\n\t\t * information.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoData\": [],\n\t\n\t\t/**\n\t\t * Array of indexes which are in the current display (after filtering etc)\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aiDisplay\": [],\n\t\n\t\t/**\n\t\t * Array of indexes for display - no filtering\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aiDisplayMaster\": [],\n\t\n\t\t/**\n\t\t * Map of row ids to data indexes\n\t\t *  @type object\n\t\t *  @default {}\n\t\t */\n\t\t\"aIds\": {},\n\t\n\t\t/**\n\t\t * Store information about each column that is in use\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoColumns\": [],\n\t\n\t\t/**\n\t\t * Store information about the table's header\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoHeader\": [],\n\t\n\t\t/**\n\t\t * Store information about the table's footer\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoFooter\": [],\n\t\n\t\t/**\n\t\t * Store the applied global search information in case we want to force a\n\t\t * research or compare the old search to a new one.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @namespace\n\t\t *  @extends DataTable.models.oSearch\n\t\t */\n\t\t\"oPreviousSearch\": {},\n\t\n\t\t/**\n\t\t * Store the applied search for each column - see\n\t\t * {@link DataTable.models.oSearch} for the format that is used for the\n\t\t * filtering information for each column.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoPreSearchCols\": [],\n\t\n\t\t/**\n\t\t * Sorting that is applied to the table. Note that the inner arrays are\n\t\t * used in the following manner:\n\t\t * <ul>\n\t\t *   <li>Index 0 - column number</li>\n\t\t *   <li>Index 1 - current sorting direction</li>\n\t\t * </ul>\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type array\n\t\t *  @todo These inner arrays should really be objects\n\t\t */\n\t\t\"aaSorting\": null,\n\t\n\t\t/**\n\t\t * Sorting that is always applied to the table (i.e. prefixed in front of\n\t\t * aaSorting).\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aaSortingFixed\": [],\n\t\n\t\t/**\n\t\t * Classes to use for the striping of a table.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"asStripeClasses\": null,\n\t\n\t\t/**\n\t\t * If restoring a table - we should restore its striping classes as well\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"asDestroyStripes\": [],\n\t\n\t\t/**\n\t\t * If restoring a table - we should restore its width\n\t\t *  @type int\n\t\t *  @default 0\n\t\t */\n\t\t\"sDestroyWidth\": 0,\n\t\n\t\t/**\n\t\t * Callback functions array for every time a row is inserted (i.e. on a draw).\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoRowCallback\": [],\n\t\n\t\t/**\n\t\t * Callback functions for the header on each draw.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoHeaderCallback\": [],\n\t\n\t\t/**\n\t\t * Callback function for the footer on each draw.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoFooterCallback\": [],\n\t\n\t\t/**\n\t\t * Array of callback functions for draw callback functions\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoDrawCallback\": [],\n\t\n\t\t/**\n\t\t * Array of callback functions for row created function\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoRowCreatedCallback\": [],\n\t\n\t\t/**\n\t\t * Callback functions for just before the table is redrawn. A return of\n\t\t * false will be used to cancel the draw.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoPreDrawCallback\": [],\n\t\n\t\t/**\n\t\t * Callback functions for when the table has been initialised.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoInitComplete\": [],\n\t\n\t\n\t\t/**\n\t\t * Callbacks for modifying the settings to be stored for state saving, prior to\n\t\t * saving state.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoStateSaveParams\": [],\n\t\n\t\t/**\n\t\t * Callbacks for modifying the settings that have been stored for state saving\n\t\t * prior to using the stored values to restore the state.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoStateLoadParams\": [],\n\t\n\t\t/**\n\t\t * Callbacks for operating on the settings object once the saved state has been\n\t\t * loaded\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoStateLoaded\": [],\n\t\n\t\t/**\n\t\t * Cache the table ID for quick access\n\t\t *  @type string\n\t\t *  @default <i>Empty string</i>\n\t\t */\n\t\t\"sTableId\": \"\",\n\t\n\t\t/**\n\t\t * The TABLE node for the main table\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTable\": null,\n\t\n\t\t/**\n\t\t * Permanent ref to the thead element\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTHead\": null,\n\t\n\t\t/**\n\t\t * Permanent ref to the tfoot element - if it exists\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTFoot\": null,\n\t\n\t\t/**\n\t\t * Permanent ref to the tbody element\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTBody\": null,\n\t\n\t\t/**\n\t\t * Cache the wrapper node (contains all DataTables controlled elements)\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTableWrapper\": null,\n\t\n\t\t/**\n\t\t * Indicate if when using server-side processing the loading of data\n\t\t * should be deferred until the second draw.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t */\n\t\t\"bDeferLoading\": false,\n\t\n\t\t/**\n\t\t * Indicate if all required information has been read in\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t */\n\t\t\"bInitialised\": false,\n\t\n\t\t/**\n\t\t * Information about open rows. Each object in the array has the parameters\n\t\t * 'nTr' and 'nParent'\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoOpenRows\": [],\n\t\n\t\t/**\n\t\t * Dictate the positioning of DataTables' control elements - see\n\t\t * {@link DataTable.model.oInit.sDom}.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sDom\": null,\n\t\n\t\t/**\n\t\t * Search delay (in mS)\n\t\t *  @type integer\n\t\t *  @default null\n\t\t */\n\t\t\"searchDelay\": null,\n\t\n\t\t/**\n\t\t * Which type of pagination should be used.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type string\n\t\t *  @default two_button\n\t\t */\n\t\t\"sPaginationType\": \"two_button\",\n\t\n\t\t/**\n\t\t * The state duration (for `stateSave`) in seconds.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type int\n\t\t *  @default 0\n\t\t */\n\t\t\"iStateDuration\": 0,\n\t\n\t\t/**\n\t\t * Array of callback functions for state saving. Each array element is an\n\t\t * object with the following parameters:\n\t\t *   <ul>\n\t\t *     <li>function:fn - function to call. Takes two parameters, oSettings\n\t\t *       and the JSON string to save that has been thus far created. Returns\n\t\t *       a JSON string to be inserted into a json object\n\t\t *       (i.e. '\"param\": [ 0, 1, 2]')</li>\n\t\t *     <li>string:sName - name of callback</li>\n\t\t *   </ul>\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoStateSave\": [],\n\t\n\t\t/**\n\t\t * Array of callback functions for state loading. Each array element is an\n\t\t * object with the following parameters:\n\t\t *   <ul>\n\t\t *     <li>function:fn - function to call. Takes two parameters, oSettings\n\t\t *       and the object stored. May return false to cancel state loading</li>\n\t\t *     <li>string:sName - name of callback</li>\n\t\t *   </ul>\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoStateLoad\": [],\n\t\n\t\t/**\n\t\t * State that was saved. Useful for back reference\n\t\t *  @type object\n\t\t *  @default null\n\t\t */\n\t\t\"oSavedState\": null,\n\t\n\t\t/**\n\t\t * State that was loaded. Useful for back reference\n\t\t *  @type object\n\t\t *  @default null\n\t\t */\n\t\t\"oLoadedState\": null,\n\t\n\t\t/**\n\t\t * Source url for AJAX data for the table.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sAjaxSource\": null,\n\t\n\t\t/**\n\t\t * Property from a given object from which to read the table data from. This\n\t\t * can be an empty string (when not server-side processing), in which case\n\t\t * it is  assumed an an array is given directly.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type string\n\t\t */\n\t\t\"sAjaxDataProp\": null,\n\t\n\t\t/**\n\t\t * Note if draw should be blocked while getting data\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t */\n\t\t\"bAjaxDataGet\": true,\n\t\n\t\t/**\n\t\t * The last jQuery XHR object that was used for server-side data gathering.\n\t\t * This can be used for working with the XHR information in one of the\n\t\t * callbacks\n\t\t *  @type object\n\t\t *  @default null\n\t\t */\n\t\t\"jqXHR\": null,\n\t\n\t\t/**\n\t\t * JSON returned from the server in the last Ajax request\n\t\t *  @type object\n\t\t *  @default undefined\n\t\t */\n\t\t\"json\": undefined,\n\t\n\t\t/**\n\t\t * Data submitted as part of the last Ajax request\n\t\t *  @type object\n\t\t *  @default undefined\n\t\t */\n\t\t\"oAjaxData\": undefined,\n\t\n\t\t/**\n\t\t * Function to get the server-side data.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type function\n\t\t */\n\t\t\"fnServerData\": null,\n\t\n\t\t/**\n\t\t * Functions which are called prior to sending an Ajax request so extra\n\t\t * parameters can easily be sent to the server\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoServerParams\": [],\n\t\n\t\t/**\n\t\t * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if\n\t\t * required).\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type string\n\t\t */\n\t\t\"sServerMethod\": null,\n\t\n\t\t/**\n\t\t * Format numbers for display.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type function\n\t\t */\n\t\t\"fnFormatNumber\": null,\n\t\n\t\t/**\n\t\t * List of options that can be used for the user selectable length menu.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aLengthMenu\": null,\n\t\n\t\t/**\n\t\t * Counter for the draws that the table does. Also used as a tracker for\n\t\t * server-side processing\n\t\t *  @type int\n\t\t *  @default 0\n\t\t */\n\t\t\"iDraw\": 0,\n\t\n\t\t/**\n\t\t * Indicate if a redraw is being done - useful for Ajax\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t */\n\t\t\"bDrawing\": false,\n\t\n\t\t/**\n\t\t * Draw index (iDraw) of the last error when parsing the returned data\n\t\t *  @type int\n\t\t *  @default -1\n\t\t */\n\t\t\"iDrawError\": -1,\n\t\n\t\t/**\n\t\t * Paging display length\n\t\t *  @type int\n\t\t *  @default 10\n\t\t */\n\t\t\"_iDisplayLength\": 10,\n\t\n\t\t/**\n\t\t * Paging start point - aiDisplay index\n\t\t *  @type int\n\t\t *  @default 0\n\t\t */\n\t\t\"_iDisplayStart\": 0,\n\t\n\t\t/**\n\t\t * Server-side processing - number of records in the result set\n\t\t * (i.e. before filtering), Use fnRecordsTotal rather than\n\t\t * this property to get the value of the number of records, regardless of\n\t\t * the server-side processing setting.\n\t\t *  @type int\n\t\t *  @default 0\n\t\t *  @private\n\t\t */\n\t\t\"_iRecordsTotal\": 0,\n\t\n\t\t/**\n\t\t * Server-side processing - number of records in the current display set\n\t\t * (i.e. after filtering). Use fnRecordsDisplay rather than\n\t\t * this property to get the value of the number of records, regardless of\n\t\t * the server-side processing setting.\n\t\t *  @type boolean\n\t\t *  @default 0\n\t\t *  @private\n\t\t */\n\t\t\"_iRecordsDisplay\": 0,\n\t\n\t\t/**\n\t\t * The classes to use for the table\n\t\t *  @type object\n\t\t *  @default {}\n\t\t */\n\t\t\"oClasses\": {},\n\t\n\t\t/**\n\t\t * Flag attached to the settings object so you can check in the draw\n\t\t * callback if filtering has been done in the draw. Deprecated in favour of\n\t\t * events.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *  @deprecated\n\t\t */\n\t\t\"bFiltered\": false,\n\t\n\t\t/**\n\t\t * Flag attached to the settings object so you can check in the draw\n\t\t * callback if sorting has been done in the draw. Deprecated in favour of\n\t\t * events.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *  @deprecated\n\t\t */\n\t\t\"bSorted\": false,\n\t\n\t\t/**\n\t\t * Indicate that if multiple rows are in the header and there is more than\n\t\t * one unique cell per column, if the top one (true) or bottom one (false)\n\t\t * should be used for sorting / title by DataTables.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bSortCellsTop\": null,\n\t\n\t\t/**\n\t\t * Initialisation object that is used for the table\n\t\t *  @type object\n\t\t *  @default null\n\t\t */\n\t\t\"oInit\": null,\n\t\n\t\t/**\n\t\t * Destroy callback functions - for plug-ins to attach themselves to the\n\t\t * destroy so they can clean up markup and events.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoDestroyCallback\": [],\n\t\n\t\n\t\t/**\n\t\t * Get the number of records in the current record set, before filtering\n\t\t *  @type function\n\t\t */\n\t\t\"fnRecordsTotal\": function ()\n\t\t{\n\t\t\treturn _fnDataSource( this ) == 'ssp' ?\n\t\t\t\tthis._iRecordsTotal * 1 :\n\t\t\t\tthis.aiDisplayMaster.length;\n\t\t},\n\t\n\t\t/**\n\t\t * Get the number of records in the current record set, after filtering\n\t\t *  @type function\n\t\t */\n\t\t\"fnRecordsDisplay\": function ()\n\t\t{\n\t\t\treturn _fnDataSource( this ) == 'ssp' ?\n\t\t\t\tthis._iRecordsDisplay * 1 :\n\t\t\t\tthis.aiDisplay.length;\n\t\t},\n\t\n\t\t/**\n\t\t * Get the display end point - aiDisplay index\n\t\t *  @type function\n\t\t */\n\t\t\"fnDisplayEnd\": function ()\n\t\t{\n\t\t\tvar\n\t\t\t\tlen      = this._iDisplayLength,\n\t\t\t\tstart    = this._iDisplayStart,\n\t\t\t\tcalc     = start + len,\n\t\t\t\trecords  = this.aiDisplay.length,\n\t\t\t\tfeatures = this.oFeatures,\n\t\t\t\tpaginate = features.bPaginate;\n\t\n\t\t\tif ( features.bServerSide ) {\n\t\t\t\treturn paginate === false || len === -1 ?\n\t\t\t\t\tstart + records :\n\t\t\t\t\tMath.min( start+len, this._iRecordsDisplay );\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn ! paginate || calc>records || len===-1 ?\n\t\t\t\t\trecords :\n\t\t\t\t\tcalc;\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * The DataTables object for this table\n\t\t *  @type object\n\t\t *  @default null\n\t\t */\n\t\t\"oInstance\": null,\n\t\n\t\t/**\n\t\t * Unique identifier for each instance of the DataTables object. If there\n\t\t * is an ID on the table node, then it takes that value, otherwise an\n\t\t * incrementing internal counter is used.\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sInstance\": null,\n\t\n\t\t/**\n\t\t * tabindex attribute value that is added to DataTables control elements, allowing\n\t\t * keyboard navigation of the table and its controls.\n\t\t */\n\t\t\"iTabIndex\": 0,\n\t\n\t\t/**\n\t\t * DIV container for the footer scrolling table if scrolling\n\t\t */\n\t\t\"nScrollHead\": null,\n\t\n\t\t/**\n\t\t * DIV container for the footer scrolling table if scrolling\n\t\t */\n\t\t\"nScrollFoot\": null,\n\t\n\t\t/**\n\t\t * Last applied sort\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aLastSort\": [],\n\t\n\t\t/**\n\t\t * Stored plug-in instances\n\t\t *  @type object\n\t\t *  @default {}\n\t\t */\n\t\t\"oPlugins\": {},\n\t\n\t\t/**\n\t\t * Function used to get a row's id from the row's data\n\t\t *  @type function\n\t\t *  @default null\n\t\t */\n\t\t\"rowIdFn\": null,\n\t\n\t\t/**\n\t\t * Data location where to store a row's id\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"rowId\": null\n\t};\n\n\t/**\n\t * Extension object for DataTables that is used to provide all extension\n\t * options.\n\t *\n\t * Note that the `DataTable.ext` object is available through\n\t * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is\n\t * also aliased to `jQuery.fn.dataTableExt` for historic reasons.\n\t *  @namespace\n\t *  @extends DataTable.models.ext\n\t */\n\t\n\t\n\t/**\n\t * DataTables extensions\n\t * \n\t * This namespace acts as a collection area for plug-ins that can be used to\n\t * extend DataTables capabilities. Indeed many of the build in methods\n\t * use this method to provide their own capabilities (sorting methods for\n\t * example).\n\t *\n\t * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy\n\t * reasons\n\t *\n\t *  @namespace\n\t */\n\tDataTable.ext = _ext = {\n\t\t/**\n\t\t * Buttons. For use with the Buttons extension for DataTables. This is\n\t\t * defined here so other extensions can define buttons regardless of load\n\t\t * order. It is _not_ used by DataTables core.\n\t\t *\n\t\t *  @type object\n\t\t *  @default {}\n\t\t */\n\t\tbuttons: {},\n\t\n\t\n\t\t/**\n\t\t * Element class names\n\t\t *\n\t\t *  @type object\n\t\t *  @default {}\n\t\t */\n\t\tclasses: {},\n\t\n\t\n\t\t/**\n\t\t * DataTables build type (expanded by the download builder)\n\t\t *\n\t\t *  @type string\n\t\t */\n\t\tbuilder: \"-source-\",\n\t\n\t\n\t\t/**\n\t\t * Error reporting.\n\t\t * \n\t\t * How should DataTables report an error. Can take the value 'alert',\n\t\t * 'throw', 'none' or a function.\n\t\t *\n\t\t *  @type string|function\n\t\t *  @default alert\n\t\t */\n\t\terrMode: \"alert\",\n\t\n\t\n\t\t/**\n\t\t * Feature plug-ins.\n\t\t * \n\t\t * This is an array of objects which describe the feature plug-ins that are\n\t\t * available to DataTables. These feature plug-ins are then available for\n\t\t * use through the `dom` initialisation option.\n\t\t * \n\t\t * Each feature plug-in is described by an object which must have the\n\t\t * following properties:\n\t\t * \n\t\t * * `fnInit` - function that is used to initialise the plug-in,\n\t\t * * `cFeature` - a character so the feature can be enabled by the `dom`\n\t\t *   instillation option. This is case sensitive.\n\t\t *\n\t\t * The `fnInit` function has the following input parameters:\n\t\t *\n\t\t * 1. `{object}` DataTables settings object: see\n\t\t *    {@link DataTable.models.oSettings}\n\t\t *\n\t\t * And the following return is expected:\n\t\t * \n\t\t * * {node|null} The element which contains your feature. Note that the\n\t\t *   return may also be void if your plug-in does not require to inject any\n\t\t *   DOM elements into DataTables control (`dom`) - for example this might\n\t\t *   be useful when developing a plug-in which allows table control via\n\t\t *   keyboard entry\n\t\t *\n\t\t *  @type array\n\t\t *\n\t\t *  @example\n\t\t *    $.fn.dataTable.ext.features.push( {\n\t\t *      \"fnInit\": function( oSettings ) {\n\t\t *        return new TableTools( { \"oDTSettings\": oSettings } );\n\t\t *      },\n\t\t *      \"cFeature\": \"T\"\n\t\t *    } );\n\t\t */\n\t\tfeature: [],\n\t\n\t\n\t\t/**\n\t\t * Row searching.\n\t\t * \n\t\t * This method of searching is complimentary to the default type based\n\t\t * searching, and a lot more comprehensive as it allows you complete control\n\t\t * over the searching logic. Each element in this array is a function\n\t\t * (parameters described below) that is called for every row in the table,\n\t\t * and your logic decides if it should be included in the searching data set\n\t\t * or not.\n\t\t *\n\t\t * Searching functions have the following input parameters:\n\t\t *\n\t\t * 1. `{object}` DataTables settings object: see\n\t\t *    {@link DataTable.models.oSettings}\n\t\t * 2. `{array|object}` Data for the row to be processed (same as the\n\t\t *    original format that was passed in as the data source, or an array\n\t\t *    from a DOM data source\n\t\t * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which\n\t\t *    can be useful to retrieve the `TR` element if you need DOM interaction.\n\t\t *\n\t\t * And the following return is expected:\n\t\t *\n\t\t * * {boolean} Include the row in the searched result set (true) or not\n\t\t *   (false)\n\t\t *\n\t\t * Note that as with the main search ability in DataTables, technically this\n\t\t * is \"filtering\", since it is subtractive. However, for consistency in\n\t\t * naming we call it searching here.\n\t\t *\n\t\t *  @type array\n\t\t *  @default []\n\t\t *\n\t\t *  @example\n\t\t *    // The following example shows custom search being applied to the\n\t\t *    // fourth column (i.e. the data[3] index) based on two input values\n\t\t *    // from the end-user, matching the data in a certain range.\n\t\t *    $.fn.dataTable.ext.search.push(\n\t\t *      function( settings, data, dataIndex ) {\n\t\t *        var min = document.getElementById('min').value * 1;\n\t\t *        var max = document.getElementById('max').value * 1;\n\t\t *        var version = data[3] == \"-\" ? 0 : data[3]*1;\n\t\t *\n\t\t *        if ( min == \"\" && max == \"\" ) {\n\t\t *          return true;\n\t\t *        }\n\t\t *        else if ( min == \"\" && version < max ) {\n\t\t *          return true;\n\t\t *        }\n\t\t *        else if ( min < version && \"\" == max ) {\n\t\t *          return true;\n\t\t *        }\n\t\t *        else if ( min < version && version < max ) {\n\t\t *          return true;\n\t\t *        }\n\t\t *        return false;\n\t\t *      }\n\t\t *    );\n\t\t */\n\t\tsearch: [],\n\t\n\t\n\t\t/**\n\t\t * Selector extensions\n\t\t *\n\t\t * The `selector` option can be used to extend the options available for the\n\t\t * selector modifier options (`selector-modifier` object data type) that\n\t\t * each of the three built in selector types offer (row, column and cell +\n\t\t * their plural counterparts). For example the Select extension uses this\n\t\t * mechanism to provide an option to select only rows, columns and cells\n\t\t * that have been marked as selected by the end user (`{selected: true}`),\n\t\t * which can be used in conjunction with the existing built in selector\n\t\t * options.\n\t\t *\n\t\t * Each property is an array to which functions can be pushed. The functions\n\t\t * take three attributes:\n\t\t *\n\t\t * * Settings object for the host table\n\t\t * * Options object (`selector-modifier` object type)\n\t\t * * Array of selected item indexes\n\t\t *\n\t\t * The return is an array of the resulting item indexes after the custom\n\t\t * selector has been applied.\n\t\t *\n\t\t *  @type object\n\t\t */\n\t\tselector: {\n\t\t\tcell: [],\n\t\t\tcolumn: [],\n\t\t\trow: []\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * Internal functions, exposed for used in plug-ins.\n\t\t * \n\t\t * Please note that you should not need to use the internal methods for\n\t\t * anything other than a plug-in (and even then, try to avoid if possible).\n\t\t * The internal function may change between releases.\n\t\t *\n\t\t *  @type object\n\t\t *  @default {}\n\t\t */\n\t\tinternal: {},\n\t\n\t\n\t\t/**\n\t\t * Legacy configuration options. Enable and disable legacy options that\n\t\t * are available in DataTables.\n\t\t *\n\t\t *  @type object\n\t\t */\n\t\tlegacy: {\n\t\t\t/**\n\t\t\t * Enable / disable DataTables 1.9 compatible server-side processing\n\t\t\t * requests\n\t\t\t *\n\t\t\t *  @type boolean\n\t\t\t *  @default null\n\t\t\t */\n\t\t\tajax: null\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * Pagination plug-in methods.\n\t\t * \n\t\t * Each entry in this object is a function and defines which buttons should\n\t\t * be shown by the pagination rendering method that is used for the table:\n\t\t * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the\n\t\t * buttons are displayed in the document, while the functions here tell it\n\t\t * what buttons to display. This is done by returning an array of button\n\t\t * descriptions (what each button will do).\n\t\t *\n\t\t * Pagination types (the four built in options and any additional plug-in\n\t\t * options defined here) can be used through the `paginationType`\n\t\t * initialisation parameter.\n\t\t *\n\t\t * The functions defined take two parameters:\n\t\t *\n\t\t * 1. `{int} page` The current page index\n\t\t * 2. `{int} pages` The number of pages in the table\n\t\t *\n\t\t * Each function is expected to return an array where each element of the\n\t\t * array can be one of:\n\t\t *\n\t\t * * `first` - Jump to first page when activated\n\t\t * * `last` - Jump to last page when activated\n\t\t * * `previous` - Show previous page when activated\n\t\t * * `next` - Show next page when activated\n\t\t * * `{int}` - Show page of the index given\n\t\t * * `{array}` - A nested array containing the above elements to add a\n\t\t *   containing 'DIV' element (might be useful for styling).\n\t\t *\n\t\t * Note that DataTables v1.9- used this object slightly differently whereby\n\t\t * an object with two functions would be defined for each plug-in. That\n\t\t * ability is still supported by DataTables 1.10+ to provide backwards\n\t\t * compatibility, but this option of use is now decremented and no longer\n\t\t * documented in DataTables 1.10+.\n\t\t *\n\t\t *  @type object\n\t\t *  @default {}\n\t\t *\n\t\t *  @example\n\t\t *    // Show previous, next and current page buttons only\n\t\t *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {\n\t\t *      return [ 'previous', page, 'next' ];\n\t\t *    };\n\t\t */\n\t\tpager: {},\n\t\n\t\n\t\trenderer: {\n\t\t\tpageButton: {},\n\t\t\theader: {}\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * Ordering plug-ins - custom data source\n\t\t * \n\t\t * The extension options for ordering of data available here is complimentary\n\t\t * to the default type based ordering that DataTables typically uses. It\n\t\t * allows much greater control over the the data that is being used to\n\t\t * order a column, but is necessarily therefore more complex.\n\t\t * \n\t\t * This type of ordering is useful if you want to do ordering based on data\n\t\t * live from the DOM (for example the contents of an 'input' element) rather\n\t\t * than just the static string that DataTables knows of.\n\t\t * \n\t\t * The way these plug-ins work is that you create an array of the values you\n\t\t * wish to be ordering for the column in question and then return that\n\t\t * array. The data in the array much be in the index order of the rows in\n\t\t * the table (not the currently ordering order!). Which order data gathering\n\t\t * function is run here depends on the `dt-init columns.orderDataType`\n\t\t * parameter that is used for the column (if any).\n\t\t *\n\t\t * The functions defined take two parameters:\n\t\t *\n\t\t * 1. `{object}` DataTables settings object: see\n\t\t *    {@link DataTable.models.oSettings}\n\t\t * 2. `{int}` Target column index\n\t\t *\n\t\t * Each function is expected to return an array:\n\t\t *\n\t\t * * `{array}` Data for the column to be ordering upon\n\t\t *\n\t\t *  @type array\n\t\t *\n\t\t *  @example\n\t\t *    // Ordering using `input` node values\n\t\t *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )\n\t\t *    {\n\t\t *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {\n\t\t *        return $('input', td).val();\n\t\t *      } );\n\t\t *    }\n\t\t */\n\t\torder: {},\n\t\n\t\n\t\t/**\n\t\t * Type based plug-ins.\n\t\t *\n\t\t * Each column in DataTables has a type assigned to it, either by automatic\n\t\t * detection or by direct assignment using the `type` option for the column.\n\t\t * The type of a column will effect how it is ordering and search (plug-ins\n\t\t * can also make use of the column type if required).\n\t\t *\n\t\t * @namespace\n\t\t */\n\t\ttype: {\n\t\t\t/**\n\t\t\t * Type detection functions.\n\t\t\t *\n\t\t\t * The functions defined in this object are used to automatically detect\n\t\t\t * a column's type, making initialisation of DataTables super easy, even\n\t\t\t * when complex data is in the table.\n\t\t\t *\n\t\t\t * The functions defined take two parameters:\n\t\t\t *\n\t\t     *  1. `{*}` Data from the column cell to be analysed\n\t\t     *  2. `{settings}` DataTables settings object. This can be used to\n\t\t     *     perform context specific type detection - for example detection\n\t\t     *     based on language settings such as using a comma for a decimal\n\t\t     *     place. Generally speaking the options from the settings will not\n\t\t     *     be required\n\t\t\t *\n\t\t\t * Each function is expected to return:\n\t\t\t *\n\t\t\t * * `{string|null}` Data type detected, or null if unknown (and thus\n\t\t\t *   pass it on to the other type detection functions.\n\t\t\t *\n\t\t\t *  @type array\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Currency type detection plug-in:\n\t\t\t *    $.fn.dataTable.ext.type.detect.push(\n\t\t\t *      function ( data, settings ) {\n\t\t\t *        // Check the numeric part\n\t\t\t *        if ( ! $.isNumeric( data.substring(1) ) ) {\n\t\t\t *          return null;\n\t\t\t *        }\n\t\t\t *\n\t\t\t *        // Check prefixed by currency\n\t\t\t *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {\n\t\t\t *          return 'currency';\n\t\t\t *        }\n\t\t\t *        return null;\n\t\t\t *      }\n\t\t\t *    );\n\t\t\t */\n\t\t\tdetect: [],\n\t\n\t\n\t\t\t/**\n\t\t\t * Type based search formatting.\n\t\t\t *\n\t\t\t * The type based searching functions can be used to pre-format the\n\t\t\t * data to be search on. For example, it can be used to strip HTML\n\t\t\t * tags or to de-format telephone numbers for numeric only searching.\n\t\t\t *\n\t\t\t * Note that is a search is not defined for a column of a given type,\n\t\t\t * no search formatting will be performed.\n\t\t\t * \n\t\t\t * Pre-processing of searching data plug-ins - When you assign the sType\n\t\t\t * for a column (or have it automatically detected for you by DataTables\n\t\t\t * or a type detection plug-in), you will typically be using this for\n\t\t\t * custom sorting, but it can also be used to provide custom searching\n\t\t\t * by allowing you to pre-processing the data and returning the data in\n\t\t\t * the format that should be searched upon. This is done by adding\n\t\t\t * functions this object with a parameter name which matches the sType\n\t\t\t * for that target column. This is the corollary of <i>afnSortData</i>\n\t\t\t * for searching data.\n\t\t\t *\n\t\t\t * The functions defined take a single parameter:\n\t\t\t *\n\t\t     *  1. `{*}` Data from the column cell to be prepared for searching\n\t\t\t *\n\t\t\t * Each function is expected to return:\n\t\t\t *\n\t\t\t * * `{string|null}` Formatted string that will be used for the searching.\n\t\t\t *\n\t\t\t *  @type object\n\t\t\t *  @default {}\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {\n\t\t\t *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\n\t\t\t *    }\n\t\t\t */\n\t\t\tsearch: {},\n\t\n\t\n\t\t\t/**\n\t\t\t * Type based ordering.\n\t\t\t *\n\t\t\t * The column type tells DataTables what ordering to apply to the table\n\t\t\t * when a column is sorted upon. The order for each type that is defined,\n\t\t\t * is defined by the functions available in this object.\n\t\t\t *\n\t\t\t * Each ordering option can be described by three properties added to\n\t\t\t * this object:\n\t\t\t *\n\t\t\t * * `{type}-pre` - Pre-formatting function\n\t\t\t * * `{type}-asc` - Ascending order function\n\t\t\t * * `{type}-desc` - Descending order function\n\t\t\t *\n\t\t\t * All three can be used together, only `{type}-pre` or only\n\t\t\t * `{type}-asc` and `{type}-desc` together. It is generally recommended\n\t\t\t * that only `{type}-pre` is used, as this provides the optimal\n\t\t\t * implementation in terms of speed, although the others are provided\n\t\t\t * for compatibility with existing Javascript sort functions.\n\t\t\t *\n\t\t\t * `{type}-pre`: Functions defined take a single parameter:\n\t\t\t *\n\t\t     *  1. `{*}` Data from the column cell to be prepared for ordering\n\t\t\t *\n\t\t\t * And return:\n\t\t\t *\n\t\t\t * * `{*}` Data to be sorted upon\n\t\t\t *\n\t\t\t * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort\n\t\t\t * functions, taking two parameters:\n\t\t\t *\n\t\t     *  1. `{*}` Data to compare to the second parameter\n\t\t     *  2. `{*}` Data to compare to the first parameter\n\t\t\t *\n\t\t\t * And returning:\n\t\t\t *\n\t\t\t * * `{*}` Ordering match: <0 if first parameter should be sorted lower\n\t\t\t *   than the second parameter, ===0 if the two parameters are equal and\n\t\t\t *   >0 if the first parameter should be sorted height than the second\n\t\t\t *   parameter.\n\t\t\t * \n\t\t\t *  @type object\n\t\t\t *  @default {}\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Numeric ordering of formatted numbers with a pre-formatter\n\t\t\t *    $.extend( $.fn.dataTable.ext.type.order, {\n\t\t\t *      \"string-pre\": function(x) {\n\t\t\t *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );\n\t\t\t *        return parseFloat( a );\n\t\t\t *      }\n\t\t\t *    } );\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Case-sensitive string ordering, with no pre-formatting method\n\t\t\t *    $.extend( $.fn.dataTable.ext.order, {\n\t\t\t *      \"string-case-asc\": function(x,y) {\n\t\t\t *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n\t\t\t *      },\n\t\t\t *      \"string-case-desc\": function(x,y) {\n\t\t\t *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n\t\t\t *      }\n\t\t\t *    } );\n\t\t\t */\n\t\t\torder: {}\n\t\t},\n\t\n\t\t/**\n\t\t * Unique DataTables instance counter\n\t\t *\n\t\t * @type int\n\t\t * @private\n\t\t */\n\t\t_unique: 0,\n\t\n\t\n\t\t//\n\t\t// Depreciated\n\t\t// The following properties are retained for backwards compatiblity only.\n\t\t// The should not be used in new projects and will be removed in a future\n\t\t// version\n\t\t//\n\t\n\t\t/**\n\t\t * Version check function.\n\t\t *  @type function\n\t\t *  @depreciated Since 1.10\n\t\t */\n\t\tfnVersionCheck: DataTable.fnVersionCheck,\n\t\n\t\n\t\t/**\n\t\t * Index for what 'this' index API functions should use\n\t\t *  @type int\n\t\t *  @deprecated Since v1.10\n\t\t */\n\t\tiApiIndex: 0,\n\t\n\t\n\t\t/**\n\t\t * jQuery UI class container\n\t\t *  @type object\n\t\t *  @deprecated Since v1.10\n\t\t */\n\t\toJUIClasses: {},\n\t\n\t\n\t\t/**\n\t\t * Software version\n\t\t *  @type string\n\t\t *  @deprecated Since v1.10\n\t\t */\n\t\tsVersion: DataTable.version\n\t};\n\t\n\t\n\t//\n\t// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts\n\t//\n\t$.extend( _ext, {\n\t\tafnFiltering: _ext.search,\n\t\taTypes:       _ext.type.detect,\n\t\tofnSearch:    _ext.type.search,\n\t\toSort:        _ext.type.order,\n\t\tafnSortData:  _ext.order,\n\t\taoFeatures:   _ext.feature,\n\t\toApi:         _ext.internal,\n\t\toStdClasses:  _ext.classes,\n\t\toPagination:  _ext.pager\n\t} );\n\t\n\t\n\t$.extend( DataTable.ext.classes, {\n\t\t\"sTable\": \"dataTable\",\n\t\t\"sNoFooter\": \"no-footer\",\n\t\n\t\t/* Paging buttons */\n\t\t\"sPageButton\": \"paginate_button\",\n\t\t\"sPageButtonActive\": \"current\",\n\t\t\"sPageButtonDisabled\": \"disabled\",\n\t\n\t\t/* Striping classes */\n\t\t\"sStripeOdd\": \"odd\",\n\t\t\"sStripeEven\": \"even\",\n\t\n\t\t/* Empty row */\n\t\t\"sRowEmpty\": \"dataTables_empty\",\n\t\n\t\t/* Features */\n\t\t\"sWrapper\": \"dataTables_wrapper\",\n\t\t\"sFilter\": \"dataTables_filter\",\n\t\t\"sInfo\": \"dataTables_info\",\n\t\t\"sPaging\": \"dataTables_paginate paging_\", /* Note that the type is postfixed */\n\t\t\"sLength\": \"dataTables_length\",\n\t\t\"sProcessing\": \"dataTables_processing\",\n\t\n\t\t/* Sorting */\n\t\t\"sSortAsc\": \"sorting_asc\",\n\t\t\"sSortDesc\": \"sorting_desc\",\n\t\t\"sSortable\": \"sorting\", /* Sortable in both directions */\n\t\t\"sSortableAsc\": \"sorting_asc_disabled\",\n\t\t\"sSortableDesc\": \"sorting_desc_disabled\",\n\t\t\"sSortableNone\": \"sorting_disabled\",\n\t\t\"sSortColumn\": \"sorting_\", /* Note that an int is postfixed for the sorting order */\n\t\n\t\t/* Filtering */\n\t\t\"sFilterInput\": \"\",\n\t\n\t\t/* Page length */\n\t\t\"sLengthSelect\": \"\",\n\t\n\t\t/* Scrolling */\n\t\t\"sScrollWrapper\": \"dataTables_scroll\",\n\t\t\"sScrollHead\": \"dataTables_scrollHead\",\n\t\t\"sScrollHeadInner\": \"dataTables_scrollHeadInner\",\n\t\t\"sScrollBody\": \"dataTables_scrollBody\",\n\t\t\"sScrollFoot\": \"dataTables_scrollFoot\",\n\t\t\"sScrollFootInner\": \"dataTables_scrollFootInner\",\n\t\n\t\t/* Misc */\n\t\t\"sHeaderTH\": \"\",\n\t\t\"sFooterTH\": \"\",\n\t\n\t\t// Deprecated\n\t\t\"sSortJUIAsc\": \"\",\n\t\t\"sSortJUIDesc\": \"\",\n\t\t\"sSortJUI\": \"\",\n\t\t\"sSortJUIAscAllowed\": \"\",\n\t\t\"sSortJUIDescAllowed\": \"\",\n\t\t\"sSortJUIWrapper\": \"\",\n\t\t\"sSortIcon\": \"\",\n\t\t\"sJUIHeader\": \"\",\n\t\t\"sJUIFooter\": \"\"\n\t} );\n\t\n\t\n\tvar extPagination = DataTable.ext.pager;\n\t\n\tfunction _numbers ( page, pages ) {\n\t\tvar\n\t\t\tnumbers = [],\n\t\t\tbuttons = extPagination.numbers_length,\n\t\t\thalf = Math.floor( buttons / 2 ),\n\t\t\ti = 1;\n\t\n\t\tif ( pages <= buttons ) {\n\t\t\tnumbers = _range( 0, pages );\n\t\t}\n\t\telse if ( page <= half ) {\n\t\t\tnumbers = _range( 0, buttons-2 );\n\t\t\tnumbers.push( 'ellipsis' );\n\t\t\tnumbers.push( pages-1 );\n\t\t}\n\t\telse if ( page >= pages - 1 - half ) {\n\t\t\tnumbers = _range( pages-(buttons-2), pages );\n\t\t\tnumbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6\n\t\t\tnumbers.splice( 0, 0, 0 );\n\t\t}\n\t\telse {\n\t\t\tnumbers = _range( page-half+2, page+half-1 );\n\t\t\tnumbers.push( 'ellipsis' );\n\t\t\tnumbers.push( pages-1 );\n\t\t\tnumbers.splice( 0, 0, 'ellipsis' );\n\t\t\tnumbers.splice( 0, 0, 0 );\n\t\t}\n\t\n\t\tnumbers.DT_el = 'span';\n\t\treturn numbers;\n\t}\n\t\n\t\n\t$.extend( extPagination, {\n\t\tsimple: function ( page, pages ) {\n\t\t\treturn [ 'previous', 'next' ];\n\t\t},\n\t\n\t\tfull: function ( page, pages ) {\n\t\t\treturn [  'first', 'previous', 'next', 'last' ];\n\t\t},\n\t\n\t\tnumbers: function ( page, pages ) {\n\t\t\treturn [ _numbers(page, pages) ];\n\t\t},\n\t\n\t\tsimple_numbers: function ( page, pages ) {\n\t\t\treturn [ 'previous', _numbers(page, pages), 'next' ];\n\t\t},\n\t\n\t\tfull_numbers: function ( page, pages ) {\n\t\t\treturn [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];\n\t\t},\n\t\t\n\t\tfirst_last_numbers: function (page, pages) {\n\t \t\treturn ['first', _numbers(page, pages), 'last'];\n\t \t},\n\t\n\t\t// For testing and plug-ins to use\n\t\t_numbers: _numbers,\n\t\n\t\t// Number of number buttons (including ellipsis) to show. _Must be odd!_\n\t\tnumbers_length: 7\n\t} );\n\t\n\t\n\t$.extend( true, DataTable.ext.renderer, {\n\t\tpageButton: {\n\t\t\t_: function ( settings, host, idx, buttons, page, pages ) {\n\t\t\t\tvar classes = settings.oClasses;\n\t\t\t\tvar lang = settings.oLanguage.oPaginate;\n\t\t\t\tvar aria = settings.oLanguage.oAria.paginate || {};\n\t\t\t\tvar btnDisplay, btnClass, counter=0;\n\t\n\t\t\t\tvar attach = function( container, buttons ) {\n\t\t\t\t\tvar i, ien, node, button;\n\t\t\t\t\tvar clickHandler = function ( e ) {\n\t\t\t\t\t\t_fnPageChange( settings, e.data.action, true );\n\t\t\t\t\t};\n\t\n\t\t\t\t\tfor ( i=0, ien=buttons.length ; i<ien ; i++ ) {\n\t\t\t\t\t\tbutton = buttons[i];\n\t\n\t\t\t\t\t\tif ( $.isArray( button ) ) {\n\t\t\t\t\t\t\tvar inner = $( '<'+(button.DT_el || 'div')+'/>' )\n\t\t\t\t\t\t\t\t.appendTo( container );\n\t\t\t\t\t\t\tattach( inner, button );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tbtnDisplay = null;\n\t\t\t\t\t\t\tbtnClass = '';\n\t\n\t\t\t\t\t\t\tswitch ( button ) {\n\t\t\t\t\t\t\t\tcase 'ellipsis':\n\t\t\t\t\t\t\t\t\tcontainer.append('<span class=\"ellipsis\">&#x2026;</span>');\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\tcase 'first':\n\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sFirst;\n\t\t\t\t\t\t\t\t\tbtnClass = button + (page > 0 ?\n\t\t\t\t\t\t\t\t\t\t'' : ' '+classes.sPageButtonDisabled);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\tcase 'previous':\n\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sPrevious;\n\t\t\t\t\t\t\t\t\tbtnClass = button + (page > 0 ?\n\t\t\t\t\t\t\t\t\t\t'' : ' '+classes.sPageButtonDisabled);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\tcase 'next':\n\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sNext;\n\t\t\t\t\t\t\t\t\tbtnClass = button + (page < pages-1 ?\n\t\t\t\t\t\t\t\t\t\t'' : ' '+classes.sPageButtonDisabled);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\tcase 'last':\n\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sLast;\n\t\t\t\t\t\t\t\t\tbtnClass = button + (page < pages-1 ?\n\t\t\t\t\t\t\t\t\t\t'' : ' '+classes.sPageButtonDisabled);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tbtnDisplay = button + 1;\n\t\t\t\t\t\t\t\t\tbtnClass = page === button ?\n\t\t\t\t\t\t\t\t\t\tclasses.sPageButtonActive : '';\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tif ( btnDisplay !== null ) {\n\t\t\t\t\t\t\t\tnode = $('<a>', {\n\t\t\t\t\t\t\t\t\t\t'class': classes.sPageButton+' '+btnClass,\n\t\t\t\t\t\t\t\t\t\t'aria-controls': settings.sTableId,\n\t\t\t\t\t\t\t\t\t\t'aria-label': aria[ button ],\n\t\t\t\t\t\t\t\t\t\t'data-dt-idx': counter,\n\t\t\t\t\t\t\t\t\t\t'tabindex': settings.iTabIndex,\n\t\t\t\t\t\t\t\t\t\t'id': idx === 0 && typeof button === 'string' ?\n\t\t\t\t\t\t\t\t\t\t\tsettings.sTableId +'_'+ button :\n\t\t\t\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t\t\t\t.html( btnDisplay )\n\t\t\t\t\t\t\t\t\t.appendTo( container );\n\t\n\t\t\t\t\t\t\t\t_fnBindAction(\n\t\t\t\t\t\t\t\t\tnode, {action: button}, clickHandler\n\t\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\n\t\t\t\t// IE9 throws an 'unknown error' if document.activeElement is used\n\t\t\t\t// inside an iframe or frame. Try / catch the error. Not good for\n\t\t\t\t// accessibility, but neither are frames.\n\t\t\t\tvar activeEl;\n\t\n\t\t\t\ttry {\n\t\t\t\t\t// Because this approach is destroying and recreating the paging\n\t\t\t\t\t// elements, focus is lost on the select button which is bad for\n\t\t\t\t\t// accessibility. So we want to restore focus once the draw has\n\t\t\t\t\t// completed\n\t\t\t\t\tactiveEl = $(host).find(document.activeElement).data('dt-idx');\n\t\t\t\t}\n\t\t\t\tcatch (e) {}\n\t\n\t\t\t\tattach( $(host).empty(), buttons );\n\t\n\t\t\t\tif ( activeEl !== undefined ) {\n\t\t\t\t\t$(host).find( '[data-dt-idx='+activeEl+']' ).focus();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} );\n\t\n\t\n\t\n\t// Built in type detection. See model.ext.aTypes for information about\n\t// what is required from this methods.\n\t$.extend( DataTable.ext.type.detect, [\n\t\t// Plain numbers - first since V8 detects some plain numbers as dates\n\t\t// e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\tvar decimal = settings.oLanguage.sDecimal;\n\t\t\treturn _isNumber( d, decimal ) ? 'num'+decimal : null;\n\t\t},\n\t\n\t\t// Dates (only those recognised by the browser's Date.parse)\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\t// V8 tries _very_ hard to make a string passed into `Date.parse()`\n\t\t\t// valid, so we need to use a regex to restrict date formats. Use a\n\t\t\t// plug-in for anything other than ISO8601 style strings\n\t\t\tif ( d && !(d instanceof Date) && ! _re_date.test(d) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tvar parsed = Date.parse(d);\n\t\t\treturn (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;\n\t\t},\n\t\n\t\t// Formatted numbers\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\tvar decimal = settings.oLanguage.sDecimal;\n\t\t\treturn _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;\n\t\t},\n\t\n\t\t// HTML numeric\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\tvar decimal = settings.oLanguage.sDecimal;\n\t\t\treturn _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;\n\t\t},\n\t\n\t\t// HTML numeric, formatted\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\tvar decimal = settings.oLanguage.sDecimal;\n\t\t\treturn _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;\n\t\t},\n\t\n\t\t// HTML (this is strict checking - there must be html)\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\treturn _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?\n\t\t\t\t'html' : null;\n\t\t}\n\t] );\n\t\n\t\n\t\n\t// Filter formatting functions. See model.ext.ofnSearch for information about\n\t// what is required from these methods.\n\t// \n\t// Note that additional search methods are added for the html numbers and\n\t// html formatted numbers by `_addNumericSort()` when we know what the decimal\n\t// place is\n\t\n\t\n\t$.extend( DataTable.ext.type.search, {\n\t\thtml: function ( data ) {\n\t\t\treturn _empty(data) ?\n\t\t\t\tdata :\n\t\t\t\ttypeof data === 'string' ?\n\t\t\t\t\tdata\n\t\t\t\t\t\t.replace( _re_new_lines, \" \" )\n\t\t\t\t\t\t.replace( _re_html, \"\" ) :\n\t\t\t\t\t'';\n\t\t},\n\t\n\t\tstring: function ( data ) {\n\t\t\treturn _empty(data) ?\n\t\t\t\tdata :\n\t\t\t\ttypeof data === 'string' ?\n\t\t\t\t\tdata.replace( _re_new_lines, \" \" ) :\n\t\t\t\t\tdata;\n\t\t}\n\t} );\n\t\n\t\n\t\n\tvar __numericReplace = function ( d, decimalPlace, re1, re2 ) {\n\t\tif ( d !== 0 && (!d || d === '-') ) {\n\t\t\treturn -Infinity;\n\t\t}\n\t\n\t\t// If a decimal place other than `.` is used, it needs to be given to the\n\t\t// function so we can detect it and replace with a `.` which is the only\n\t\t// decimal place Javascript recognises - it is not locale aware.\n\t\tif ( decimalPlace ) {\n\t\t\td = _numToDecimal( d, decimalPlace );\n\t\t}\n\t\n\t\tif ( d.replace ) {\n\t\t\tif ( re1 ) {\n\t\t\t\td = d.replace( re1, '' );\n\t\t\t}\n\t\n\t\t\tif ( re2 ) {\n\t\t\t\td = d.replace( re2, '' );\n\t\t\t}\n\t\t}\n\t\n\t\treturn d * 1;\n\t};\n\t\n\t\n\t// Add the numeric 'deformatting' functions for sorting and search. This is done\n\t// in a function to provide an easy ability for the language options to add\n\t// additional methods if a non-period decimal place is used.\n\tfunction _addNumericSort ( decimalPlace ) {\n\t\t$.each(\n\t\t\t{\n\t\t\t\t// Plain numbers\n\t\t\t\t\"num\": function ( d ) {\n\t\t\t\t\treturn __numericReplace( d, decimalPlace );\n\t\t\t\t},\n\t\n\t\t\t\t// Formatted numbers\n\t\t\t\t\"num-fmt\": function ( d ) {\n\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_formatted_numeric );\n\t\t\t\t},\n\t\n\t\t\t\t// HTML numeric\n\t\t\t\t\"html-num\": function ( d ) {\n\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_html );\n\t\t\t\t},\n\t\n\t\t\t\t// HTML numeric, formatted\n\t\t\t\t\"html-num-fmt\": function ( d ) {\n\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );\n\t\t\t\t}\n\t\t\t},\n\t\t\tfunction ( key, fn ) {\n\t\t\t\t// Add the ordering method\n\t\t\t\t_ext.type.order[ key+decimalPlace+'-pre' ] = fn;\n\t\n\t\t\t\t// For HTML types add a search formatter that will strip the HTML\n\t\t\t\tif ( key.match(/^html\\-/) ) {\n\t\t\t\t\t_ext.type.search[ key+decimalPlace ] = _ext.type.search.html;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n\t\n\t\n\t// Default sort methods\n\t$.extend( _ext.type.order, {\n\t\t// Dates\n\t\t\"date-pre\": function ( d ) {\n\t\t\treturn Date.parse( d ) || -Infinity;\n\t\t},\n\t\n\t\t// html\n\t\t\"html-pre\": function ( a ) {\n\t\t\treturn _empty(a) ?\n\t\t\t\t'' :\n\t\t\t\ta.replace ?\n\t\t\t\t\ta.replace( /<.*?>/g, \"\" ).toLowerCase() :\n\t\t\t\t\ta+'';\n\t\t},\n\t\n\t\t// string\n\t\t\"string-pre\": function ( a ) {\n\t\t\t// This is a little complex, but faster than always calling toString,\n\t\t\t// http://jsperf.com/tostring-v-check\n\t\t\treturn _empty(a) ?\n\t\t\t\t'' :\n\t\t\t\ttypeof a === 'string' ?\n\t\t\t\t\ta.toLowerCase() :\n\t\t\t\t\t! a.toString ?\n\t\t\t\t\t\t'' :\n\t\t\t\t\t\ta.toString();\n\t\t},\n\t\n\t\t// string-asc and -desc are retained only for compatibility with the old\n\t\t// sort methods\n\t\t\"string-asc\": function ( x, y ) {\n\t\t\treturn ((x < y) ? -1 : ((x > y) ? 1 : 0));\n\t\t},\n\t\n\t\t\"string-desc\": function ( x, y ) {\n\t\t\treturn ((x < y) ? 1 : ((x > y) ? -1 : 0));\n\t\t}\n\t} );\n\t\n\t\n\t// Numeric sorting types - order doesn't matter here\n\t_addNumericSort( '' );\n\t\n\t\n\t$.extend( true, DataTable.ext.renderer, {\n\t\theader: {\n\t\t\t_: function ( settings, cell, column, classes ) {\n\t\t\t\t// No additional mark-up required\n\t\t\t\t// Attach a sort listener to update on sort - note that using the\n\t\t\t\t// `DT` namespace will allow the event to be removed automatically\n\t\t\t\t// on destroy, while the `dt` namespaced event is the one we are\n\t\t\t\t// listening for\n\t\t\t\t$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\n\t\t\t\t\tif ( settings !== ctx ) { // need to check this this is the host\n\t\t\t\t\t\treturn;               // table, not a nested one\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar colIdx = column.idx;\n\t\n\t\t\t\t\tcell\n\t\t\t\t\t\t.removeClass(\n\t\t\t\t\t\t\tcolumn.sSortingClass +' '+\n\t\t\t\t\t\t\tclasses.sSortAsc +' '+\n\t\t\t\t\t\t\tclasses.sSortDesc\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?\n\t\t\t\t\t\t\tclasses.sSortAsc : columns[ colIdx ] == 'desc' ?\n\t\t\t\t\t\t\t\tclasses.sSortDesc :\n\t\t\t\t\t\t\t\tcolumn.sSortingClass\n\t\t\t\t\t\t);\n\t\t\t\t} );\n\t\t\t},\n\t\n\t\t\tjqueryui: function ( settings, cell, column, classes ) {\n\t\t\t\t$('<div/>')\n\t\t\t\t\t.addClass( classes.sSortJUIWrapper )\n\t\t\t\t\t.append( cell.contents() )\n\t\t\t\t\t.append( $('<span/>')\n\t\t\t\t\t\t.addClass( classes.sSortIcon+' '+column.sSortingClassJUI )\n\t\t\t\t\t)\n\t\t\t\t\t.appendTo( cell );\n\t\n\t\t\t\t// Attach a sort listener to update on sort\n\t\t\t\t$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\n\t\t\t\t\tif ( settings !== ctx ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar colIdx = column.idx;\n\t\n\t\t\t\t\tcell\n\t\t\t\t\t\t.removeClass( classes.sSortAsc +\" \"+classes.sSortDesc )\n\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?\n\t\t\t\t\t\t\tclasses.sSortAsc : columns[ colIdx ] == 'desc' ?\n\t\t\t\t\t\t\t\tclasses.sSortDesc :\n\t\t\t\t\t\t\t\tcolumn.sSortingClass\n\t\t\t\t\t\t);\n\t\n\t\t\t\t\tcell\n\t\t\t\t\t\t.find( 'span.'+classes.sSortIcon )\n\t\t\t\t\t\t.removeClass(\n\t\t\t\t\t\t\tclasses.sSortJUIAsc +\" \"+\n\t\t\t\t\t\t\tclasses.sSortJUIDesc +\" \"+\n\t\t\t\t\t\t\tclasses.sSortJUI +\" \"+\n\t\t\t\t\t\t\tclasses.sSortJUIAscAllowed +\" \"+\n\t\t\t\t\t\t\tclasses.sSortJUIDescAllowed\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?\n\t\t\t\t\t\t\tclasses.sSortJUIAsc : columns[ colIdx ] == 'desc' ?\n\t\t\t\t\t\t\t\tclasses.sSortJUIDesc :\n\t\t\t\t\t\t\t\tcolumn.sSortingClassJUI\n\t\t\t\t\t\t);\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\t/*\n\t * Public helper functions. These aren't used internally by DataTables, or\n\t * called by any of the options passed into DataTables, but they can be used\n\t * externally by developers working with DataTables. They are helper functions\n\t * to make working with DataTables a little bit easier.\n\t */\n\t\n\tvar __htmlEscapeEntities = function ( d ) {\n\t\treturn typeof d === 'string' ?\n\t\t\td.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;') :\n\t\t\td;\n\t};\n\t\n\t/**\n\t * Helpers for `columns.render`.\n\t *\n\t * The options defined here can be used with the `columns.render` initialisation\n\t * option to provide a display renderer. The following functions are defined:\n\t *\n\t * * `number` - Will format numeric data (defined by `columns.data`) for\n\t *   display, retaining the original unformatted data for sorting and filtering.\n\t *   It takes 5 parameters:\n\t *   * `string` - Thousands grouping separator\n\t *   * `string` - Decimal point indicator\n\t *   * `integer` - Number of decimal points to show\n\t *   * `string` (optional) - Prefix.\n\t *   * `string` (optional) - Postfix (/suffix).\n\t * * `text` - Escape HTML to help prevent XSS attacks. It has no optional\n\t *   parameters.\n\t *\n\t * @example\n\t *   // Column definition using the number renderer\n\t *   {\n\t *     data: \"salary\",\n\t *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )\n\t *   }\n\t *\n\t * @namespace\n\t */\n\tDataTable.render = {\n\t\tnumber: function ( thousands, decimal, precision, prefix, postfix ) {\n\t\t\treturn {\n\t\t\t\tdisplay: function ( d ) {\n\t\t\t\t\tif ( typeof d !== 'number' && typeof d !== 'string' ) {\n\t\t\t\t\t\treturn d;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar negative = d < 0 ? '-' : '';\n\t\t\t\t\tvar flo = parseFloat( d );\n\t\n\t\t\t\t\t// If NaN then there isn't much formatting that we can do - just\n\t\t\t\t\t// return immediately, escaping any HTML (this was supposed to\n\t\t\t\t\t// be a number after all)\n\t\t\t\t\tif ( isNaN( flo ) ) {\n\t\t\t\t\t\treturn __htmlEscapeEntities( d );\n\t\t\t\t\t}\n\t\n\t\t\t\t\tflo = flo.toFixed( precision );\n\t\t\t\t\td = Math.abs( flo );\n\t\n\t\t\t\t\tvar intPart = parseInt( d, 10 );\n\t\t\t\t\tvar floatPart = precision ?\n\t\t\t\t\t\tdecimal+(d - intPart).toFixed( precision ).substring( 2 ):\n\t\t\t\t\t\t'';\n\t\n\t\t\t\t\treturn negative + (prefix||'') +\n\t\t\t\t\t\tintPart.toString().replace(\n\t\t\t\t\t\t\t/\\B(?=(\\d{3})+(?!\\d))/g, thousands\n\t\t\t\t\t\t) +\n\t\t\t\t\t\tfloatPart +\n\t\t\t\t\t\t(postfix||'');\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\n\t\ttext: function () {\n\t\t\treturn {\n\t\t\t\tdisplay: __htmlEscapeEntities\n\t\t\t};\n\t\t}\n\t};\n\t\n\t\n\t/*\n\t * This is really a good bit rubbish this method of exposing the internal methods\n\t * publicly... - To be fixed in 2.0 using methods on the prototype\n\t */\n\t\n\t\n\t/**\n\t * Create a wrapper function for exporting an internal functions to an external API.\n\t *  @param {string} fn API function name\n\t *  @returns {function} wrapped function\n\t *  @memberof DataTable#internal\n\t */\n\tfunction _fnExternApiFunc (fn)\n\t{\n\t\treturn function() {\n\t\t\tvar args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(\n\t\t\t\tArray.prototype.slice.call(arguments)\n\t\t\t);\n\t\t\treturn DataTable.ext.internal[fn].apply( this, args );\n\t\t};\n\t}\n\t\n\t\n\t/**\n\t * Reference to internal functions for use by plug-in developers. Note that\n\t * these methods are references to internal functions and are considered to be\n\t * private. If you use these methods, be aware that they are liable to change\n\t * between versions.\n\t *  @namespace\n\t */\n\t$.extend( DataTable.ext.internal, {\n\t\t_fnExternApiFunc: _fnExternApiFunc,\n\t\t_fnBuildAjax: _fnBuildAjax,\n\t\t_fnAjaxUpdate: _fnAjaxUpdate,\n\t\t_fnAjaxParameters: _fnAjaxParameters,\n\t\t_fnAjaxUpdateDraw: _fnAjaxUpdateDraw,\n\t\t_fnAjaxDataSrc: _fnAjaxDataSrc,\n\t\t_fnAddColumn: _fnAddColumn,\n\t\t_fnColumnOptions: _fnColumnOptions,\n\t\t_fnAdjustColumnSizing: _fnAdjustColumnSizing,\n\t\t_fnVisibleToColumnIndex: _fnVisibleToColumnIndex,\n\t\t_fnColumnIndexToVisible: _fnColumnIndexToVisible,\n\t\t_fnVisbleColumns: _fnVisbleColumns,\n\t\t_fnGetColumns: _fnGetColumns,\n\t\t_fnColumnTypes: _fnColumnTypes,\n\t\t_fnApplyColumnDefs: _fnApplyColumnDefs,\n\t\t_fnHungarianMap: _fnHungarianMap,\n\t\t_fnCamelToHungarian: _fnCamelToHungarian,\n\t\t_fnLanguageCompat: _fnLanguageCompat,\n\t\t_fnBrowserDetect: _fnBrowserDetect,\n\t\t_fnAddData: _fnAddData,\n\t\t_fnAddTr: _fnAddTr,\n\t\t_fnNodeToDataIndex: _fnNodeToDataIndex,\n\t\t_fnNodeToColumnIndex: _fnNodeToColumnIndex,\n\t\t_fnGetCellData: _fnGetCellData,\n\t\t_fnSetCellData: _fnSetCellData,\n\t\t_fnSplitObjNotation: _fnSplitObjNotation,\n\t\t_fnGetObjectDataFn: _fnGetObjectDataFn,\n\t\t_fnSetObjectDataFn: _fnSetObjectDataFn,\n\t\t_fnGetDataMaster: _fnGetDataMaster,\n\t\t_fnClearTable: _fnClearTable,\n\t\t_fnDeleteIndex: _fnDeleteIndex,\n\t\t_fnInvalidate: _fnInvalidate,\n\t\t_fnGetRowElements: _fnGetRowElements,\n\t\t_fnCreateTr: _fnCreateTr,\n\t\t_fnBuildHead: _fnBuildHead,\n\t\t_fnDrawHead: _fnDrawHead,\n\t\t_fnDraw: _fnDraw,\n\t\t_fnReDraw: _fnReDraw,\n\t\t_fnAddOptionsHtml: _fnAddOptionsHtml,\n\t\t_fnDetectHeader: _fnDetectHeader,\n\t\t_fnGetUniqueThs: _fnGetUniqueThs,\n\t\t_fnFeatureHtmlFilter: _fnFeatureHtmlFilter,\n\t\t_fnFilterComplete: _fnFilterComplete,\n\t\t_fnFilterCustom: _fnFilterCustom,\n\t\t_fnFilterColumn: _fnFilterColumn,\n\t\t_fnFilter: _fnFilter,\n\t\t_fnFilterCreateSearch: _fnFilterCreateSearch,\n\t\t_fnEscapeRegex: _fnEscapeRegex,\n\t\t_fnFilterData: _fnFilterData,\n\t\t_fnFeatureHtmlInfo: _fnFeatureHtmlInfo,\n\t\t_fnUpdateInfo: _fnUpdateInfo,\n\t\t_fnInfoMacros: _fnInfoMacros,\n\t\t_fnInitialise: _fnInitialise,\n\t\t_fnInitComplete: _fnInitComplete,\n\t\t_fnLengthChange: _fnLengthChange,\n\t\t_fnFeatureHtmlLength: _fnFeatureHtmlLength,\n\t\t_fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,\n\t\t_fnPageChange: _fnPageChange,\n\t\t_fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,\n\t\t_fnProcessingDisplay: _fnProcessingDisplay,\n\t\t_fnFeatureHtmlTable: _fnFeatureHtmlTable,\n\t\t_fnScrollDraw: _fnScrollDraw,\n\t\t_fnApplyToChildren: _fnApplyToChildren,\n\t\t_fnCalculateColumnWidths: _fnCalculateColumnWidths,\n\t\t_fnThrottle: _fnThrottle,\n\t\t_fnConvertToWidth: _fnConvertToWidth,\n\t\t_fnGetWidestNode: _fnGetWidestNode,\n\t\t_fnGetMaxLenString: _fnGetMaxLenString,\n\t\t_fnStringToCss: _fnStringToCss,\n\t\t_fnSortFlatten: _fnSortFlatten,\n\t\t_fnSort: _fnSort,\n\t\t_fnSortAria: _fnSortAria,\n\t\t_fnSortListener: _fnSortListener,\n\t\t_fnSortAttachListener: _fnSortAttachListener,\n\t\t_fnSortingClasses: _fnSortingClasses,\n\t\t_fnSortData: _fnSortData,\n\t\t_fnSaveState: _fnSaveState,\n\t\t_fnLoadState: _fnLoadState,\n\t\t_fnSettingsFromNode: _fnSettingsFromNode,\n\t\t_fnLog: _fnLog,\n\t\t_fnMap: _fnMap,\n\t\t_fnBindAction: _fnBindAction,\n\t\t_fnCallbackReg: _fnCallbackReg,\n\t\t_fnCallbackFire: _fnCallbackFire,\n\t\t_fnLengthOverflow: _fnLengthOverflow,\n\t\t_fnRenderer: _fnRenderer,\n\t\t_fnDataSource: _fnDataSource,\n\t\t_fnRowAttributes: _fnRowAttributes,\n\t\t_fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant\n\t\t                                // in 1.10, so this dead-end function is\n\t\t                                // added to prevent errors\n\t} );\n\t\n\n\t// jQuery access\n\t$.fn.dataTable = DataTable;\n\n\t// Provide access to the host jQuery object (circular reference)\n\tDataTable.$ = $;\n\n\t// Legacy aliases\n\t$.fn.dataTableSettings = DataTable.settings;\n\t$.fn.dataTableExt = DataTable.ext;\n\n\t// With a capital `D` we return a DataTables API instance rather than a\n\t// jQuery object\n\t$.fn.DataTable = function ( opts ) {\n\t\treturn $(this).dataTable( opts ).api();\n\t};\n\n\t// All properties that are available to $.fn.dataTable should also be\n\t// available on $.fn.DataTable\n\t$.each( DataTable, function ( prop, val ) {\n\t\t$.fn.DataTable[ prop ] = val;\n\t} );\n\n\n\t// Information about events fired by DataTables - for documentation.\n\t/**\n\t * Draw event, fired whenever the table is redrawn on the page, at the same\n\t * point as fnDrawCallback. This may be useful for binding events or\n\t * performing calculations when the table is altered at all.\n\t *  @name DataTable#draw.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * Search event, fired when the searching applied to the table (using the\n\t * built-in global search, or column filters) is altered.\n\t *  @name DataTable#search.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * Page change event, fired when the paging of the table is altered.\n\t *  @name DataTable#page.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * Order event, fired when the ordering applied to the table is altered.\n\t *  @name DataTable#order.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * DataTables initialisation complete event, fired when the table is fully\n\t * drawn, including Ajax data loaded, if Ajax data is required.\n\t *  @name DataTable#init.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} oSettings DataTables settings object\n\t *  @param {object} json The JSON object request from the server - only\n\t *    present if client-side Ajax sourced data is used</li></ol>\n\t */\n\n\t/**\n\t * State save event, fired when the table has changed state a new state save\n\t * is required. This event allows modification of the state saving object\n\t * prior to actually doing the save, including addition or other state\n\t * properties (for plug-ins) or modification of a DataTables core property.\n\t *  @name DataTable#stateSaveParams.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} oSettings DataTables settings object\n\t *  @param {object} json The state information to be saved\n\t */\n\n\t/**\n\t * State load event, fired when the table is loading state from the stored\n\t * data, but prior to the settings object being modified by the saved state\n\t * - allowing modification of the saved state is required or loading of\n\t * state for a plug-in.\n\t *  @name DataTable#stateLoadParams.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} oSettings DataTables settings object\n\t *  @param {object} json The saved state information\n\t */\n\n\t/**\n\t * State loaded event, fired when state has been loaded from stored data and\n\t * the settings object has been modified by the loaded data.\n\t *  @name DataTable#stateLoaded.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} oSettings DataTables settings object\n\t *  @param {object} json The saved state information\n\t */\n\n\t/**\n\t * Processing event, fired when DataTables is doing some kind of processing\n\t * (be it, order, searcg or anything else). It can be used to indicate to\n\t * the end user that there is something happening, or that something has\n\t * finished.\n\t *  @name DataTable#processing.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} oSettings DataTables settings object\n\t *  @param {boolean} bShow Flag for if DataTables is doing processing or not\n\t */\n\n\t/**\n\t * Ajax (XHR) event, fired whenever an Ajax request is completed from a\n\t * request to made to the server for new data. This event is called before\n\t * DataTables processed the returned data, so it can also be used to pre-\n\t * process the data returned from the server, if needed.\n\t *\n\t * Note that this trigger is called in `fnServerData`, if you override\n\t * `fnServerData` and which to use this event, you need to trigger it in you\n\t * success function.\n\t *  @name DataTable#xhr.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t *  @param {object} json JSON returned from the server\n\t *\n\t *  @example\n\t *     // Use a custom property returned from the server in another DOM element\n\t *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\n\t *       $('#status').html( json.status );\n\t *     } );\n\t *\n\t *  @example\n\t *     // Pre-process the data returned from the server\n\t *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\n\t *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {\n\t *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;\n\t *       }\n\t *       // Note no return - manipulate the data directly in the JSON object.\n\t *     } );\n\t */\n\n\t/**\n\t * Destroy event, fired when the DataTable is destroyed by calling fnDestroy\n\t * or passing the bDestroy:true parameter in the initialisation object. This\n\t * can be used to remove bound events, added DOM nodes, etc.\n\t *  @name DataTable#destroy.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * Page length change event, fired when number of records to show on each\n\t * page (the length) is changed.\n\t *  @name DataTable#length.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t *  @param {integer} len New length\n\t */\n\n\t/**\n\t * Column sizing has changed.\n\t *  @name DataTable#column-sizing.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * Column visibility has changed.\n\t *  @name DataTable#column-visibility.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t *  @param {int} column Column index\n\t *  @param {bool} vis `false` if column now hidden, or `true` if visible\n\t */\n\n\treturn $.fn.dataTable;\n}));\n","/*! TableTools 2.2.4\n * 2009-2015 SpryMedia Ltd - datatables.net/license\n *\n * ZeroClipboard 1.0.4\n * Author: Joseph Huckaby - MIT licensed\n */\n\n/**\n * @summary     TableTools\n * @description Tools and buttons for DataTables\n * @version     2.2.4\n * @file        dataTables.tableTools.js\n * @author      SpryMedia Ltd (www.sprymedia.co.uk)\n * @contact     www.sprymedia.co.uk/contact\n * @copyright   Copyright 2009-2015 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license/mit\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n\n\n/* Global scope for TableTools for backwards compatibility.\n * Will be removed in 2.3\n */\nvar TableTools;\n\n(function(window, document, undefined) {\n\n\nvar factory = function( $, DataTable ) {\n\"use strict\";\n\n\n//include ZeroClipboard.js\n/* ZeroClipboard 1.0.4\n * Author: Joseph Huckaby\n */\n\nvar ZeroClipboard_TableTools = {\n\n\tversion: \"1.0.4-TableTools2\",\n\tclients: {}, // registered upload clients on page, indexed by id\n\tmoviePath: '', // URL to movie\n\tnextId: 1, // ID of next movie\n\n\t$: function(thingy) {\n\t\t// simple DOM lookup utility function\n\t\tif (typeof(thingy) == 'string') {\n\t\t\tthingy = document.getElementById(thingy);\n\t\t}\n\t\tif (!thingy.addClass) {\n\t\t\t// extend element with a few useful methods\n\t\t\tthingy.hide = function() { this.style.display = 'none'; };\n\t\t\tthingy.show = function() { this.style.display = ''; };\n\t\t\tthingy.addClass = function(name) { this.removeClass(name); this.className += ' ' + name; };\n\t\t\tthingy.removeClass = function(name) {\n\t\t\t\tthis.className = this.className.replace( new RegExp(\"\\\\s*\" + name + \"\\\\s*\"), \" \").replace(/^\\s+/, '').replace(/\\s+$/, '');\n\t\t\t};\n\t\t\tthingy.hasClass = function(name) {\n\t\t\t\treturn !!this.className.match( new RegExp(\"\\\\s*\" + name + \"\\\\s*\") );\n\t\t\t};\n\t\t}\n\t\treturn thingy;\n\t},\n\n\tsetMoviePath: function(path) {\n\t\t// set path to ZeroClipboard.swf\n\t\tthis.moviePath = path;\n\t},\n\n\tdispatch: function(id, eventName, args) {\n\t\t// receive event from flash movie, send to client\n\t\tvar client = this.clients[id];\n\t\tif (client) {\n\t\t\tclient.receiveEvent(eventName, args);\n\t\t}\n\t},\n\n\tregister: function(id, client) {\n\t\t// register new client to receive events\n\t\tthis.clients[id] = client;\n\t},\n\n\tgetDOMObjectPosition: function(obj) {\n\t\t// get absolute coordinates for dom element\n\t\tvar info = {\n\t\t\tleft: 0,\n\t\t\ttop: 0,\n\t\t\twidth: obj.width ? obj.width : obj.offsetWidth,\n\t\t\theight: obj.height ? obj.height : obj.offsetHeight\n\t\t};\n\n\t\tif ( obj.style.width !== \"\" ) {\n\t\t\tinfo.width = obj.style.width.replace(\"px\",\"\");\n\t\t}\n\n\t\tif ( obj.style.height !== \"\" ) {\n\t\t\tinfo.height = obj.style.height.replace(\"px\",\"\");\n\t\t}\n\n\t\twhile (obj) {\n\t\t\tinfo.left += obj.offsetLeft;\n\t\t\tinfo.top += obj.offsetTop;\n\t\t\tobj = obj.offsetParent;\n\t\t}\n\n\t\treturn info;\n\t},\n\n\tClient: function(elem) {\n\t\t// constructor for new simple upload client\n\t\tthis.handlers = {};\n\n\t\t// unique ID\n\t\tthis.id = ZeroClipboard_TableTools.nextId++;\n\t\tthis.movieId = 'ZeroClipboard_TableToolsMovie_' + this.id;\n\n\t\t// register client with singleton to receive flash events\n\t\tZeroClipboard_TableTools.register(this.id, this);\n\n\t\t// create movie\n\t\tif (elem) {\n\t\t\tthis.glue(elem);\n\t\t}\n\t}\n};\n\nZeroClipboard_TableTools.Client.prototype = {\n\n\tid: 0, // unique ID for us\n\tready: false, // whether movie is ready to receive events or not\n\tmovie: null, // reference to movie object\n\tclipText: '', // text to copy to clipboard\n\tfileName: '', // default file save name\n\taction: 'copy', // action to perform\n\thandCursorEnabled: true, // whether to show hand cursor, or default pointer cursor\n\tcssEffects: true, // enable CSS mouse effects on dom container\n\thandlers: null, // user event handlers\n\tsized: false,\n\n\tglue: function(elem, title) {\n\t\t// glue to DOM element\n\t\t// elem can be ID or actual DOM element object\n\t\tthis.domElement = ZeroClipboard_TableTools.$(elem);\n\n\t\t// float just above object, or zIndex 99 if dom element isn't set\n\t\tvar zIndex = 99;\n\t\tif (this.domElement.style.zIndex) {\n\t\t\tzIndex = parseInt(this.domElement.style.zIndex, 10) + 1;\n\t\t}\n\n\t\t// find X/Y position of domElement\n\t\tvar box = ZeroClipboard_TableTools.getDOMObjectPosition(this.domElement);\n\n\t\t// create floating DIV above element\n\t\tthis.div = document.createElement('div');\n\t\tvar style = this.div.style;\n\t\tstyle.position = 'absolute';\n\t\tstyle.left = '0px';\n\t\tstyle.top = '0px';\n\t\tstyle.width = (box.width) + 'px';\n\t\tstyle.height = box.height + 'px';\n\t\tstyle.zIndex = zIndex;\n\n\t\tif ( typeof title != \"undefined\" && title !== \"\" ) {\n\t\t\tthis.div.title = title;\n\t\t}\n\t\tif ( box.width !== 0 && box.height !== 0 ) {\n\t\t\tthis.sized = true;\n\t\t}\n\n\t\t// style.backgroundColor = '#f00'; // debug\n\t\tif ( this.domElement ) {\n\t\t\tthis.domElement.appendChild(this.div);\n\t\t\tthis.div.innerHTML = this.getHTML( box.width, box.height ).replace(/&/g, '&amp;');\n\t\t}\n\t},\n\n\tpositionElement: function() {\n\t\tvar box = ZeroClipboard_TableTools.getDOMObjectPosition(this.domElement);\n\t\tvar style = this.div.style;\n\n\t\tstyle.position = 'absolute';\n\t\t//style.left = (this.domElement.offsetLeft)+'px';\n\t\t//style.top = this.domElement.offsetTop+'px';\n\t\tstyle.width = box.width + 'px';\n\t\tstyle.height = box.height + 'px';\n\n\t\tif ( box.width !== 0 && box.height !== 0 ) {\n\t\t\tthis.sized = true;\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\tvar flash = this.div.childNodes[0];\n\t\tflash.width = box.width;\n\t\tflash.height = box.height;\n\t},\n\n\tgetHTML: function(width, height) {\n\t\t// return HTML for movie\n\t\tvar html = '';\n\t\tvar flashvars = 'id=' + this.id +\n\t\t\t'&width=' + width +\n\t\t\t'&height=' + height;\n\n\t\tif (navigator.userAgent.match(/MSIE/)) {\n\t\t\t// IE gets an OBJECT tag\n\t\t\tvar protocol = location.href.match(/^https/i) ? 'https://' : 'http://';\n\t\t\thtml += '<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" codebase=\"'+protocol+'download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=10,0,0,0\" width=\"'+width+'\" height=\"'+height+'\" id=\"'+this.movieId+'\" align=\"middle\"><param name=\"allowScriptAccess\" value=\"always\" /><param name=\"allowFullScreen\" value=\"false\" /><param name=\"movie\" value=\"'+ZeroClipboard_TableTools.moviePath+'\" /><param name=\"loop\" value=\"false\" /><param name=\"menu\" value=\"false\" /><param name=\"quality\" value=\"best\" /><param name=\"bgcolor\" value=\"#ffffff\" /><param name=\"flashvars\" value=\"'+flashvars+'\"/><param name=\"wmode\" value=\"transparent\"/></object>';\n\t\t}\n\t\telse {\n\t\t\t// all other browsers get an EMBED tag\n\t\t\thtml += '<embed id=\"'+this.movieId+'\" src=\"'+ZeroClipboard_TableTools.moviePath+'\" loop=\"false\" menu=\"false\" quality=\"best\" bgcolor=\"#ffffff\" width=\"'+width+'\" height=\"'+height+'\" name=\"'+this.movieId+'\" align=\"middle\" allowScriptAccess=\"always\" allowFullScreen=\"false\" type=\"application/x-shockwave-flash\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" flashvars=\"'+flashvars+'\" wmode=\"transparent\" />';\n\t\t}\n\t\treturn html;\n\t},\n\n\thide: function() {\n\t\t// temporarily hide floater offscreen\n\t\tif (this.div) {\n\t\t\tthis.div.style.left = '-2000px';\n\t\t}\n\t},\n\n\tshow: function() {\n\t\t// show ourselves after a call to hide()\n\t\tthis.reposition();\n\t},\n\n\tdestroy: function() {\n\t\t// destroy control and floater\n\t\tif (this.domElement && this.div) {\n\t\t\tthis.hide();\n\t\t\tthis.div.innerHTML = '';\n\n\t\t\tvar body = document.getElementsByTagName('body')[0];\n\t\t\ttry { body.removeChild( this.div ); } catch(e) {}\n\n\t\t\tthis.domElement = null;\n\t\t\tthis.div = null;\n\t\t}\n\t},\n\n\treposition: function(elem) {\n\t\t// reposition our floating div, optionally to new container\n\t\t// warning: container CANNOT change size, only position\n\t\tif (elem) {\n\t\t\tthis.domElement = ZeroClipboard_TableTools.$(elem);\n\t\t\tif (!this.domElement) {\n\t\t\t\tthis.hide();\n\t\t\t}\n\t\t}\n\n\t\tif (this.domElement && this.div) {\n\t\t\tvar box = ZeroClipboard_TableTools.getDOMObjectPosition(this.domElement);\n\t\t\tvar style = this.div.style;\n\t\t\tstyle.left = '' + box.left + 'px';\n\t\t\tstyle.top = '' + box.top + 'px';\n\t\t}\n\t},\n\n\tclearText: function() {\n\t\t// clear the text to be copy / saved\n\t\tthis.clipText = '';\n\t\tif (this.ready) {\n\t\t\tthis.movie.clearText();\n\t\t}\n\t},\n\n\tappendText: function(newText) {\n\t\t// append text to that which is to be copied / saved\n\t\tthis.clipText += newText;\n\t\tif (this.ready) { this.movie.appendText(newText) ;}\n\t},\n\n\tsetText: function(newText) {\n\t\t// set text to be copied to be copied / saved\n\t\tthis.clipText = newText;\n\t\tif (this.ready) { this.movie.setText(newText) ;}\n\t},\n\n\tsetCharSet: function(charSet) {\n\t\t// set the character set (UTF16LE or UTF8)\n\t\tthis.charSet = charSet;\n\t\tif (this.ready) { this.movie.setCharSet(charSet) ;}\n\t},\n\n\tsetBomInc: function(bomInc) {\n\t\t// set if the BOM should be included or not\n\t\tthis.incBom = bomInc;\n\t\tif (this.ready) { this.movie.setBomInc(bomInc) ;}\n\t},\n\n\tsetFileName: function(newText) {\n\t\t// set the file name\n\t\tthis.fileName = newText;\n\t\tif (this.ready) {\n\t\t\tthis.movie.setFileName(newText);\n\t\t}\n\t},\n\n\tsetAction: function(newText) {\n\t\t// set action (save or copy)\n\t\tthis.action = newText;\n\t\tif (this.ready) {\n\t\t\tthis.movie.setAction(newText);\n\t\t}\n\t},\n\n\taddEventListener: function(eventName, func) {\n\t\t// add user event listener for event\n\t\t// event types: load, queueStart, fileStart, fileComplete, queueComplete, progress, error, cancel\n\t\teventName = eventName.toString().toLowerCase().replace(/^on/, '');\n\t\tif (!this.handlers[eventName]) {\n\t\t\tthis.handlers[eventName] = [];\n\t\t}\n\t\tthis.handlers[eventName].push(func);\n\t},\n\n\tsetHandCursor: function(enabled) {\n\t\t// enable hand cursor (true), or default arrow cursor (false)\n\t\tthis.handCursorEnabled = enabled;\n\t\tif (this.ready) {\n\t\t\tthis.movie.setHandCursor(enabled);\n\t\t}\n\t},\n\n\tsetCSSEffects: function(enabled) {\n\t\t// enable or disable CSS effects on DOM container\n\t\tthis.cssEffects = !!enabled;\n\t},\n\n\treceiveEvent: function(eventName, args) {\n\t\tvar self;\n\n\t\t// receive event from flash\n\t\teventName = eventName.toString().toLowerCase().replace(/^on/, '');\n\n\t\t// special behavior for certain events\n\t\tswitch (eventName) {\n\t\t\tcase 'load':\n\t\t\t\t// movie claims it is ready, but in IE this isn't always the case...\n\t\t\t\t// bug fix: Cannot extend EMBED DOM elements in Firefox, must use traditional function\n\t\t\t\tthis.movie = document.getElementById(this.movieId);\n\t\t\t\tif (!this.movie) {\n\t\t\t\t\tself = this;\n\t\t\t\t\tsetTimeout( function() { self.receiveEvent('load', null); }, 1 );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// firefox on pc needs a \"kick\" in order to set these in certain cases\n\t\t\t\tif (!this.ready && navigator.userAgent.match(/Firefox/) && navigator.userAgent.match(/Windows/)) {\n\t\t\t\t\tself = this;\n\t\t\t\t\tsetTimeout( function() { self.receiveEvent('load', null); }, 100 );\n\t\t\t\t\tthis.ready = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.ready = true;\n\t\t\t\tthis.movie.clearText();\n\t\t\t\tthis.movie.appendText( this.clipText );\n\t\t\t\tthis.movie.setFileName( this.fileName );\n\t\t\t\tthis.movie.setAction( this.action );\n\t\t\t\tthis.movie.setCharSet( this.charSet );\n\t\t\t\tthis.movie.setBomInc( this.incBom );\n\t\t\t\tthis.movie.setHandCursor( this.handCursorEnabled );\n\t\t\t\tbreak;\n\n\t\t\tcase 'mouseover':\n\t\t\t\tif (this.domElement && this.cssEffects) {\n\t\t\t\t\t//this.domElement.addClass('hover');\n\t\t\t\t\tif (this.recoverActive) {\n\t\t\t\t\t\tthis.domElement.addClass('active');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'mouseout':\n\t\t\t\tif (this.domElement && this.cssEffects) {\n\t\t\t\t\tthis.recoverActive = false;\n\t\t\t\t\tif (this.domElement.hasClass('active')) {\n\t\t\t\t\t\tthis.domElement.removeClass('active');\n\t\t\t\t\t\tthis.recoverActive = true;\n\t\t\t\t\t}\n\t\t\t\t\t//this.domElement.removeClass('hover');\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'mousedown':\n\t\t\t\tif (this.domElement && this.cssEffects) {\n\t\t\t\t\tthis.domElement.addClass('active');\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'mouseup':\n\t\t\t\tif (this.domElement && this.cssEffects) {\n\t\t\t\t\tthis.domElement.removeClass('active');\n\t\t\t\t\tthis.recoverActive = false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t} // switch eventName\n\n\t\tif (this.handlers[eventName]) {\n\t\t\tfor (var idx = 0, len = this.handlers[eventName].length; idx < len; idx++) {\n\t\t\t\tvar func = this.handlers[eventName][idx];\n\n\t\t\t\tif (typeof(func) == 'function') {\n\t\t\t\t\t// actual function reference\n\t\t\t\t\tfunc(this, args);\n\t\t\t\t}\n\t\t\t\telse if ((typeof(func) == 'object') && (func.length == 2)) {\n\t\t\t\t\t// PHP style object + method, i.e. [myObject, 'myMethod']\n\t\t\t\t\tfunc[0][ func[1] ](this, args);\n\t\t\t\t}\n\t\t\t\telse if (typeof(func) == 'string') {\n\t\t\t\t\t// name of function\n\t\t\t\t\twindow[func](this, args);\n\t\t\t\t}\n\t\t\t} // foreach event handler defined\n\t\t} // user defined handler for event\n\t}\n\n};\n\n// For the Flash binding to work, ZeroClipboard_TableTools must be on the global\n// object list\nwindow.ZeroClipboard_TableTools = ZeroClipboard_TableTools;\n//include TableTools.js\n/* TableTools\n * 2009-2015 SpryMedia Ltd - datatables.net/license\n */\n\n/*globals TableTools,ZeroClipboard_TableTools*/\n\n\n(function($, window, document) {\n\n/** \n * TableTools provides flexible buttons and other tools for a DataTables enhanced table\n * @class TableTools\n * @constructor\n * @param {Object} oDT DataTables instance. When using DataTables 1.10 this can\n *   also be a jQuery collection, jQuery selector, table node, DataTables API\n *   instance or DataTables settings object.\n * @param {Object} oOpts TableTools options\n * @param {String} oOpts.sSwfPath ZeroClipboard SWF path\n * @param {String} oOpts.sRowSelect Row selection options - 'none', 'single', 'multi' or 'os'\n * @param {Function} oOpts.fnPreRowSelect Callback function just prior to row selection\n * @param {Function} oOpts.fnRowSelected Callback function just after row selection\n * @param {Function} oOpts.fnRowDeselected Callback function when row is deselected\n * @param {Array} oOpts.aButtons List of buttons to be used\n */\nTableTools = function( oDT, oOpts )\n{\n\t/* Santiy check that we are a new instance */\n\tif ( ! this instanceof TableTools )\n\t{\n\t\talert( \"Warning: TableTools must be initialised with the keyword 'new'\" );\n\t}\n\n\t// In 1.10 we can use the API to get the settings object from a number of\n\t// sources\n\tvar dtSettings = $.fn.dataTable.Api ?\n\t\tnew $.fn.dataTable.Api( oDT ).settings()[0] :\n\t\toDT.fnSettings();\n\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Public class variables\n\t * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n\t/**\n\t * @namespace Settings object which contains customisable information for TableTools instance\n\t */\n\tthis.s = {\n\t\t/**\n\t\t * Store 'this' so the instance can be retrieved from the settings object\n\t\t * @property that\n\t\t * @type\t object\n\t\t * @default  this\n\t\t */\n\t\t\"that\": this,\n\n\t\t/** \n\t\t * DataTables settings objects\n\t\t * @property dt\n\t\t * @type\t object\n\t\t * @default  <i>From the oDT init option</i>\n\t\t */\n\t\t\"dt\": dtSettings,\n\n\t\t/**\n\t\t * @namespace Print specific information\n\t\t */\n\t\t\"print\": {\n\t\t\t/** \n\t\t\t * DataTables draw 'start' point before the printing display was shown\n\t\t\t *  @property saveStart\n\t\t\t *  @type\t int\n\t\t\t *  @default  -1\n\t\t\t */\n\t\t\t\"saveStart\": -1,\n\n\t\t\t/** \n\t\t\t * DataTables draw 'length' point before the printing display was shown\n\t\t\t *  @property saveLength\n\t\t\t *  @type\t int\n\t\t\t *  @default  -1\n\t\t\t */\n\t\t\t\"saveLength\": -1,\n\n\t\t\t/** \n\t\t\t * Page scrolling point before the printing display was shown so it can be restored\n\t\t\t *  @property saveScroll\n\t\t\t *  @type\t int\n\t\t\t *  @default  -1\n\t\t\t */\n\t\t\t\"saveScroll\": -1,\n\n\t\t\t/** \n\t\t\t * Wrapped function to end the print display (to maintain scope)\n\t\t\t *  @property funcEnd\n\t\t\t *  @type\t Function\n\t\t\t *  @default  function () {}\n\t\t\t */\n\t\t\t\"funcEnd\": function () {}\n\t\t},\n\n\t\t/**\n\t\t * A unique ID is assigned to each button in each instance\n\t\t * @property buttonCounter\n\t\t *  @type\t int\n\t\t * @default  0\n\t\t */\n\t\t\"buttonCounter\": 0,\n\n\t\t/**\n\t\t * @namespace Select rows specific information\n\t\t */\n\t\t\"select\": {\n\t\t\t/**\n\t\t\t * Select type - can be 'none', 'single' or 'multi'\n\t\t\t * @property type\n\t\t\t *  @type\t string\n\t\t\t * @default  \"\"\n\t\t\t */\n\t\t\t\"type\": \"\",\n\n\t\t\t/**\n\t\t\t * Array of nodes which are currently selected\n\t\t\t *  @property selected\n\t\t\t *  @type\t array\n\t\t\t *  @default  []\n\t\t\t */\n\t\t\t\"selected\": [],\n\n\t\t\t/**\n\t\t\t * Function to run before the selection can take place. Will cancel the select if the\n\t\t\t * function returns false\n\t\t\t *  @property preRowSelect\n\t\t\t *  @type\t Function\n\t\t\t *  @default  null\n\t\t\t */\n\t\t\t\"preRowSelect\": null,\n\n\t\t\t/**\n\t\t\t * Function to run when a row is selected\n\t\t\t *  @property postSelected\n\t\t\t *  @type\t Function\n\t\t\t *  @default  null\n\t\t\t */\n\t\t\t\"postSelected\": null,\n\n\t\t\t/**\n\t\t\t * Function to run when a row is deselected\n\t\t\t *  @property postDeselected\n\t\t\t *  @type\t Function\n\t\t\t *  @default  null\n\t\t\t */\n\t\t\t\"postDeselected\": null,\n\n\t\t\t/**\n\t\t\t * Indicate if all rows are selected (needed for server-side processing)\n\t\t\t *  @property all\n\t\t\t *  @type\t boolean\n\t\t\t *  @default  false\n\t\t\t */\n\t\t\t\"all\": false,\n\n\t\t\t/**\n\t\t\t * Class name to add to selected TR nodes\n\t\t\t *  @property selectedClass\n\t\t\t *  @type\t String\n\t\t\t *  @default  \"\"\n\t\t\t */\n\t\t\t\"selectedClass\": \"\"\n\t\t},\n\n\t\t/**\n\t\t * Store of the user input customisation object\n\t\t *  @property custom\n\t\t *  @type\t object\n\t\t *  @default  {}\n\t\t */\n\t\t\"custom\": {},\n\n\t\t/**\n\t\t * SWF movie path\n\t\t *  @property swfPath\n\t\t *  @type\t string\n\t\t *  @default  \"\"\n\t\t */\n\t\t\"swfPath\": \"\",\n\n\t\t/**\n\t\t * Default button set\n\t\t *  @property buttonSet\n\t\t *  @type\t array\n\t\t *  @default  []\n\t\t */\n\t\t\"buttonSet\": [],\n\n\t\t/**\n\t\t * When there is more than one TableTools instance for a DataTable, there must be a \n\t\t * master which controls events (row selection etc)\n\t\t *  @property master\n\t\t *  @type\t boolean\n\t\t *  @default  false\n\t\t */\n\t\t\"master\": false,\n\n\t\t/**\n\t\t * Tag names that are used for creating collections and buttons\n\t\t *  @namesapce\n\t\t */\n\t\t\"tags\": {}\n\t};\n\n\n\t/**\n\t * @namespace Common and useful DOM elements for the class instance\n\t */\n\tthis.dom = {\n\t\t/**\n\t\t * DIV element that is create and all TableTools buttons (and their children) put into\n\t\t *  @property container\n\t\t *  @type\t node\n\t\t *  @default  null\n\t\t */\n\t\t\"container\": null,\n\n\t\t/**\n\t\t * The table node to which TableTools will be applied\n\t\t *  @property table\n\t\t *  @type\t node\n\t\t *  @default  null\n\t\t */\n\t\t\"table\": null,\n\n\t\t/**\n\t\t * @namespace Nodes used for the print display\n\t\t */\n\t\t\"print\": {\n\t\t\t/**\n\t\t\t * Nodes which have been removed from the display by setting them to display none\n\t\t\t *  @property hidden\n\t\t\t *  @type\t array\n\t\t\t *  @default  []\n\t\t\t */\n\t\t\t\"hidden\": [],\n\n\t\t\t/**\n\t\t\t * The information display saying telling the user about the print display\n\t\t\t *  @property message\n\t\t\t *  @type\t node\n\t\t\t *  @default  null\n\t\t\t */\n\t\t\t\"message\": null\n\t  },\n\n\t\t/**\n\t\t * @namespace Nodes used for a collection display. This contains the currently used collection\n\t\t */\n\t\t\"collection\": {\n\t\t\t/**\n\t\t\t * The div wrapper containing the buttons in the collection (i.e. the menu)\n\t\t\t *  @property collection\n\t\t\t *  @type\t node\n\t\t\t *  @default  null\n\t\t\t */\n\t\t\t\"collection\": null,\n\n\t\t\t/**\n\t\t\t * Background display to provide focus and capture events\n\t\t\t *  @property background\n\t\t\t *  @type\t node\n\t\t\t *  @default  null\n\t\t\t */\n\t\t\t\"background\": null\n\t\t}\n\t};\n\n\t/**\n\t * @namespace Name space for the classes that this TableTools instance will use\n\t * @extends TableTools.classes\n\t */\n\tthis.classes = $.extend( true, {}, TableTools.classes );\n\tif ( this.s.dt.bJUI )\n\t{\n\t\t$.extend( true, this.classes, TableTools.classes_themeroller );\n\t}\n\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Public class methods\n\t * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n\t/**\n\t * Retreieve the settings object from an instance\n\t *  @method fnSettings\n\t *  @returns {object} TableTools settings object\n\t */\n\tthis.fnSettings = function () {\n\t\treturn this.s;\n\t};\n\n\n\t/* Constructor logic */\n\tif ( typeof oOpts == 'undefined' )\n\t{\n\t\toOpts = {};\n\t}\n\n\n\tTableTools._aInstances.push( this );\n\tthis._fnConstruct( oOpts );\n\n\treturn this;\n};\n\n\n\nTableTools.prototype = {\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Public methods\n\t * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n\t/**\n\t * Retreieve the settings object from an instance\n\t *  @returns {array} List of TR nodes which are currently selected\n\t *  @param {boolean} [filtered=false] Get only selected rows which are  \n\t *    available given the filtering applied to the table. By default\n\t *    this is false -  i.e. all rows, regardless of filtering are \n\t      selected.\n\t */\n\t\"fnGetSelected\": function ( filtered )\n\t{\n\t\tvar\n\t\t\tout = [],\n\t\t\tdata = this.s.dt.aoData,\n\t\t\tdisplayed = this.s.dt.aiDisplay,\n\t\t\ti, iLen;\n\n\t\tif ( filtered )\n\t\t{\n\t\t\t// Only consider filtered rows\n\t\t\tfor ( i=0, iLen=displayed.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\tif ( data[ displayed[i] ]._DTTT_selected )\n\t\t\t\t{\n\t\t\t\t\tout.push( data[ displayed[i] ].nTr );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use all rows\n\t\t\tfor ( i=0, iLen=data.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\tif ( data[i]._DTTT_selected )\n\t\t\t\t{\n\t\t\t\t\tout.push( data[i].nTr );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn out;\n\t},\n\n\n\t/**\n\t * Get the data source objects/arrays from DataTables for the selected rows (same as\n\t * fnGetSelected followed by fnGetData on each row from the table)\n\t *  @returns {array} Data from the TR nodes which are currently selected\n\t */\n\t\"fnGetSelectedData\": function ()\n\t{\n\t\tvar out = [];\n\t\tvar data=this.s.dt.aoData;\n\t\tvar i, iLen;\n\n\t\tfor ( i=0, iLen=data.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tif ( data[i]._DTTT_selected )\n\t\t\t{\n\t\t\t\tout.push( this.s.dt.oInstance.fnGetData(i) );\n\t\t\t}\n\t\t}\n\n\t\treturn out;\n\t},\n\n\n\t/**\n\t * Get the indexes of the selected rows\n\t *  @returns {array} List of row indexes\n\t *  @param {boolean} [filtered=false] Get only selected rows which are  \n\t *    available given the filtering applied to the table. By default\n\t *    this is false -  i.e. all rows, regardless of filtering are \n\t      selected.\n\t */\n\t\"fnGetSelectedIndexes\": function ( filtered )\n\t{\n\t\tvar\n\t\t\tout = [],\n\t\t\tdata = this.s.dt.aoData,\n\t\t\tdisplayed = this.s.dt.aiDisplay,\n\t\t\ti, iLen;\n\n\t\tif ( filtered )\n\t\t{\n\t\t\t// Only consider filtered rows\n\t\t\tfor ( i=0, iLen=displayed.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\tif ( data[ displayed[i] ]._DTTT_selected )\n\t\t\t\t{\n\t\t\t\t\tout.push( displayed[i] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use all rows\n\t\t\tfor ( i=0, iLen=data.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\tif ( data[i]._DTTT_selected )\n\t\t\t\t{\n\t\t\t\t\tout.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn out;\n\t},\n\n\n\t/**\n\t * Check to see if a current row is selected or not\n\t *  @param {Node} n TR node to check if it is currently selected or not\n\t *  @returns {Boolean} true if select, false otherwise\n\t */\n\t\"fnIsSelected\": function ( n )\n\t{\n\t\tvar pos = this.s.dt.oInstance.fnGetPosition( n );\n\t\treturn (this.s.dt.aoData[pos]._DTTT_selected===true) ? true : false;\n\t},\n\n\n\t/**\n\t * Select all rows in the table\n\t *  @param {boolean} [filtered=false] Select only rows which are available \n\t *    given the filtering applied to the table. By default this is false - \n\t *    i.e. all rows, regardless of filtering are selected.\n\t */\n\t\"fnSelectAll\": function ( filtered )\n\t{\n\t\tthis._fnRowSelect( filtered ?\n\t\t\tthis.s.dt.aiDisplay :\n\t\t\tthis.s.dt.aoData\n\t\t);\n\t},\n\n\n\t/**\n\t * Deselect all rows in the table\n\t *  @param {boolean} [filtered=false] Deselect only rows which are available \n\t *    given the filtering applied to the table. By default this is false - \n\t *    i.e. all rows, regardless of filtering are deselected.\n\t */\n\t\"fnSelectNone\": function ( filtered )\n\t{\n\t\tthis._fnRowDeselect( this.fnGetSelectedIndexes(filtered) );\n\t},\n\n\n\t/**\n\t * Select row(s)\n\t *  @param {node|object|array} n The row(s) to select. Can be a single DOM\n\t *    TR node, an array of TR nodes or a jQuery object.\n\t */\n\t\"fnSelect\": function ( n )\n\t{\n\t\tif ( this.s.select.type == \"single\" )\n\t\t{\n\t\t\tthis.fnSelectNone();\n\t\t\tthis._fnRowSelect( n );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis._fnRowSelect( n );\n\t\t}\n\t},\n\n\n\t/**\n\t * Deselect row(s)\n\t *  @param {node|object|array} n The row(s) to deselect. Can be a single DOM\n\t *    TR node, an array of TR nodes or a jQuery object.\n\t */\n\t\"fnDeselect\": function ( n )\n\t{\n\t\tthis._fnRowDeselect( n );\n\t},\n\n\n\t/**\n\t * Get the title of the document - useful for file names. The title is retrieved from either\n\t * the configuration object's 'title' parameter, or the HTML document title\n\t *  @param   {Object} oConfig Button configuration object\n\t *  @returns {String} Button title\n\t */\n\t\"fnGetTitle\": function( oConfig )\n\t{\n\t\tvar sTitle = \"\";\n\t\tif ( typeof oConfig.sTitle != 'undefined' && oConfig.sTitle !== \"\" ) {\n\t\t\tsTitle = oConfig.sTitle;\n\t\t} else {\n\t\t\tvar anTitle = document.getElementsByTagName('title');\n\t\t\tif ( anTitle.length > 0 )\n\t\t\t{\n\t\t\t\tsTitle = anTitle[0].innerHTML;\n\t\t\t}\n\t\t}\n\n\t\t/* Strip characters which the OS will object to - checking for UTF8 support in the scripting\n\t\t * engine\n\t\t */\n\t\tif ( \"\\u00A1\".toString().length < 4 ) {\n\t\t\treturn sTitle.replace(/[^a-zA-Z0-9_\\u00A1-\\uFFFF\\.,\\-_ !\\(\\)]/g, \"\");\n\t\t} else {\n\t\t\treturn sTitle.replace(/[^a-zA-Z0-9_\\.,\\-_ !\\(\\)]/g, \"\");\n\t\t}\n\t},\n\n\n\t/**\n\t * Calculate a unity array with the column width by proportion for a set of columns to be\n\t * included for a button. This is particularly useful for PDF creation, where we can use the\n\t * column widths calculated by the browser to size the columns in the PDF.\n\t *  @param   {Object} oConfig Button configuration object\n\t *  @returns {Array} Unity array of column ratios\n\t */\n\t\"fnCalcColRatios\": function ( oConfig )\n\t{\n\t\tvar\n\t\t\taoCols = this.s.dt.aoColumns,\n\t\t\taColumnsInc = this._fnColumnTargets( oConfig.mColumns ),\n\t\t\taColWidths = [],\n\t\t\tiWidth = 0, iTotal = 0, i, iLen;\n\n\t\tfor ( i=0, iLen=aColumnsInc.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tif ( aColumnsInc[i] )\n\t\t\t{\n\t\t\t\tiWidth = aoCols[i].nTh.offsetWidth;\n\t\t\t\tiTotal += iWidth;\n\t\t\t\taColWidths.push( iWidth );\n\t\t\t}\n\t\t}\n\n\t\tfor ( i=0, iLen=aColWidths.length ; i<iLen ; i++ )\n\t\t{\n\t\t\taColWidths[i] = aColWidths[i] / iTotal;\n\t\t}\n\n\t\treturn aColWidths.join('\\t');\n\t},\n\n\n\t/**\n\t * Get the information contained in a table as a string\n\t *  @param   {Object} oConfig Button configuration object\n\t *  @returns {String} Table data as a string\n\t */\n\t\"fnGetTableData\": function ( oConfig )\n\t{\n\t\t/* In future this could be used to get data from a plain HTML source as well as DataTables */\n\t\tif ( this.s.dt )\n\t\t{\n\t\t\treturn this._fnGetDataTablesData( oConfig );\n\t\t}\n\t},\n\n\n\t/**\n\t * Pass text to a flash button instance, which will be used on the button's click handler\n\t *  @param   {Object} clip Flash button object\n\t *  @param   {String} text Text to set\n\t */\n\t\"fnSetText\": function ( clip, text )\n\t{\n\t\tthis._fnFlashSetText( clip, text );\n\t},\n\n\n\t/**\n\t * Resize the flash elements of the buttons attached to this TableTools instance - this is\n\t * useful for when initialising TableTools when it is hidden (display:none) since sizes can't\n\t * be calculated at that time.\n\t */\n\t\"fnResizeButtons\": function ()\n\t{\n\t\tfor ( var cli in ZeroClipboard_TableTools.clients )\n\t\t{\n\t\t\tif ( cli )\n\t\t\t{\n\t\t\t\tvar client = ZeroClipboard_TableTools.clients[cli];\n\t\t\t\tif ( typeof client.domElement != 'undefined' &&\n\t\t\t\t\t client.domElement.parentNode )\n\t\t\t\t{\n\t\t\t\t\tclient.positionElement();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\n\t/**\n\t * Check to see if any of the ZeroClipboard client's attached need to be resized\n\t */\n\t\"fnResizeRequired\": function ()\n\t{\n\t\tfor ( var cli in ZeroClipboard_TableTools.clients )\n\t\t{\n\t\t\tif ( cli )\n\t\t\t{\n\t\t\t\tvar client = ZeroClipboard_TableTools.clients[cli];\n\t\t\t\tif ( typeof client.domElement != 'undefined' &&\n\t\t\t\t\t client.domElement.parentNode == this.dom.container &&\n\t\t\t\t\t client.sized === false )\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t},\n\n\n\t/**\n\t * Programmatically enable or disable the print view\n\t *  @param {boolean} [bView=true] Show the print view if true or not given. If false, then\n\t *    terminate the print view and return to normal.\n\t *  @param {object} [oConfig={}] Configuration for the print view\n\t *  @param {boolean} [oConfig.bShowAll=false] Show all rows in the table if true\n\t *  @param {string} [oConfig.sInfo] Information message, displayed as an overlay to the\n\t *    user to let them know what the print view is.\n\t *  @param {string} [oConfig.sMessage] HTML string to show at the top of the document - will\n\t *    be included in the printed document.\n\t */\n\t\"fnPrint\": function ( bView, oConfig )\n\t{\n\t\tif ( oConfig === undefined )\n\t\t{\n\t\t\toConfig = {};\n\t\t}\n\n\t\tif ( bView === undefined || bView )\n\t\t{\n\t\t\tthis._fnPrintStart( oConfig );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis._fnPrintEnd();\n\t\t}\n\t},\n\n\n\t/**\n\t * Show a message to the end user which is nicely styled\n\t *  @param {string} message The HTML string to show to the user\n\t *  @param {int} time The duration the message is to be shown on screen for (mS)\n\t */\n\t\"fnInfo\": function ( message, time ) {\n\t\tvar info = $('<div/>')\n\t\t\t.addClass( this.classes.print.info )\n\t\t\t.html( message )\n\t\t\t.appendTo( 'body' );\n\n\t\tsetTimeout( function() {\n\t\t\tinfo.fadeOut( \"normal\", function() {\n\t\t\t\tinfo.remove();\n\t\t\t} );\n\t\t}, time );\n\t},\n\n\n\n\t/**\n\t * Get the container element of the instance for attaching to the DOM\n\t *   @returns {node} DOM node\n\t */\n\t\"fnContainer\": function () {\n\t\treturn this.dom.container;\n\t},\n\n\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Private methods (they are of course public in JS, but recommended as private)\n\t * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n\t/**\n\t * Constructor logic\n\t *  @method  _fnConstruct\n\t *  @param   {Object} oOpts Same as TableTools constructor\n\t *  @returns void\n\t *  @private \n\t */\n\t\"_fnConstruct\": function ( oOpts )\n\t{\n\t\tvar that = this;\n\n\t\tthis._fnCustomiseSettings( oOpts );\n\n\t\t/* Container element */\n\t\tthis.dom.container = document.createElement( this.s.tags.container );\n\t\tthis.dom.container.className = this.classes.container;\n\n\t\t/* Row selection config */\n\t\tif ( this.s.select.type != 'none' )\n\t\t{\n\t\t\tthis._fnRowSelectConfig();\n\t\t}\n\n\t\t/* Buttons */\n\t\tthis._fnButtonDefinations( this.s.buttonSet, this.dom.container );\n\n\t\t/* Destructor */\n\t\tthis.s.dt.aoDestroyCallback.push( {\n\t\t\t\"sName\": \"TableTools\",\n\t\t\t\"fn\": function () {\n\t\t\t\t$(that.s.dt.nTBody)\n\t\t\t\t\t.off( 'click.DTTT_Select', that.s.custom.sRowSelector )\n\t\t\t\t\t.off( 'mousedown.DTTT_Select', 'tr' )\n\t\t\t\t\t.off( 'mouseup.DTTT_Select', 'tr' );\n\n\t\t\t\t$(that.dom.container).empty();\n\n\t\t\t\t// Remove the instance\n\t\t\t\tvar idx = $.inArray( that, TableTools._aInstances );\n\t\t\t\tif ( idx !== -1 ) {\n\t\t\t\t\tTableTools._aInstances.splice( idx, 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\n\t/**\n\t * Take the user defined settings and the default settings and combine them.\n\t *  @method  _fnCustomiseSettings\n\t *  @param   {Object} oOpts Same as TableTools constructor\n\t *  @returns void\n\t *  @private \n\t */\n\t\"_fnCustomiseSettings\": function ( oOpts )\n\t{\n\t\t/* Is this the master control instance or not? */\n\t\tif ( typeof this.s.dt._TableToolsInit == 'undefined' )\n\t\t{\n\t\t\tthis.s.master = true;\n\t\t\tthis.s.dt._TableToolsInit = true;\n\t\t}\n\n\t\t/* We can use the table node from comparisons to group controls */\n\t\tthis.dom.table = this.s.dt.nTable;\n\n\t\t/* Clone the defaults and then the user options */\n\t\tthis.s.custom = $.extend( {}, TableTools.DEFAULTS, oOpts );\n\n\t\t/* Flash file location */\n\t\tthis.s.swfPath = this.s.custom.sSwfPath;\n\t\tif ( typeof ZeroClipboard_TableTools != 'undefined' )\n\t\t{\n\t\t\tZeroClipboard_TableTools.moviePath = this.s.swfPath;\n\t\t}\n\n\t\t/* Table row selecting */\n\t\tthis.s.select.type = this.s.custom.sRowSelect;\n\t\tthis.s.select.preRowSelect = this.s.custom.fnPreRowSelect;\n\t\tthis.s.select.postSelected = this.s.custom.fnRowSelected;\n\t\tthis.s.select.postDeselected = this.s.custom.fnRowDeselected;\n\n\t\t// Backwards compatibility - allow the user to specify a custom class in the initialiser\n\t\tif ( this.s.custom.sSelectedClass )\n\t\t{\n\t\t\tthis.classes.select.row = this.s.custom.sSelectedClass;\n\t\t}\n\n\t\tthis.s.tags = this.s.custom.oTags;\n\n\t\t/* Button set */\n\t\tthis.s.buttonSet = this.s.custom.aButtons;\n\t},\n\n\n\t/**\n\t * Take the user input arrays and expand them to be fully defined, and then add them to a given\n\t * DOM element\n\t *  @method  _fnButtonDefinations\n\t *  @param {array} buttonSet Set of user defined buttons\n\t *  @param {node} wrapper Node to add the created buttons to\n\t *  @returns void\n\t *  @private \n\t */\n\t\"_fnButtonDefinations\": function ( buttonSet, wrapper )\n\t{\n\t\tvar buttonDef;\n\n\t\tfor ( var i=0, iLen=buttonSet.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tif ( typeof buttonSet[i] == \"string\" )\n\t\t\t{\n\t\t\t\tif ( typeof TableTools.BUTTONS[ buttonSet[i] ] == 'undefined' )\n\t\t\t\t{\n\t\t\t\t\talert( \"TableTools: Warning - unknown button type: \"+buttonSet[i] );\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tbuttonDef = $.extend( {}, TableTools.BUTTONS[ buttonSet[i] ], true );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ( typeof TableTools.BUTTONS[ buttonSet[i].sExtends ] == 'undefined' )\n\t\t\t\t{\n\t\t\t\t\talert( \"TableTools: Warning - unknown button type: \"+buttonSet[i].sExtends );\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tvar o = $.extend( {}, TableTools.BUTTONS[ buttonSet[i].sExtends ], true );\n\t\t\t\tbuttonDef = $.extend( o, buttonSet[i], true );\n\t\t\t}\n\n\t\t\tvar button = this._fnCreateButton(\n\t\t\t\tbuttonDef,\n\t\t\t\t$(wrapper).hasClass(this.classes.collection.container)\n\t\t\t);\n\n\t\t\tif ( button ) {\n\t\t\t\twrapper.appendChild( button );\n\t\t\t}\n\t\t}\n\t},\n\n\n\t/**\n\t * Create and configure a TableTools button\n\t *  @method  _fnCreateButton\n\t *  @param   {Object} oConfig Button configuration object\n\t *  @returns {Node} Button element\n\t *  @private \n\t */\n\t\"_fnCreateButton\": function ( oConfig, bCollectionButton )\n\t{\n\t  var nButton = this._fnButtonBase( oConfig, bCollectionButton );\n\n\t\tif ( oConfig.sAction.match(/flash/) )\n\t\t{\n\t\t\tif ( ! this._fnHasFlash() ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tthis._fnFlashConfig( nButton, oConfig );\n\t\t}\n\t\telse if ( oConfig.sAction == \"text\" )\n\t\t{\n\t\t\tthis._fnTextConfig( nButton, oConfig );\n\t\t}\n\t\telse if ( oConfig.sAction == \"div\" )\n\t\t{\n\t\t\tthis._fnTextConfig( nButton, oConfig );\n\t\t}\n\t\telse if ( oConfig.sAction == \"collection\" )\n\t\t{\n\t\t\tthis._fnTextConfig( nButton, oConfig );\n\t\t\tthis._fnCollectionConfig( nButton, oConfig );\n\t\t}\n\n\t\tif ( this.s.dt.iTabIndex !== -1 ) {\n\t\t\t$(nButton)\n\t\t\t\t.attr( 'tabindex', this.s.dt.iTabIndex )\n\t\t\t\t.attr( 'aria-controls', this.s.dt.sTableId )\n\t\t\t\t.on( 'keyup.DTTT', function (e) {\n\t\t\t\t\t// Trigger the click event on return key when focused.\n\t\t\t\t\t// Note that for Flash buttons this has no effect since we\n\t\t\t\t\t// can't programmatically trigger the Flash export\n\t\t\t\t\tif ( e.keyCode === 13 ) {\n\t\t\t\t\t\te.stopPropagation();\n\n\t\t\t\t\t\t$(this).trigger( 'click' );\n\t\t\t\t\t}\n\t\t\t\t} )\n\t\t\t\t.on( 'mousedown.DTTT', function (e) {\n\t\t\t\t\t// On mousedown we want to stop the focus occurring on the\n\t\t\t\t\t// button, focus is used only for the keyboard navigation.\n\t\t\t\t\t// But using preventDefault for the flash buttons stops the\n\t\t\t\t\t// flash action. However, it is not the button that gets\n\t\t\t\t\t// focused but the flash element for flash buttons, so this\n\t\t\t\t\t// works\n\t\t\t\t\tif ( ! oConfig.sAction.match(/flash/) ) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}\n\n\t\treturn nButton;\n\t},\n\n\n\t/**\n\t * Create the DOM needed for the button and apply some base properties. All buttons start here\n\t *  @method  _fnButtonBase\n\t *  @param   {o} oConfig Button configuration object\n\t *  @returns {Node} DIV element for the button\n\t *  @private\n\t */\n\t\"_fnButtonBase\": function ( o, bCollectionButton )\n\t{\n\t\tvar sTag, sLiner, sClass;\n\n\t\tif ( bCollectionButton )\n\t\t{\n\t\t\tsTag = o.sTag && o.sTag !== \"default\" ? o.sTag : this.s.tags.collection.button;\n\t\t\tsLiner = o.sLinerTag && o.sLinerTag !== \"default\" ? o.sLiner : this.s.tags.collection.liner;\n\t\t\tsClass = this.classes.collection.buttons.normal;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsTag = o.sTag && o.sTag !== \"default\" ? o.sTag : this.s.tags.button;\n\t\t\tsLiner = o.sLinerTag && o.sLinerTag !== \"default\" ? o.sLiner : this.s.tags.liner;\n\t\t\tsClass = this.classes.buttons.normal;\n\t\t}\n\n\t\tvar\n\t\t  nButton = document.createElement( sTag ),\n\t\t  nSpan = document.createElement( sLiner ),\n\t\t  masterS = this._fnGetMasterSettings();\n\n\t\tnButton.className = sClass+\" \"+o.sButtonClass;\n\t\tnButton.setAttribute('id', \"ToolTables_\"+this.s.dt.sInstance+\"_\"+masterS.buttonCounter );\n\t\tnButton.appendChild( nSpan );\n\t\tnSpan.innerHTML = o.sButtonText;\n\n\t\tmasterS.buttonCounter++;\n\n\t\treturn nButton;\n\t},\n\n\n\t/**\n\t * Get the settings object for the master instance. When more than one TableTools instance is\n\t * assigned to a DataTable, only one of them can be the 'master' (for the select rows). As such,\n\t * we will typically want to interact with that master for global properties.\n\t *  @method  _fnGetMasterSettings\n\t *  @returns {Object} TableTools settings object\n\t *  @private \n\t */\n\t\"_fnGetMasterSettings\": function ()\n\t{\n\t\tif ( this.s.master )\n\t\t{\n\t\t\treturn this.s;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/* Look for the master which has the same DT as this one */\n\t\t\tvar instances = TableTools._aInstances;\n\t\t\tfor ( var i=0, iLen=instances.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\tif ( this.dom.table == instances[i].s.dt.nTable )\n\t\t\t\t{\n\t\t\t\t\treturn instances[i].s;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Button collection functions\n\t */\n\n\t/**\n\t * Create a collection button, when activated will present a drop down list of other buttons\n\t *  @param   {Node} nButton Button to use for the collection activation\n\t *  @param   {Object} oConfig Button configuration object\n\t *  @returns void\n\t *  @private\n\t */\n\t\"_fnCollectionConfig\": function ( nButton, oConfig )\n\t{\n\t\tvar nHidden = document.createElement( this.s.tags.collection.container );\n\t\tnHidden.style.display = \"none\";\n\t\tnHidden.className = this.classes.collection.container;\n\t\toConfig._collection = nHidden;\n\t\tdocument.body.appendChild( nHidden );\n\n\t\tthis._fnButtonDefinations( oConfig.aButtons, nHidden );\n\t},\n\n\n\t/**\n\t * Show a button collection\n\t *  @param   {Node} nButton Button to use for the collection\n\t *  @param   {Object} oConfig Button configuration object\n\t *  @returns void\n\t *  @private\n\t */\n\t\"_fnCollectionShow\": function ( nButton, oConfig )\n\t{\n\t\tvar\n\t\t\tthat = this,\n\t\t\toPos = $(nButton).offset(),\n\t\t\tnHidden = oConfig._collection,\n\t\t\tiDivX = oPos.left,\n\t\t\tiDivY = oPos.top + $(nButton).outerHeight(),\n\t\t\tiWinHeight = $(window).height(), iDocHeight = $(document).height(),\n\t\t\tiWinWidth = $(window).width(), iDocWidth = $(document).width();\n\n\t\tnHidden.style.position = \"absolute\";\n\t\tnHidden.style.left = iDivX+\"px\";\n\t\tnHidden.style.top = iDivY+\"px\";\n\t\tnHidden.style.display = \"block\";\n\t\t$(nHidden).css('opacity',0);\n\n\t\tvar nBackground = document.createElement('div');\n\t\tnBackground.style.position = \"absolute\";\n\t\tnBackground.style.left = \"0px\";\n\t\tnBackground.style.top = \"0px\";\n\t\tnBackground.style.height = ((iWinHeight>iDocHeight)? iWinHeight : iDocHeight) +\"px\";\n\t\tnBackground.style.width = ((iWinWidth>iDocWidth)? iWinWidth : iDocWidth) +\"px\";\n\t\tnBackground.className = this.classes.collection.background;\n\t\t$(nBackground).css('opacity',0);\n\n\t\tdocument.body.appendChild( nBackground );\n\t\tdocument.body.appendChild( nHidden );\n\n\t\t/* Visual corrections to try and keep the collection visible */\n\t\tvar iDivWidth = $(nHidden).outerWidth();\n\t\tvar iDivHeight = $(nHidden).outerHeight();\n\n\t\tif ( iDivX + iDivWidth > iDocWidth )\n\t\t{\n\t\t\tnHidden.style.left = (iDocWidth-iDivWidth)+\"px\";\n\t\t}\n\n\t\tif ( iDivY + iDivHeight > iDocHeight )\n\t\t{\n\t\t\tnHidden.style.top = (iDivY-iDivHeight-$(nButton).outerHeight())+\"px\";\n\t\t}\n\n\t\tthis.dom.collection.collection = nHidden;\n\t\tthis.dom.collection.background = nBackground;\n\n\t\t/* This results in a very small delay for the end user but it allows the animation to be\n\t\t * much smoother. If you don't want the animation, then the setTimeout can be removed\n\t\t */\n\t\tsetTimeout( function () {\n\t\t\t$(nHidden).animate({\"opacity\": 1}, 500);\n\t\t\t$(nBackground).animate({\"opacity\": 0.25}, 500);\n\t\t}, 10 );\n\n\t\t/* Resize the buttons to the Flash contents fit */\n\t\tthis.fnResizeButtons();\n\n\t\t/* Event handler to remove the collection display */\n\t\t$(nBackground).click( function () {\n\t\t\tthat._fnCollectionHide.call( that, null, null );\n\t\t} );\n\t},\n\n\n\t/**\n\t * Hide a button collection\n\t *  @param   {Node} nButton Button to use for the collection\n\t *  @param   {Object} oConfig Button configuration object\n\t *  @returns void\n\t *  @private\n\t */\n\t\"_fnCollectionHide\": function ( nButton, oConfig )\n\t{\n\t\tif ( oConfig !== null && oConfig.sExtends == 'collection' )\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this.dom.collection.collection !== null )\n\t\t{\n\t\t\t$(this.dom.collection.collection).animate({\"opacity\": 0}, 500, function (e) {\n\t\t\t\tthis.style.display = \"none\";\n\t\t\t} );\n\n\t\t\t$(this.dom.collection.background).animate({\"opacity\": 0}, 500, function (e) {\n\t\t\t\tthis.parentNode.removeChild( this );\n\t\t\t} );\n\n\t\t\tthis.dom.collection.collection = null;\n\t\t\tthis.dom.collection.background = null;\n\t\t}\n\t},\n\n\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Row selection functions\n\t */\n\n\t/**\n\t * Add event handlers to a table to allow for row selection\n\t *  @method  _fnRowSelectConfig\n\t *  @returns void\n\t *  @private \n\t */\n\t\"_fnRowSelectConfig\": function ()\n\t{\n\t\tif ( this.s.master )\n\t\t{\n\t\t\tvar\n\t\t\t\tthat = this,\n\t\t\t\ti, iLen,\n\t\t\t\tdt = this.s.dt,\n\t\t\t\taoOpenRows = this.s.dt.aoOpenRows;\n\n\t\t\t$(dt.nTable).addClass( this.classes.select.table );\n\n\t\t\t// When using OS style selection, we want to cancel the shift text\n\t\t\t// selection, but only when the shift key is used (so you can\n\t\t\t// actually still select text in the table)\n\t\t\tif ( this.s.select.type === 'os' ) {\n\t\t\t\t$(dt.nTBody).on( 'mousedown.DTTT_Select', 'tr', function(e) {\n\t\t\t\t\tif ( e.shiftKey ) {\n\n\t\t\t\t\t\t$(dt.nTBody)\n\t\t\t\t\t\t\t.css( '-moz-user-select', 'none' )\n\t\t\t\t\t\t\t.one('selectstart.DTTT_Select', 'tr', function () {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\t$(dt.nTBody).on( 'mouseup.DTTT_Select', 'tr', function(e) {\n\t\t\t\t\t$(dt.nTBody).css( '-moz-user-select', '' );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Row selection\n\t\t\t$(dt.nTBody).on( 'click.DTTT_Select', this.s.custom.sRowSelector, function(e) {\n\t\t\t\tvar row = this.nodeName.toLowerCase() === 'tr' ?\n\t\t\t\t\tthis :\n\t\t\t\t\t$(this).parents('tr')[0];\n\n\t\t\t\tvar select = that.s.select;\n\t\t\t\tvar pos = that.s.dt.oInstance.fnGetPosition( row );\n\n\t\t\t\t/* Sub-table must be ignored (odd that the selector won't do this with >) */\n\t\t\t\tif ( row.parentNode != dt.nTBody ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t/* Check that we are actually working with a DataTables controlled row */\n\t\t\t\tif ( dt.oInstance.fnGetData(row) === null ) {\n\t\t\t\t    return;\n\t\t\t\t}\n\n\t\t\t\t// Shift click, ctrl click and simple click handling to make\n\t\t\t\t// row selection a lot like a file system in desktop OSs\n\t\t\t\tif ( select.type == 'os' ) {\n\t\t\t\t\tif ( e.ctrlKey || e.metaKey ) {\n\t\t\t\t\t\t// Add or remove from the selection\n\t\t\t\t\t\tif ( that.fnIsSelected( row ) ) {\n\t\t\t\t\t\t\tthat._fnRowDeselect( row, e );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tthat._fnRowSelect( row, e );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if ( e.shiftKey ) {\n\t\t\t\t\t\t// Add a range of rows, from the last selected row to\n\t\t\t\t\t\t// this one\n\t\t\t\t\t\tvar rowIdxs = that.s.dt.aiDisplay.slice(); // visible rows\n\t\t\t\t\t\tvar idx1 = $.inArray( select.lastRow, rowIdxs );\n\t\t\t\t\t\tvar idx2 = $.inArray( pos, rowIdxs );\n\n\t\t\t\t\t\tif ( that.fnGetSelected().length === 0 || idx1 === -1 ) {\n\t\t\t\t\t\t\t// select from top to here - slightly odd, but both\n\t\t\t\t\t\t\t// Windows and Mac OS do this\n\t\t\t\t\t\t\trowIdxs.splice( $.inArray( pos, rowIdxs )+1, rowIdxs.length );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// reverse so we can shift click 'up' as well as down\n\t\t\t\t\t\t\tif ( idx1 > idx2 ) {\n\t\t\t\t\t\t\t\tvar tmp = idx2;\n\t\t\t\t\t\t\t\tidx2 = idx1;\n\t\t\t\t\t\t\t\tidx1 = tmp;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\trowIdxs.splice( idx2+1, rowIdxs.length );\n\t\t\t\t\t\t\trowIdxs.splice( 0, idx1 );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! that.fnIsSelected( row ) ) {\n\t\t\t\t\t\t\t// Select range\n\t\t\t\t\t\t\tthat._fnRowSelect( rowIdxs, e );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// Deselect range - need to keep the clicked on row selected\n\t\t\t\t\t\t\trowIdxs.splice( $.inArray( pos, rowIdxs ), 1 );\n\t\t\t\t\t\t\tthat._fnRowDeselect( rowIdxs, e );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// No cmd or shift click. Deselect current if selected,\n\t\t\t\t\t\t// or select this row only\n\t\t\t\t\t\tif ( that.fnIsSelected( row ) && that.fnGetSelected().length === 1 ) {\n\t\t\t\t\t\t\tthat._fnRowDeselect( row, e );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tthat.fnSelectNone();\n\t\t\t\t\t\t\tthat._fnRowSelect( row, e );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ( that.fnIsSelected( row ) ) {\n\t\t\t\t\tthat._fnRowDeselect( row, e );\n\t\t\t\t}\n\t\t\t\telse if ( select.type == \"single\" ) {\n\t\t\t\t\tthat.fnSelectNone();\n\t\t\t\t\tthat._fnRowSelect( row, e );\n\t\t\t\t}\n\t\t\t\telse if ( select.type == \"multi\" ) {\n\t\t\t\t\tthat._fnRowSelect( row, e );\n\t\t\t\t}\n\n\t\t\t\tselect.lastRow = pos;\n\t\t\t} );//.on('selectstart', function () { return false; } );\n\n\t\t\t// Bind a listener to the DataTable for when new rows are created.\n\t\t\t// This allows rows to be visually selected when they should be and\n\t\t\t// deferred rendering is used.\n\t\t\tdt.oApi._fnCallbackReg( dt, 'aoRowCreatedCallback', function (tr, data, index) {\n\t\t\t\tif ( dt.aoData[index]._DTTT_selected ) {\n\t\t\t\t\t$(tr).addClass( that.classes.select.row );\n\t\t\t\t}\n\t\t\t}, 'TableTools-SelectAll' );\n\t\t}\n\t},\n\n\t/**\n\t * Select rows\n\t *  @param   {*} src Rows to select - see _fnSelectData for a description of valid inputs\n\t *  @private \n\t */\n\t\"_fnRowSelect\": function ( src, e )\n\t{\n\t\tvar\n\t\t\tthat = this,\n\t\t\tdata = this._fnSelectData( src ),\n\t\t\tfirstTr = data.length===0 ? null : data[0].nTr,\n\t\t\tanSelected = [],\n\t\t\ti, len;\n\n\t\t// Get all the rows that will be selected\n\t\tfor ( i=0, len=data.length ; i<len ; i++ )\n\t\t{\n\t\t\tif ( data[i].nTr )\n\t\t\t{\n\t\t\t\tanSelected.push( data[i].nTr );\n\t\t\t}\n\t\t}\n\n\t\t// User defined pre-selection function\n\t\tif ( this.s.select.preRowSelect !== null && !this.s.select.preRowSelect.call(this, e, anSelected, true) )\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t// Mark them as selected\n\t\tfor ( i=0, len=data.length ; i<len ; i++ )\n\t\t{\n\t\t\tdata[i]._DTTT_selected = true;\n\n\t\t\tif ( data[i].nTr )\n\t\t\t{\n\t\t\t\t$(data[i].nTr).addClass( that.classes.select.row );\n\t\t\t}\n\t\t}\n\n\t\t// Post-selection function\n\t\tif ( this.s.select.postSelected !== null )\n\t\t{\n\t\t\tthis.s.select.postSelected.call( this, anSelected );\n\t\t}\n\n\t\tTableTools._fnEventDispatch( this, 'select', anSelected, true );\n\t},\n\n\t/**\n\t * Deselect rows\n\t *  @param   {*} src Rows to deselect - see _fnSelectData for a description of valid inputs\n\t *  @private \n\t */\n\t\"_fnRowDeselect\": function ( src, e )\n\t{\n\t\tvar\n\t\t\tthat = this,\n\t\t\tdata = this._fnSelectData( src ),\n\t\t\tfirstTr = data.length===0 ? null : data[0].nTr,\n\t\t\tanDeselectedTrs = [],\n\t\t\ti, len;\n\n\t\t// Get all the rows that will be deselected\n\t\tfor ( i=0, len=data.length ; i<len ; i++ )\n\t\t{\n\t\t\tif ( data[i].nTr )\n\t\t\t{\n\t\t\t\tanDeselectedTrs.push( data[i].nTr );\n\t\t\t}\n\t\t}\n\n\t\t// User defined pre-selection function\n\t\tif ( this.s.select.preRowSelect !== null && !this.s.select.preRowSelect.call(this, e, anDeselectedTrs, false) )\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t// Mark them as deselected\n\t\tfor ( i=0, len=data.length ; i<len ; i++ )\n\t\t{\n\t\t\tdata[i]._DTTT_selected = false;\n\n\t\t\tif ( data[i].nTr )\n\t\t\t{\n\t\t\t\t$(data[i].nTr).removeClass( that.classes.select.row );\n\t\t\t}\n\t\t}\n\n\t\t// Post-deselection function\n\t\tif ( this.s.select.postDeselected !== null )\n\t\t{\n\t\t\tthis.s.select.postDeselected.call( this, anDeselectedTrs );\n\t\t}\n\n\t\tTableTools._fnEventDispatch( this, 'select', anDeselectedTrs, false );\n\t},\n\n\t/**\n\t * Take a data source for row selection and convert it into aoData points for the DT\n\t *   @param {*} src Can be a single DOM TR node, an array of TR nodes (including a\n\t *     a jQuery object), a single aoData point from DataTables, an array of aoData\n\t *     points or an array of aoData indexes\n\t *   @returns {array} An array of aoData points\n\t */\n\t\"_fnSelectData\": function ( src )\n\t{\n\t\tvar out = [], pos, i, iLen;\n\n\t\tif ( src.nodeName )\n\t\t{\n\t\t\t// Single node\n\t\t\tpos = this.s.dt.oInstance.fnGetPosition( src );\n\t\t\tout.push( this.s.dt.aoData[pos] );\n\t\t}\n\t\telse if ( typeof src.length !== 'undefined' )\n\t\t{\n\t\t\t// jQuery object or an array of nodes, or aoData points\n\t\t\tfor ( i=0, iLen=src.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\tif ( src[i].nodeName )\n\t\t\t\t{\n\t\t\t\t\tpos = this.s.dt.oInstance.fnGetPosition( src[i] );\n\t\t\t\t\tout.push( this.s.dt.aoData[pos] );\n\t\t\t\t}\n\t\t\t\telse if ( typeof src[i] === 'number' )\n\t\t\t\t{\n\t\t\t\t\tout.push( this.s.dt.aoData[ src[i] ] );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tout.push( src[i] );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn out;\n\t\t}\n\t\telse if ( typeof src === 'number' )\n\t\t{\n\t\t\tout.push(this.s.dt.aoData[src]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// A single aoData point\n\t\t\tout.push( src );\n\t\t}\n\n\t\treturn out;\n\t},\n\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Text button functions\n\t */\n\n\t/**\n\t * Configure a text based button for interaction events\n\t *  @method  _fnTextConfig\n\t *  @param   {Node} nButton Button element which is being considered\n\t *  @param   {Object} oConfig Button configuration object\n\t *  @returns void\n\t *  @private \n\t */\n\t\"_fnTextConfig\": function ( nButton, oConfig )\n\t{\n\t\tvar that = this;\n\n\t\tif ( oConfig.fnInit !== null )\n\t\t{\n\t\t\toConfig.fnInit.call( this, nButton, oConfig );\n\t\t}\n\n\t\tif ( oConfig.sToolTip !== \"\" )\n\t\t{\n\t\t\tnButton.title = oConfig.sToolTip;\n\t\t}\n\n\t\t$(nButton).hover( function () {\n\t\t\tif ( oConfig.fnMouseover !== null )\n\t\t\t{\n\t\t\t\toConfig.fnMouseover.call( this, nButton, oConfig, null );\n\t\t\t}\n\t\t}, function () {\n\t\t\tif ( oConfig.fnMouseout !== null )\n\t\t\t{\n\t\t\t\toConfig.fnMouseout.call( this, nButton, oConfig, null );\n\t\t\t}\n\t\t} );\n\n\t\tif ( oConfig.fnSelect !== null )\n\t\t{\n\t\t\tTableTools._fnEventListen( this, 'select', function (n) {\n\t\t\t\toConfig.fnSelect.call( that, nButton, oConfig, n );\n\t\t\t} );\n\t\t}\n\n\t\t$(nButton).click( function (e) {\n\t\t\t//e.preventDefault();\n\n\t\t\tif ( oConfig.fnClick !== null )\n\t\t\t{\n\t\t\t\toConfig.fnClick.call( that, nButton, oConfig, null, e );\n\t\t\t}\n\n\t\t\t/* Provide a complete function to match the behaviour of the flash elements */\n\t\t\tif ( oConfig.fnComplete !== null )\n\t\t\t{\n\t\t\t\toConfig.fnComplete.call( that, nButton, oConfig, null, null );\n\t\t\t}\n\n\t\t\tthat._fnCollectionHide( nButton, oConfig );\n\t\t} );\n\t},\n\n\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Flash button functions\n\t */\n\t\n\t/**\n\t * Check if the Flash plug-in is available\n\t *  @method  _fnHasFlash\n\t *  @returns {boolean} `true` if Flash available, `false` otherwise\n\t *  @private \n\t */\n\t\"_fnHasFlash\": function ()\n\t{\n\t\ttry {\n\t\t\tvar fo = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');\n\t\t\tif (fo) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tcatch (e) {\n\t\t\tif (\n\t\t\t\tnavigator.mimeTypes &&\n\t\t\t\tnavigator.mimeTypes['application/x-shockwave-flash'] !== undefined &&\n\t\t\t\tnavigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t},\n\n\n\t/**\n\t * Configure a flash based button for interaction events\n\t *  @method  _fnFlashConfig\n\t *  @param   {Node} nButton Button element which is being considered\n\t *  @param   {o} oConfig Button configuration object\n\t *  @returns void\n\t *  @private \n\t */\n\t\"_fnFlashConfig\": function ( nButton, oConfig )\n\t{\n\t\tvar that = this;\n\t\tvar flash = new ZeroClipboard_TableTools.Client();\n\n\t\tif ( oConfig.fnInit !== null )\n\t\t{\n\t\t\toConfig.fnInit.call( this, nButton, oConfig );\n\t\t}\n\n\t\tflash.setHandCursor( true );\n\n\t\tif ( oConfig.sAction == \"flash_save\" )\n\t\t{\n\t\t\tflash.setAction( 'save' );\n\t\t\tflash.setCharSet( (oConfig.sCharSet==\"utf16le\") ? 'UTF16LE' : 'UTF8' );\n\t\t\tflash.setBomInc( oConfig.bBomInc );\n\t\t\tflash.setFileName( oConfig.sFileName.replace('*', this.fnGetTitle(oConfig)) );\n\t\t}\n\t\telse if ( oConfig.sAction == \"flash_pdf\" )\n\t\t{\n\t\t\tflash.setAction( 'pdf' );\n\t\t\tflash.setFileName( oConfig.sFileName.replace('*', this.fnGetTitle(oConfig)) );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tflash.setAction( 'copy' );\n\t\t}\n\n\t\tflash.addEventListener('mouseOver', function(client) {\n\t\t\tif ( oConfig.fnMouseover !== null )\n\t\t\t{\n\t\t\t\toConfig.fnMouseover.call( that, nButton, oConfig, flash );\n\t\t\t}\n\t\t} );\n\n\t\tflash.addEventListener('mouseOut', function(client) {\n\t\t\tif ( oConfig.fnMouseout !== null )\n\t\t\t{\n\t\t\t\toConfig.fnMouseout.call( that, nButton, oConfig, flash );\n\t\t\t}\n\t\t} );\n\n\t\tflash.addEventListener('mouseDown', function(client) {\n\t\t\tif ( oConfig.fnClick !== null )\n\t\t\t{\n\t\t\t\toConfig.fnClick.call( that, nButton, oConfig, flash );\n\t\t\t}\n\t\t} );\n\n\t\tflash.addEventListener('complete', function (client, text) {\n\t\t\tif ( oConfig.fnComplete !== null )\n\t\t\t{\n\t\t\t\toConfig.fnComplete.call( that, nButton, oConfig, flash, text );\n\t\t\t}\n\t\t\tthat._fnCollectionHide( nButton, oConfig );\n\t\t} );\n\n\t\tif ( oConfig.fnSelect !== null )\n\t\t{\n\t\t\tTableTools._fnEventListen( this, 'select', function (n) {\n\t\t\t\toConfig.fnSelect.call( that, nButton, oConfig, n );\n\t\t\t} );\n\t\t}\n\n\t\tthis._fnFlashGlue( flash, nButton, oConfig.sToolTip );\n\t},\n\n\n\t/**\n\t * Wait until the id is in the DOM before we \"glue\" the swf. Note that this function will call\n\t * itself (using setTimeout) until it completes successfully\n\t *  @method  _fnFlashGlue\n\t *  @param   {Object} clip Zero clipboard object\n\t *  @param   {Node} node node to glue swf to\n\t *  @param   {String} text title of the flash movie\n\t *  @returns void\n\t *  @private \n\t */\n\t\"_fnFlashGlue\": function ( flash, node, text )\n\t{\n\t\tvar that = this;\n\t\tvar id = node.getAttribute('id');\n\n\t\tif ( document.getElementById(id) )\n\t\t{\n\t\t\tflash.glue( node, text );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetTimeout( function () {\n\t\t\t\tthat._fnFlashGlue( flash, node, text );\n\t\t\t}, 100 );\n\t\t}\n\t},\n\n\n\t/**\n\t * Set the text for the flash clip to deal with\n\t * \n\t * This function is required for large information sets. There is a limit on the \n\t * amount of data that can be transferred between Javascript and Flash in a single call, so\n\t * we use this method to build up the text in Flash by sending over chunks. It is estimated\n\t * that the data limit is around 64k, although it is undocumented, and appears to be different\n\t * between different flash versions. We chunk at 8KiB.\n\t *  @method  _fnFlashSetText\n\t *  @param   {Object} clip the ZeroClipboard object\n\t *  @param   {String} sData the data to be set\n\t *  @returns void\n\t *  @private \n\t */\n\t\"_fnFlashSetText\": function ( clip, sData )\n\t{\n\t\tvar asData = this._fnChunkData( sData, 8192 );\n\n\t\tclip.clearText();\n\t\tfor ( var i=0, iLen=asData.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tclip.appendText( asData[i] );\n\t\t}\n\t},\n\n\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Data retrieval functions\n\t */\n\n\t/**\n\t * Convert the mixed columns variable into a boolean array the same size as the columns, which\n\t * indicates which columns we want to include\n\t *  @method  _fnColumnTargets\n\t *  @param   {String|Array} mColumns The columns to be included in data retrieval. If a string\n\t *\t\t\t then it can take the value of \"visible\" or \"hidden\" (to include all visible or\n\t *\t\t\t hidden columns respectively). Or an array of column indexes\n\t *  @returns {Array} A boolean array the length of the columns of the table, which each value\n\t *\t\t\t indicating if the column is to be included or not\n\t *  @private \n\t */\n\t\"_fnColumnTargets\": function ( mColumns )\n\t{\n\t\tvar aColumns = [];\n\t\tvar dt = this.s.dt;\n\t\tvar i, iLen;\n\t\tvar columns = dt.aoColumns;\n\t\tvar columnCount = columns.length;\n\n\t\tif ( typeof mColumns == \"function\" )\n\t\t{\n\t\t\tvar a = mColumns.call( this, dt );\n\n\t\t\tfor ( i=0, iLen=columnCount ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\taColumns.push( $.inArray( i, a ) !== -1 ? true : false );\n\t\t\t}\n\t\t}\n\t\telse if ( typeof mColumns == \"object\" )\n\t\t{\n\t\t\tfor ( i=0, iLen=columnCount ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\taColumns.push( false );\n\t\t\t}\n\n\t\t\tfor ( i=0, iLen=mColumns.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\taColumns[ mColumns[i] ] = true;\n\t\t\t}\n\t\t}\n\t\telse if ( mColumns == \"visible\" )\n\t\t{\n\t\t\tfor ( i=0, iLen=columnCount ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\taColumns.push( columns[i].bVisible ? true : false );\n\t\t\t}\n\t\t}\n\t\telse if ( mColumns == \"hidden\" )\n\t\t{\n\t\t\tfor ( i=0, iLen=columnCount ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\taColumns.push( columns[i].bVisible ? false : true );\n\t\t\t}\n\t\t}\n\t\telse if ( mColumns == \"sortable\" )\n\t\t{\n\t\t\tfor ( i=0, iLen=columnCount ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\taColumns.push( columns[i].bSortable ? true : false );\n\t\t\t}\n\t\t}\n\t\telse /* all */\n\t\t{\n\t\t\tfor ( i=0, iLen=columnCount ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\taColumns.push( true );\n\t\t\t}\n\t\t}\n\n\t\treturn aColumns;\n\t},\n\n\n\t/**\n\t * New line character(s) depend on the platforms\n\t *  @method  method\n\t *  @param   {Object} oConfig Button configuration object - only interested in oConfig.sNewLine\n\t *  @returns {String} Newline character\n\t */\n\t\"_fnNewline\": function ( oConfig )\n\t{\n\t\tif ( oConfig.sNewLine == \"auto\" )\n\t\t{\n\t\t\treturn navigator.userAgent.match(/Windows/) ? \"\\r\\n\" : \"\\n\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn oConfig.sNewLine;\n\t\t}\n\t},\n\n\n\t/**\n\t * Get data from DataTables' internals and format it for output\n\t *  @method  _fnGetDataTablesData\n\t *  @param   {Object} oConfig Button configuration object\n\t *  @param   {String} oConfig.sFieldBoundary Field boundary for the data cells in the string\n\t *  @param   {String} oConfig.sFieldSeperator Field separator for the data cells\n\t *  @param   {String} oConfig.sNewline New line options\n\t *  @param   {Mixed} oConfig.mColumns Which columns should be included in the output\n\t *  @param   {Boolean} oConfig.bHeader Include the header\n\t *  @param   {Boolean} oConfig.bFooter Include the footer\n\t *  @param   {Boolean} oConfig.bSelectedOnly Include only the selected rows in the output\n\t *  @returns {String} Concatenated string of data\n\t *  @private \n\t */\n\t\"_fnGetDataTablesData\": function ( oConfig )\n\t{\n\t\tvar i, iLen, j, jLen;\n\t\tvar aRow, aData=[], sLoopData='', arr;\n\t\tvar dt = this.s.dt, tr, child;\n\t\tvar regex = new RegExp(oConfig.sFieldBoundary, \"g\"); /* Do it here for speed */\n\t\tvar aColumnsInc = this._fnColumnTargets( oConfig.mColumns );\n\t\tvar bSelectedOnly = (typeof oConfig.bSelectedOnly != 'undefined') ? oConfig.bSelectedOnly : false;\n\n\t\t/*\n\t\t * Header\n\t\t */\n\t\tif ( oConfig.bHeader )\n\t\t{\n\t\t\taRow = [];\n\n\t\t\tfor ( i=0, iLen=dt.aoColumns.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\tif ( aColumnsInc[i] )\n\t\t\t\t{\n\t\t\t\t\tsLoopData = dt.aoColumns[i].sTitle.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" ).replace(/^\\s+|\\s+$/g,\"\");\n\t\t\t\t\tsLoopData = this._fnHtmlDecode( sLoopData );\n\n\t\t\t\t\taRow.push( this._fnBoundData( sLoopData, oConfig.sFieldBoundary, regex ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\taData.push( aRow.join(oConfig.sFieldSeperator) );\n\t\t}\n\n\t\tbSelectedOnly = true;\n\n\t\t/*\n\t\t * Body\n\t\t */\n\t\tvar aDataIndex;\n\t\tvar aSelected = this.fnGetSelectedIndexes();\n\t\tbSelectedOnly = this.s.select.type !== \"none\" && bSelectedOnly && aSelected.length !== 0;\n\n\t\tif ( bSelectedOnly ) {\n\t\t\t// Use the selected indexes\n\t\t\taDataIndex = aSelected;\n\t\t}\n\t\telse if ( DataTable.Api ) {\n\t\t\t// 1.10+ style\n\t\t\taDataIndex = new DataTable.Api( dt )\n\t\t\t\t.rows( oConfig.oSelectorOpts )\n\t\t\t\t.indexes()\n\t\t\t\t.flatten()\n\t\t\t\t.toArray();\n\t\t}\n\t\telse {\n\t\t\t// 1.9- style\n\t\t\taDataIndex = dt.oInstance\n\t\t\t\t.$('tr', oConfig.oSelectorOpts)\n\t\t\t\t.map( function (id, row) {\n\t\t\t\t\treturn dt.oInstance.fnGetPosition( row );\n\t\t\t\t} )\n\t\t\t\t.get();\n\t\t}\n\n\t\tfor ( j=0, jLen=aDataIndex.length ; j<jLen ; j++ )\n\t\t{\n\t\t\ttr = dt.aoData[ aDataIndex[j] ].nTr;\n\t\t\taRow = [];\n\n\t\t\t/* Columns */\n\t\t\tfor ( i=0, iLen=dt.aoColumns.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\tif ( aColumnsInc[i] )\n\t\t\t\t{\n\t\t\t\t\t/* Convert to strings (with small optimisation) */\n\t\t\t\t\tvar mTypeData = dt.oApi._fnGetCellData( dt, aDataIndex[j], i, 'display' );\n\t\t\t\t\tif ( oConfig.fnCellRender )\n\t\t\t\t\t{\n\t\t\t\t\t\tsLoopData = oConfig.fnCellRender( mTypeData, i, tr, aDataIndex[j] )+\"\";\n\t\t\t\t\t}\n\t\t\t\t\telse if ( typeof mTypeData == \"string\" )\n\t\t\t\t\t{\n\t\t\t\t\t\t/* Strip newlines, replace img tags with alt attr. and finally strip html... */\n\t\t\t\t\t\tsLoopData = mTypeData.replace(/\\n/g,\" \");\n\t\t\t\t\t\tsLoopData =\n\t\t\t\t\t\t    sLoopData.replace(/<img.*?\\s+alt\\s*=\\s*(?:\"([^\"]+)\"|'([^']+)'|([^\\s>]+)).*?>/gi,\n\t\t\t\t\t\t        '$1$2$3');\n\t\t\t\t\t\tsLoopData = sLoopData.replace( /<.*?>/g, \"\" );\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tsLoopData = mTypeData+\"\";\n\t\t\t\t\t}\n\n\t\t\t\t\t/* Trim and clean the data */\n\t\t\t\t\tsLoopData = sLoopData.replace(/^\\s+/, '').replace(/\\s+$/, '');\n\t\t\t\t\tsLoopData = this._fnHtmlDecode( sLoopData );\n\n\t\t\t\t\t/* Bound it and add it to the total data */\n\t\t\t\t\taRow.push( this._fnBoundData( sLoopData, oConfig.sFieldBoundary, regex ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\taData.push( aRow.join(oConfig.sFieldSeperator) );\n\n\t\t\t/* Details rows from fnOpen */\n\t\t\tif ( oConfig.bOpenRows )\n\t\t\t{\n\t\t\t\tarr = $.grep(dt.aoOpenRows, function(o) { return o.nParent === tr; });\n\n\t\t\t\tif ( arr.length === 1 )\n\t\t\t\t{\n\t\t\t\t\tsLoopData = this._fnBoundData( $('td', arr[0].nTr).html(), oConfig.sFieldBoundary, regex );\n\t\t\t\t\taData.push( sLoopData );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t * Footer\n\t\t */\n\t\tif ( oConfig.bFooter && dt.nTFoot !== null )\n\t\t{\n\t\t\taRow = [];\n\n\t\t\tfor ( i=0, iLen=dt.aoColumns.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\tif ( aColumnsInc[i] && dt.aoColumns[i].nTf !== null )\n\t\t\t\t{\n\t\t\t\t\tsLoopData = dt.aoColumns[i].nTf.innerHTML.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\n\t\t\t\t\tsLoopData = this._fnHtmlDecode( sLoopData );\n\n\t\t\t\t\taRow.push( this._fnBoundData( sLoopData, oConfig.sFieldBoundary, regex ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\taData.push( aRow.join(oConfig.sFieldSeperator) );\n\t\t}\n\n\t\tvar _sLastData = aData.join( this._fnNewline(oConfig) );\n\t\treturn _sLastData;\n\t},\n\n\n\t/**\n\t * Wrap data up with a boundary string\n\t *  @method  _fnBoundData\n\t *  @param   {String} sData data to bound\n\t *  @param   {String} sBoundary bounding char(s)\n\t *  @param   {RegExp} regex search for the bounding chars - constructed outside for efficiency\n\t *\t\t\t in the loop\n\t *  @returns {String} bound data\n\t *  @private \n\t */\n\t\"_fnBoundData\": function ( sData, sBoundary, regex )\n\t{\n\t\tif ( sBoundary === \"\" )\n\t\t{\n\t\t\treturn sData;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn sBoundary + sData.replace(regex, sBoundary+sBoundary) + sBoundary;\n\t\t}\n\t},\n\n\n\t/**\n\t * Break a string up into an array of smaller strings\n\t *  @method  _fnChunkData\n\t *  @param   {String} sData data to be broken up\n\t *  @param   {Int} iSize chunk size\n\t *  @returns {Array} String array of broken up text\n\t *  @private \n\t */\n\t\"_fnChunkData\": function ( sData, iSize )\n\t{\n\t\tvar asReturn = [];\n\t\tvar iStrlen = sData.length;\n\n\t\tfor ( var i=0 ; i<iStrlen ; i+=iSize )\n\t\t{\n\t\t\tif ( i+iSize < iStrlen )\n\t\t\t{\n\t\t\t\tasReturn.push( sData.substring( i, i+iSize ) );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tasReturn.push( sData.substring( i, iStrlen ) );\n\t\t\t}\n\t\t}\n\n\t\treturn asReturn;\n\t},\n\n\n\t/**\n\t * Decode HTML entities\n\t *  @method  _fnHtmlDecode\n\t *  @param   {String} sData encoded string\n\t *  @returns {String} decoded string\n\t *  @private \n\t */\n\t\"_fnHtmlDecode\": function ( sData )\n\t{\n\t\tif ( sData.indexOf('&') === -1 )\n\t\t{\n\t\t\treturn sData;\n\t\t}\n\n\t\tvar n = document.createElement('div');\n\n\t\treturn sData.replace( /&([^\\s]*?);/g, function( match, match2 ) {\n\t\t\tif ( match.substr(1, 1) === '#' )\n\t\t\t{\n\t\t\t\treturn String.fromCharCode( Number(match2.substr(1)) );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tn.innerHTML = match;\n\t\t\t\treturn n.childNodes[0].nodeValue;\n\t\t\t}\n\t\t} );\n\t},\n\n\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Printing functions\n\t */\n\n\t/**\n\t * Show print display\n\t *  @method  _fnPrintStart\n\t *  @param   {Event} e Event object\n\t *  @param   {Object} oConfig Button configuration object\n\t *  @returns void\n\t *  @private \n\t */\n\t\"_fnPrintStart\": function ( oConfig )\n\t{\n\t  var that = this;\n\t  var oSetDT = this.s.dt;\n\n\t\t/* Parse through the DOM hiding everything that isn't needed for the table */\n\t\tthis._fnPrintHideNodes( oSetDT.nTable );\n\n\t\t/* Show the whole table */\n\t\tthis.s.print.saveStart = oSetDT._iDisplayStart;\n\t\tthis.s.print.saveLength = oSetDT._iDisplayLength;\n\n\t\tif ( oConfig.bShowAll )\n\t\t{\n\t\t\toSetDT._iDisplayStart = 0;\n\t\t\toSetDT._iDisplayLength = -1;\n\t\t\tif ( oSetDT.oApi._fnCalculateEnd ) {\n\t\t\t\toSetDT.oApi._fnCalculateEnd( oSetDT );\n\t\t\t}\n\t\t\toSetDT.oApi._fnDraw( oSetDT );\n\t\t}\n\n\t\t/* Adjust the display for scrolling which might be done by DataTables */\n\t\tif ( oSetDT.oScroll.sX !== \"\" || oSetDT.oScroll.sY !== \"\" )\n\t\t{\n\t\t\tthis._fnPrintScrollStart( oSetDT );\n\n\t\t\t// If the table redraws while in print view, the DataTables scrolling\n\t\t\t// setup would hide the header, so we need to readd it on draw\n\t\t\t$(this.s.dt.nTable).bind('draw.DTTT_Print', function () {\n\t\t\t\tthat._fnPrintScrollStart( oSetDT );\n\t\t\t} );\n\t\t}\n\n\t\t/* Remove the other DataTables feature nodes - but leave the table! and info div */\n\t\tvar anFeature = oSetDT.aanFeatures;\n\t\tfor ( var cFeature in anFeature )\n\t\t{\n\t\t\tif ( cFeature != 'i' && cFeature != 't' && cFeature.length == 1 )\n\t\t\t{\n\t\t\t\tfor ( var i=0, iLen=anFeature[cFeature].length ; i<iLen ; i++ )\n\t\t\t\t{\n\t\t\t\t\tthis.dom.print.hidden.push( {\n\t\t\t\t\t\t\"node\": anFeature[cFeature][i],\n\t\t\t\t\t\t\"display\": \"block\"\n\t\t\t\t\t} );\n\t\t\t\t\tanFeature[cFeature][i].style.display = \"none\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/* Print class can be used for styling */\n\t\t$(document.body).addClass( this.classes.print.body );\n\n\t\t/* Show information message to let the user know what is happening */\n\t\tif ( oConfig.sInfo !== \"\" )\n\t\t{\n\t\t\tthis.fnInfo( oConfig.sInfo, 3000 );\n\t\t}\n\n\t\t/* Add a message at the top of the page */\n\t\tif ( oConfig.sMessage )\n\t\t{\n\t\t\t$('<div/>')\n\t\t\t\t.addClass( this.classes.print.message )\n\t\t\t\t.html( oConfig.sMessage )\n\t\t\t\t.prependTo( 'body' );\n\t\t}\n\n\t\t/* Cache the scrolling and the jump to the top of the page */\n\t\tthis.s.print.saveScroll = $(window).scrollTop();\n\t\twindow.scrollTo( 0, 0 );\n\n\t\t/* Bind a key event listener to the document for the escape key -\n\t\t * it is removed in the callback\n\t\t */\n\t\t$(document).bind( \"keydown.DTTT\", function(e) {\n\t\t\t/* Only interested in the escape key */\n\t\t\tif ( e.keyCode == 27 )\n\t\t\t{\n\t\t\t\te.preventDefault();\n\t\t\t\tthat._fnPrintEnd.call( that, e );\n\t\t\t}\n\t\t} );\n\t},\n\n\n\t/**\n\t * Printing is finished, resume normal display\n\t *  @method  _fnPrintEnd\n\t *  @param   {Event} e Event object\n\t *  @returns void\n\t *  @private \n\t */\n\t\"_fnPrintEnd\": function ( e )\n\t{\n\t\tvar that = this;\n\t\tvar oSetDT = this.s.dt;\n\t\tvar oSetPrint = this.s.print;\n\t\tvar oDomPrint = this.dom.print;\n\n\t\t/* Show all hidden nodes */\n\t\tthis._fnPrintShowNodes();\n\n\t\t/* Restore DataTables' scrolling */\n\t\tif ( oSetDT.oScroll.sX !== \"\" || oSetDT.oScroll.sY !== \"\" )\n\t\t{\n\t\t\t$(this.s.dt.nTable).unbind('draw.DTTT_Print');\n\n\t\t\tthis._fnPrintScrollEnd();\n\t\t}\n\n\t\t/* Restore the scroll */\n\t\twindow.scrollTo( 0, oSetPrint.saveScroll );\n\n\t\t/* Drop the print message */\n\t\t$('div.'+this.classes.print.message).remove();\n\n\t\t/* Styling class */\n\t\t$(document.body).removeClass( 'DTTT_Print' );\n\n\t\t/* Restore the table length */\n\t\toSetDT._iDisplayStart = oSetPrint.saveStart;\n\t\toSetDT._iDisplayLength = oSetPrint.saveLength;\n\t\tif ( oSetDT.oApi._fnCalculateEnd ) {\n\t\t\toSetDT.oApi._fnCalculateEnd( oSetDT );\n\t\t}\n\t\toSetDT.oApi._fnDraw( oSetDT );\n\n\t\t$(document).unbind( \"keydown.DTTT\" );\n\t},\n\n\n\t/**\n\t * Take account of scrolling in DataTables by showing the full table\n\t *  @returns void\n\t *  @private \n\t */\n\t\"_fnPrintScrollStart\": function ()\n\t{\n\t\tvar\n\t\t\toSetDT = this.s.dt,\n\t\t\tnScrollHeadInner = oSetDT.nScrollHead.getElementsByTagName('div')[0],\n\t\t\tnScrollHeadTable = nScrollHeadInner.getElementsByTagName('table')[0],\n\t\t\tnScrollBody = oSetDT.nTable.parentNode,\n\t\t\tnTheadSize, nTfootSize;\n\n\t\t/* Copy the header in the thead in the body table, this way we show one single table when\n\t\t * in print view. Note that this section of code is more or less verbatim from DT 1.7.0\n\t\t */\n\t\tnTheadSize = oSetDT.nTable.getElementsByTagName('thead');\n\t\tif ( nTheadSize.length > 0 )\n\t\t{\n\t\t\toSetDT.nTable.removeChild( nTheadSize[0] );\n\t\t}\n\n\t\tif ( oSetDT.nTFoot !== null )\n\t\t{\n\t\t\tnTfootSize = oSetDT.nTable.getElementsByTagName('tfoot');\n\t\t\tif ( nTfootSize.length > 0 )\n\t\t\t{\n\t\t\t\toSetDT.nTable.removeChild( nTfootSize[0] );\n\t\t\t}\n\t\t}\n\n\t\tnTheadSize = oSetDT.nTHead.cloneNode(true);\n\t\toSetDT.nTable.insertBefore( nTheadSize, oSetDT.nTable.childNodes[0] );\n\n\t\tif ( oSetDT.nTFoot !== null )\n\t\t{\n\t\t\tnTfootSize = oSetDT.nTFoot.cloneNode(true);\n\t\t\toSetDT.nTable.insertBefore( nTfootSize, oSetDT.nTable.childNodes[1] );\n\t\t}\n\n\t\t/* Now adjust the table's viewport so we can actually see it */\n\t\tif ( oSetDT.oScroll.sX !== \"\" )\n\t\t{\n\t\t\toSetDT.nTable.style.width = $(oSetDT.nTable).outerWidth()+\"px\";\n\t\t\tnScrollBody.style.width = $(oSetDT.nTable).outerWidth()+\"px\";\n\t\t\tnScrollBody.style.overflow = \"visible\";\n\t\t}\n\n\t\tif ( oSetDT.oScroll.sY !== \"\" )\n\t\t{\n\t\t\tnScrollBody.style.height = $(oSetDT.nTable).outerHeight()+\"px\";\n\t\t\tnScrollBody.style.overflow = \"visible\";\n\t\t}\n\t},\n\n\n\t/**\n\t * Take account of scrolling in DataTables by showing the full table. Note that the redraw of\n\t * the DataTable that we do will actually deal with the majority of the hard work here\n\t *  @returns void\n\t *  @private \n\t */\n\t\"_fnPrintScrollEnd\": function ()\n\t{\n\t\tvar\n\t\t\toSetDT = this.s.dt,\n\t\t\tnScrollBody = oSetDT.nTable.parentNode;\n\n\t\tif ( oSetDT.oScroll.sX !== \"\" )\n\t\t{\n\t\t\tnScrollBody.style.width = oSetDT.oApi._fnStringToCss( oSetDT.oScroll.sX );\n\t\t\tnScrollBody.style.overflow = \"auto\";\n\t\t}\n\n\t\tif ( oSetDT.oScroll.sY !== \"\" )\n\t\t{\n\t\t\tnScrollBody.style.height = oSetDT.oApi._fnStringToCss( oSetDT.oScroll.sY );\n\t\t\tnScrollBody.style.overflow = \"auto\";\n\t\t}\n\t},\n\n\n\t/**\n\t * Resume the display of all TableTools hidden nodes\n\t *  @method  _fnPrintShowNodes\n\t *  @returns void\n\t *  @private \n\t */\n\t\"_fnPrintShowNodes\": function ( )\n\t{\n\t  var anHidden = this.dom.print.hidden;\n\n\t\tfor ( var i=0, iLen=anHidden.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tanHidden[i].node.style.display = anHidden[i].display;\n\t\t}\n\t\tanHidden.splice( 0, anHidden.length );\n\t},\n\n\n\t/**\n\t * Hide nodes which are not needed in order to display the table. Note that this function is\n\t * recursive\n\t *  @method  _fnPrintHideNodes\n\t *  @param   {Node} nNode Element which should be showing in a 'print' display\n\t *  @returns void\n\t *  @private \n\t */\n\t\"_fnPrintHideNodes\": function ( nNode )\n\t{\n\t\tvar anHidden = this.dom.print.hidden;\n\n\t\tvar nParent = nNode.parentNode;\n\t\tvar nChildren = nParent.childNodes;\n\t\tfor ( var i=0, iLen=nChildren.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tif ( nChildren[i] != nNode && nChildren[i].nodeType == 1 )\n\t\t\t{\n\t\t\t\t/* If our node is shown (don't want to show nodes which were previously hidden) */\n\t\t\t\tvar sDisplay = $(nChildren[i]).css(\"display\");\n\t\t\t\tif ( sDisplay != \"none\" )\n\t\t\t\t{\n\t\t\t\t\t/* Cache the node and it's previous state so we can restore it */\n\t\t\t\t\tanHidden.push( {\n\t\t\t\t\t\t\"node\": nChildren[i],\n\t\t\t\t\t\t\"display\": sDisplay\n\t\t\t\t\t} );\n\t\t\t\t\tnChildren[i].style.display = \"none\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( nParent.nodeName.toUpperCase() != \"BODY\" )\n\t\t{\n\t\t\tthis._fnPrintHideNodes( nParent );\n\t\t}\n\t}\n};\n\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Static variables\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n/**\n * Store of all instances that have been created of TableTools, so one can look up other (when\n * there is need of a master)\n *  @property _aInstances\n *  @type\t Array\n *  @default  []\n *  @private\n */\nTableTools._aInstances = [];\n\n\n/**\n * Store of all listeners and their callback functions\n *  @property _aListeners\n *  @type\t Array\n *  @default  []\n */\nTableTools._aListeners = [];\n\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Static methods\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n/**\n * Get an array of all the master instances\n *  @method  fnGetMasters\n *  @returns {Array} List of master TableTools instances\n *  @static\n */\nTableTools.fnGetMasters = function ()\n{\n\tvar a = [];\n\tfor ( var i=0, iLen=TableTools._aInstances.length ; i<iLen ; i++ )\n\t{\n\t\tif ( TableTools._aInstances[i].s.master )\n\t\t{\n\t\t\ta.push( TableTools._aInstances[i] );\n\t\t}\n\t}\n\treturn a;\n};\n\n/**\n * Get the master instance for a table node (or id if a string is given)\n *  @method  fnGetInstance\n *  @returns {Object} ID of table OR table node, for which we want the TableTools instance\n *  @static\n */\nTableTools.fnGetInstance = function ( node )\n{\n\tif ( typeof node != 'object' )\n\t{\n\t\tnode = document.getElementById(node);\n\t}\n\n\tfor ( var i=0, iLen=TableTools._aInstances.length ; i<iLen ; i++ )\n\t{\n\t\tif ( TableTools._aInstances[i].s.master && TableTools._aInstances[i].dom.table == node )\n\t\t{\n\t\t\treturn TableTools._aInstances[i];\n\t\t}\n\t}\n\treturn null;\n};\n\n\n/**\n * Add a listener for a specific event\n *  @method  _fnEventListen\n *  @param   {Object} that Scope of the listening function (i.e. 'this' in the caller)\n *  @param   {String} type Event type\n *  @param   {Function} fn Function\n *  @returns void\n *  @private\n *  @static\n */\nTableTools._fnEventListen = function ( that, type, fn )\n{\n\tTableTools._aListeners.push( {\n\t\t\"that\": that,\n\t\t\"type\": type,\n\t\t\"fn\": fn\n\t} );\n};\n\n\n/**\n * An event has occurred - look up every listener and fire it off. We check that the event we are\n * going to fire is attached to the same table (using the table node as reference) before firing\n *  @method  _fnEventDispatch\n *  @param   {Object} that Scope of the listening function (i.e. 'this' in the caller)\n *  @param   {String} type Event type\n *  @param   {Node} node Element that the event occurred on (may be null)\n *  @param   {boolean} [selected] Indicate if the node was selected (true) or deselected (false)\n *  @returns void\n *  @private\n *  @static\n */\nTableTools._fnEventDispatch = function ( that, type, node, selected )\n{\n\tvar listeners = TableTools._aListeners;\n\tfor ( var i=0, iLen=listeners.length ; i<iLen ; i++ )\n\t{\n\t\tif ( that.dom.table == listeners[i].that.dom.table && listeners[i].type == type )\n\t\t{\n\t\t\tlisteners[i].fn( node, selected );\n\t\t}\n\t}\n};\n\n\n\n\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Constants\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n\n\nTableTools.buttonBase = {\n\t// Button base\n\t\"sAction\": \"text\",\n\t\"sTag\": \"default\",\n\t\"sLinerTag\": \"default\",\n\t\"sButtonClass\": \"DTTT_button_text\",\n\t\"sButtonText\": \"Button text\",\n\t\"sTitle\": \"\",\n\t\"sToolTip\": \"\",\n\n\t// Common button specific options\n\t\"sCharSet\": \"utf8\",\n\t\"bBomInc\": false,\n\t\"sFileName\": \"*.csv\",\n\t\"sFieldBoundary\": \"\",\n\t\"sFieldSeperator\": \"\\t\",\n\t\"sNewLine\": \"auto\",\n\t\"mColumns\": \"all\", /* \"all\", \"visible\", \"hidden\" or array of column integers */\n\t\"bHeader\": true,\n\t\"bFooter\": true,\n\t\"bOpenRows\": false,\n\t\"bSelectedOnly\": false,\n\t\"oSelectorOpts\": undefined, // See http://datatables.net/docs/DataTables/1.9.4/#$ for full options\n\n\t// Callbacks\n\t\"fnMouseover\": null,\n\t\"fnMouseout\": null,\n\t\"fnClick\": null,\n\t\"fnSelect\": null,\n\t\"fnComplete\": null,\n\t\"fnInit\": null,\n\t\"fnCellRender\": null\n};\n\n\n/**\n * @namespace Default button configurations\n */\nTableTools.BUTTONS = {\n\t\"csv\": $.extend( {}, TableTools.buttonBase, {\n\t\t\"sAction\": \"flash_save\",\n\t\t\"sButtonClass\": \"DTTT_button_csv\",\n\t\t\"sButtonText\": \"CSV\",\n\t\t\"sFieldBoundary\": '\"',\n\t\t\"sFieldSeperator\": \",\",\n\t\t\"fnClick\": function( nButton, oConfig, flash ) {\n\t\t\tthis.fnSetText( flash, this.fnGetTableData(oConfig) );\n\t\t}\n\t} ),\n\n\t\"xls\": $.extend( {}, TableTools.buttonBase, {\n\t\t\"sAction\": \"flash_save\",\n\t\t\"sCharSet\": \"utf16le\",\n\t\t\"bBomInc\": true,\n\t\t\"sButtonClass\": \"DTTT_button_xls\",\n\t\t\"sButtonText\": \"Excel\",\n\t\t\"fnClick\": function( nButton, oConfig, flash ) {\n\t\t\tthis.fnSetText( flash, this.fnGetTableData(oConfig) );\n\t\t}\n\t} ),\n\n\t\"copy\": $.extend( {}, TableTools.buttonBase, {\n\t\t\"sAction\": \"flash_copy\",\n\t\t\"sButtonClass\": \"DTTT_button_copy\",\n\t\t\"sButtonText\": \"Copy\",\n\t\t\"fnClick\": function( nButton, oConfig, flash ) {\n\t\t\tthis.fnSetText( flash, this.fnGetTableData(oConfig) );\n\t\t},\n\t\t\"fnComplete\": function(nButton, oConfig, flash, text) {\n\t\t\tvar lines = text.split('\\n').length;\n            if (oConfig.bHeader) lines--;\n            if (this.s.dt.nTFoot !== null && oConfig.bFooter) lines--;\n\t\t\tvar plural = (lines==1) ? \"\" : \"s\";\n\t\t\tthis.fnInfo( '<h6>Table copied</h6>'+\n\t\t\t\t'<p>Copied '+lines+' row'+plural+' to the clipboard.</p>',\n\t\t\t\t1500\n\t\t\t);\n\t\t}\n\t} ),\n\n\t\"pdf\": $.extend( {}, TableTools.buttonBase, {\n\t\t\"sAction\": \"flash_pdf\",\n\t\t\"sNewLine\": \"\\n\",\n\t\t\"sFileName\": \"*.pdf\",\n\t\t\"sButtonClass\": \"DTTT_button_pdf\",\n\t\t\"sButtonText\": \"PDF\",\n\t\t\"sPdfOrientation\": \"portrait\",\n\t\t\"sPdfSize\": \"A4\",\n\t\t\"sPdfMessage\": \"\",\n\t\t\"fnClick\": function( nButton, oConfig, flash ) {\n\t\t\tthis.fnSetText( flash,\n\t\t\t\t\"title:\"+ this.fnGetTitle(oConfig) +\"\\n\"+\n\t\t\t\t\"message:\"+ oConfig.sPdfMessage +\"\\n\"+\n\t\t\t\t\"colWidth:\"+ this.fnCalcColRatios(oConfig) +\"\\n\"+\n\t\t\t\t\"orientation:\"+ oConfig.sPdfOrientation +\"\\n\"+\n\t\t\t\t\"size:\"+ oConfig.sPdfSize +\"\\n\"+\n\t\t\t\t\"--/TableToolsOpts--\\n\" +\n\t\t\t\tthis.fnGetTableData(oConfig)\n\t\t\t);\n\t\t}\n\t} ),\n\n\t\"print\": $.extend( {}, TableTools.buttonBase, {\n\t\t\"sInfo\": \"<h6>Print view</h6><p>Please use your browser's print function to \"+\n\t\t  \"print this table. Press escape when finished.</p>\",\n\t\t\"sMessage\": null,\n\t\t\"bShowAll\": true,\n\t\t\"sToolTip\": \"View print view\",\n\t\t\"sButtonClass\": \"DTTT_button_print\",\n\t\t\"sButtonText\": \"Print\",\n\t\t\"fnClick\": function ( nButton, oConfig ) {\n\t\t\tthis.fnPrint( true, oConfig );\n\t\t}\n\t} ),\n\n\t\"text\": $.extend( {}, TableTools.buttonBase ),\n\n\t\"select\": $.extend( {}, TableTools.buttonBase, {\n\t\t\"sButtonText\": \"Select button\",\n\t\t\"fnSelect\": function( nButton, oConfig ) {\n\t\t\tif ( this.fnGetSelected().length !== 0 ) {\n\t\t\t\t$(nButton).removeClass( this.classes.buttons.disabled );\n\t\t\t} else {\n\t\t\t\t$(nButton).addClass( this.classes.buttons.disabled );\n\t\t\t}\n\t\t},\n\t\t\"fnInit\": function( nButton, oConfig ) {\n\t\t\t$(nButton).addClass( this.classes.buttons.disabled );\n\t\t}\n\t} ),\n\n\t\"select_single\": $.extend( {}, TableTools.buttonBase, {\n\t\t\"sButtonText\": \"Select button\",\n\t\t\"fnSelect\": function( nButton, oConfig ) {\n\t\t\tvar iSelected = this.fnGetSelected().length;\n\t\t\tif ( iSelected == 1 ) {\n\t\t\t\t$(nButton).removeClass( this.classes.buttons.disabled );\n\t\t\t} else {\n\t\t\t\t$(nButton).addClass( this.classes.buttons.disabled );\n\t\t\t}\n\t\t},\n\t\t\"fnInit\": function( nButton, oConfig ) {\n\t\t\t$(nButton).addClass( this.classes.buttons.disabled );\n\t\t}\n\t} ),\n\n\t\"select_all\": $.extend( {}, TableTools.buttonBase, {\n\t\t\"sButtonText\": \"Select all\",\n\t\t\"fnClick\": function( nButton, oConfig ) {\n\t\t\tthis.fnSelectAll();\n\t\t},\n\t\t\"fnSelect\": function( nButton, oConfig ) {\n\t\t\tif ( this.fnGetSelected().length == this.s.dt.fnRecordsDisplay() ) {\n\t\t\t\t$(nButton).addClass( this.classes.buttons.disabled );\n\t\t\t} else {\n\t\t\t\t$(nButton).removeClass( this.classes.buttons.disabled );\n\t\t\t}\n\t\t}\n\t} ),\n\n\t\"select_none\": $.extend( {}, TableTools.buttonBase, {\n\t\t\"sButtonText\": \"Deselect all\",\n\t\t\"fnClick\": function( nButton, oConfig ) {\n\t\t\tthis.fnSelectNone();\n\t\t},\n\t\t\"fnSelect\": function( nButton, oConfig ) {\n\t\t\tif ( this.fnGetSelected().length !== 0 ) {\n\t\t\t\t$(nButton).removeClass( this.classes.buttons.disabled );\n\t\t\t} else {\n\t\t\t\t$(nButton).addClass( this.classes.buttons.disabled );\n\t\t\t}\n\t\t},\n\t\t\"fnInit\": function( nButton, oConfig ) {\n\t\t\t$(nButton).addClass( this.classes.buttons.disabled );\n\t\t}\n\t} ),\n\n\t\"ajax\": $.extend( {}, TableTools.buttonBase, {\n\t\t\"sAjaxUrl\": \"/xhr.php\",\n\t\t\"sButtonText\": \"Ajax button\",\n\t\t\"fnClick\": function( nButton, oConfig ) {\n\t\t\tvar sData = this.fnGetTableData(oConfig);\n\t\t\t$.ajax( {\n\t\t\t\t\"url\": oConfig.sAjaxUrl,\n\t\t\t\t\"data\": [\n\t\t\t\t\t{ \"name\": \"tableData\", \"value\": sData }\n\t\t\t\t],\n\t\t\t\t\"success\": oConfig.fnAjaxComplete,\n\t\t\t\t\"dataType\": \"json\",\n\t\t\t\t\"type\": \"POST\",\n\t\t\t\t\"cache\": false,\n\t\t\t\t\"error\": function () {\n\t\t\t\t\talert( \"Error detected when sending table data to server\" );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\t\t\"fnAjaxComplete\": function( json ) {\n\t\t\talert( 'Ajax complete' );\n\t\t}\n\t} ),\n\n\t\"div\": $.extend( {}, TableTools.buttonBase, {\n\t\t\"sAction\": \"div\",\n\t\t\"sTag\": \"div\",\n\t\t\"sButtonClass\": \"DTTT_nonbutton\",\n\t\t\"sButtonText\": \"Text button\"\n\t} ),\n\n\t\"collection\": $.extend( {}, TableTools.buttonBase, {\n\t\t\"sAction\": \"collection\",\n\t\t\"sButtonClass\": \"DTTT_button_collection\",\n\t\t\"sButtonText\": \"Collection\",\n\t\t\"fnClick\": function( nButton, oConfig ) {\n\t\t\tthis._fnCollectionShow(nButton, oConfig);\n\t\t}\n\t} )\n};\n/*\n *  on* callback parameters:\n *     1. node - button element\n *     2. object - configuration object for this button\n *     3. object - ZeroClipboard reference (flash button only)\n *     4. string - Returned string from Flash (flash button only - and only on 'complete')\n */\n\n// Alias to match the other plug-ins styling\nTableTools.buttons = TableTools.BUTTONS;\n\n\n/**\n * @namespace Classes used by TableTools - allows the styles to be override easily.\n *   Note that when TableTools initialises it will take a copy of the classes object\n *   and will use its internal copy for the remainder of its run time.\n */\nTableTools.classes = {\n\t\"container\": \"DTTT_container\",\n\t\"buttons\": {\n\t\t\"normal\": \"DTTT_button\",\n\t\t\"disabled\": \"DTTT_disabled\"\n\t},\n\t\"collection\": {\n\t\t\"container\": \"DTTT_collection\",\n\t\t\"background\": \"DTTT_collection_background\",\n\t\t\"buttons\": {\n\t\t\t\"normal\": \"DTTT_button\",\n\t\t\t\"disabled\": \"DTTT_disabled\"\n\t\t}\n\t},\n\t\"select\": {\n\t\t\"table\": \"DTTT_selectable\",\n\t\t\"row\": \"DTTT_selected selected\"\n\t},\n\t\"print\": {\n\t\t\"body\": \"DTTT_Print\",\n\t\t\"info\": \"DTTT_print_info\",\n\t\t\"message\": \"DTTT_PrintMessage\"\n\t}\n};\n\n\n/**\n * @namespace ThemeRoller classes - built in for compatibility with DataTables' \n *   bJQueryUI option.\n */\nTableTools.classes_themeroller = {\n\t\"container\": \"DTTT_container ui-buttonset ui-buttonset-multi\",\n\t\"buttons\": {\n\t\t\"normal\": \"DTTT_button ui-button ui-state-default\"\n\t},\n\t\"collection\": {\n\t\t\"container\": \"DTTT_collection ui-buttonset ui-buttonset-multi\"\n\t}\n};\n\n\n/**\n * @namespace TableTools default settings for initialisation\n */\nTableTools.DEFAULTS = {\n\t\"sSwfPath\":        \"../swf/copy_csv_xls_pdf.swf\",\n\t\"sRowSelect\":      \"none\",\n\t\"sRowSelector\":    \"tr\",\n\t\"sSelectedClass\":  null,\n\t\"fnPreRowSelect\":  null,\n\t\"fnRowSelected\":   null,\n\t\"fnRowDeselected\": null,\n\t\"aButtons\":        [ \"copy\", \"csv\", \"xls\", \"pdf\", \"print\" ],\n\t\"oTags\": {\n\t\t\"container\": \"div\",\n\t\t\"button\": \"a\", // We really want to use buttons here, but Firefox and IE ignore the\n\t\t                 // click on the Flash element in the button (but not mouse[in|out]).\n\t\t\"liner\": \"span\",\n\t\t\"collection\": {\n\t\t\t\"container\": \"div\",\n\t\t\t\"button\": \"a\",\n\t\t\t\"liner\": \"span\"\n\t\t}\n\t}\n};\n\n// Alias to match the other plug-ins\nTableTools.defaults = TableTools.DEFAULTS;\n\n\n/**\n * Name of this class\n *  @constant CLASS\n *  @type\t String\n *  @default  TableTools\n */\nTableTools.prototype.CLASS = \"TableTools\";\n\n\n/**\n * TableTools version\n *  @constant  VERSION\n *  @type\t  String\n *  @default   See code\n */\nTableTools.version = \"2.2.4\";\n\n\n\n// DataTables 1.10 API\n// \n// This will be extended in a big way in in TableTools 3 to provide API methods\n// such as rows().select() and rows.selected() etc, but for the moment the\n// tabletools() method simply returns the instance.\n\nif ( $.fn.dataTable.Api ) {\n\t$.fn.dataTable.Api.register( 'tabletools()', function () {\n\t\tvar tt = null;\n\n\t\tif ( this.context.length > 0 ) {\n\t\t\ttt = TableTools.fnGetInstance( this.context[0].nTable );\n\t\t}\n\n\t\treturn tt;\n\t} );\n}\n\n\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Initialisation\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n/*\n * Register a new feature with DataTables\n */\nif ( typeof $.fn.dataTable == \"function\" &&\n\t typeof $.fn.dataTableExt.fnVersionCheck == \"function\" &&\n\t $.fn.dataTableExt.fnVersionCheck('1.9.0') )\n{\n\t$.fn.dataTableExt.aoFeatures.push( {\n\t\t\"fnInit\": function( oDTSettings ) {\n\t\t\tvar init = oDTSettings.oInit;\n\t\t\tvar opts = init ?\n\t\t\t\tinit.tableTools || init.oTableTools || {} :\n\t\t\t\t{};\n\n\t\t\treturn new TableTools( oDTSettings.oInstance, opts ).dom.container;\n\t\t},\n\t\t\"cFeature\": \"T\",\n\t\t\"sFeature\": \"TableTools\"\n\t} );\n}\nelse\n{\n\talert( \"Warning: TableTools requires DataTables 1.9.0 or newer - www.datatables.net/download\");\n}\n\n$.fn.DataTable.TableTools = TableTools;\n\n})(jQuery, window, document);\n\n/*\n * Register a new feature with DataTables\n */\nif ( typeof $.fn.dataTable == \"function\" &&\n\t typeof $.fn.dataTableExt.fnVersionCheck == \"function\" &&\n\t $.fn.dataTableExt.fnVersionCheck('1.9.0') )\n{\n\t$.fn.dataTableExt.aoFeatures.push( {\n\t\t\"fnInit\": function( oDTSettings ) {\n\t\t\tvar oOpts = typeof oDTSettings.oInit.oTableTools != 'undefined' ?\n\t\t\t\toDTSettings.oInit.oTableTools : {};\n\n\t\t\tvar oTT = new TableTools( oDTSettings.oInstance, oOpts );\n\t\t\tTableTools._aInstances.push( oTT );\n\n\t\t\treturn oTT.dom.container;\n\t\t},\n\t\t\"cFeature\": \"T\",\n\t\t\"sFeature\": \"TableTools\"\n\t} );\n}\nelse\n{\n\talert( \"Warning: TableTools 2 requires DataTables 1.9.0 or newer - www.datatables.net/download\");\n}\n\n\n$.fn.dataTable.TableTools = TableTools;\n$.fn.DataTable.TableTools = TableTools;\n\n\nreturn TableTools;\n}; // /factory\n\n\n// Define as an AMD module if possible\nif ( typeof define === 'function' && define.amd ) {\n\tdefine( ['jquery', 'datatables'], factory );\n}\nelse if ( typeof exports === 'object' ) {\n    // Node/CommonJS\n    factory( require('jquery'), require('datatables') );\n}\nelse if ( jQuery && !jQuery.fn.dataTable.TableTools ) {\n\t// Otherwise simply initialise as normal, stopping multiple evaluation\n\tfactory( jQuery, jQuery.fn.dataTable );\n}\n\n\n})(window, document);\n\n","$(document).ready(function() {\r\n    $(\"#save_general_settings\").click(function () {\r\n        var settings = $('#general-settings-form').serialize();\r\n        // console.log(\"voy a guardar\");\r\n        // console.log(settings);\r\n        $.ajax({\r\n            url: app_url+\"settings/settings/saveGeneralAjax\",\r\n            type: \"POST\",\r\n            data: settings,\r\n            dataType: \"json\",\r\n            success: function(data){\r\n                console.log(data);\r\n                if (data.error===true) {\r\n                    showErrorMessage('#setting-error-msg',data.msg,5000);\r\n                }else{\r\n                    showSuccessMessage('#setting-positive-msg',data.msg,1000);\r\n                }\r\n            },\r\n            error: function(request, error) {\r\n                console.log(\"Request: \" + JSON.stringify(request));\r\n                console.log(\"Error: \" + JSON.stringify(error));\r\n            }\r\n        });\r\n        return false;\r\n    });\r\n});\r\n","var protocol = window.location.protocol;\r\nvar host = window.location.host;\r\nvar path = window.location.pathname;\r\nvar base = protocol+\"//\"+host;\r\nvar app_name = window.location.pathname.substr(0,window.location.pathname.lastIndexOf('/'));\r\nvar app_url = base+app_name+'/';\r\nvar base_url = protocol+\"//\"+host+path;\r\n\r\n$(document).ready(function() {\r\n    /**\r\n     * Default Error Message\r\n     * @param selector: jQuery Selector\r\n     * @param msg: Body Message\r\n     * @param time: Time on show\r\n     */\r\n    function showErrorMessage(selector,msg,time){\r\n        $(selector).html(\"<div class=\\\"ui negative message\\\"><i class=\\\"close icon\\\"></i><div class=\\\"header\\\">Error!</div><p>\"+msg+\"</p></div>\");\r\n        $(selector).show(1000).delay(time).fadeOut();\r\n    }\r\n    window.showErrorMessage = showErrorMessage;\r\n    /**\r\n     * Default Success Message\r\n     * @param selector\r\n     * @param msg\r\n     * @param time\r\n     */\r\n    function showSuccessMessage(selector,msg,time){\r\n        $(selector).html(\"<div class=\\\"ui success message\\\"><i class=\\\"close icon\\\"></i><div class=\\\"header\\\">Éxito!</div><p>\"+msg+\"</p></div>\");\r\n        $(selector).show(1000).delay(time).fadeOut();\r\n    }\r\n    window.showSuccessMessage = showSuccessMessage;\r\n    /**\r\n     * Create HTML table body to Doors data\r\n     * @param result\r\n     * @returns {string}\r\n     */\r\n    function createDoorsEventsResultBody(result){\r\n        var body = '';\r\n        var tam = result.length;\r\n        var event_type = '';\r\n        var event_datetime;\r\n        var unix_event_datetime;\r\n        var event_datetime_formated;\r\n        var fname;\r\n        var lname;\r\n        var user;\r\n        for (var i = 0; i < tam; i++) {\r\n            event_datetime = moment(result[i].x_timestamp);\r\n            unix_event_datetime = event_datetime.unix();\r\n            event_datetime_formated = event_datetime.format('DD/MM/YYYY hh:mm:ss A');\r\n            if(result[i].x_fname){\r\n               fname = result[i].x_fname;\r\n            }else{\r\n                fname = ' ';\r\n            }\r\n            if(result[i].x_lname){\r\n                lname = result[i].x_lname;\r\n            }else{\r\n                lname = ' ';\r\n            }\r\n            user = fname+' '+lname;\r\n            if(result[i].x_hist_type === 35){\r\n                event_type = \"<div class='ui red label'>Acceso Denegado</div>\";\r\n            }else{\r\n                if(result[i].x_hist_type === 33) {\r\n                    event_type = \"<div class='ui green label'>Tarjeta Inválida</div>\";\r\n                }else{\r\n                    if(result[i].x_hist_type === 37){\r\n                        event_type = \"<div class='ui orange label'>Fuera de Horario</div>\";\r\n                    }else{//68\r\n                        event_type = \"<div class='ui green label'>Puerta Abierta</div>\";\r\n                    }\r\n                }\r\n            }\r\n            body += '<tr>';\r\n            body +=     '<td>'+result[i].x_term_name+'</td>';\r\n            body +=     '<td>'+user+'</td>';\r\n            body +=     '<td>'+event_type+'</td>';\r\n            body +=     '<td data-order=\"'+unix_event_datetime+'\">'+event_datetime_formated+'</td>';\r\n            body += '</tr>';\r\n        }\r\n        return body;\r\n    }\r\n    window.createDoorsEventsResultBody = createDoorsEventsResultBody;\r\n    /**\r\n     *\r\n     * @param data\r\n     */\r\n    function createPermissionTableBody(data){\r\n        var body = '';\r\n        var tam = data.length;\r\n        var created_datetime;\r\n        var unix_created_datetime;\r\n        var created_datetime_formated;\r\n        var fname;\r\n        var lname;\r\n        var department;\r\n        for (var i = 0; i < tam; i++) {\r\n            created_datetime = moment(data[i].c_s_timestamp);\r\n            unix_created_datetime = created_datetime.unix();\r\n            created_datetime_formated = created_datetime.format('DD/MM/YYYY');\r\n            fname = data[i].c_fname;\r\n            lname = data[i].c_lname;\r\n            department = data[i].dept_name;\r\n            if(department === null)\r\n                department = 'Sin asignar';\r\n            body += '<tr>';\r\n            body +=     '<td>'+fname+'</td>';\r\n            body +=     '<td>'+lname+'</td>';\r\n            body +=     '<td>'+department+'</td>';\r\n            body +=     '<td data-order=\"'+unix_created_datetime+'\">'+created_datetime_formated+'</td>';\r\n            body += '</tr>';\r\n        }\r\n        return body;\r\n    }\r\n    window.createPermissionTableBody = createPermissionTableBody;\r\n    /**\r\n     * Create a DataTable\r\n     * @param selector\r\n     * @returns {*}\r\n     */\r\n    function createDataTable(selector){\r\n        if(selectorExist(selector)) {\r\n            var table = selector.DataTable({\r\n                \"order\": [[3, \"desc\"]],\r\n                \"language\": {\r\n                    \"url\": \"extras/SpanishDatatable.json\"\r\n                }\r\n            });\r\n            return table;\r\n        }\r\n        return false;\r\n    }\r\n    window.createDataTable = createDataTable;\r\n    /**\r\n     * Create a default DataTable Object\r\n     * @param selector jQuery Selector\r\n     * @param orderArray default Order Array\r\n     * @returns {*}\r\n     */\r\n    function createCallsDataTable(selector,orderArray){\r\n        if(selectorExist(selector)) {\r\n            var table = selector.DataTable({\r\n                \"order\": orderArray,\r\n                \"language\": {\r\n                    \"url\": \"extras/SpanishDatatable.json\"\r\n                }\r\n            });\r\n            return table;\r\n        }\r\n        return false;\r\n    }\r\n    window.createCallsDataTable = createCallsDataTable;\r\n    /**\r\n     * Destroy a single DataTable object\r\n     * @param table_var\r\n     */\r\n    function destroyDataTable(table_var){\r\n        table_var.destroy();\r\n    }\r\n    function selectorExist(selector){\r\n        return (selector.length>0);\r\n    }\r\n    window.destroyDataTable = destroyDataTable;\r\n    /**\r\n     *\r\n     * @param selector\r\n     * @param table_var\r\n     * @returns {*}\r\n     */\r\n    function reinitialiseDataTable(selector,table_var){\r\n        destroyDataTable(table_var);\r\n        return createDataTable(selector);\r\n    }\r\n    window.reinitialiseDataTable = reinitialiseDataTable;\r\n\r\n    /**\r\n     * get the time to resfresh last move table\r\n     */\r\n     function getGeneralUpdateTime(callback){\r\n         $.ajax({\r\n             url: app_url + \"settings/settings/getGeneralUpdateTimeAjax\",\r\n             type: \"POST\",\r\n             dataType: \"json\",\r\n             async: false,\r\n             success: function(response){callback(response.time);},\r\n             error: function(request, error) { callback(30);}\r\n         });\r\n     }\r\n     window.getGeneralUpdateTime = getGeneralUpdateTime;\r\n     var generalRefreshTime = 30000;\r\n     getGeneralUpdateTime(function(response){\r\n         generalRefreshTime = response * 1000;\r\n     });\r\n    var lastDoorMov = $('#lastDoorMov');\r\n    var lastDoorMovTable = createDataTable(lastDoorMov);\r\n\r\n    /**\r\n     * Update Door events table via AJAX\r\n     */\r\n    function updateDefaultTable(){\r\n        $.ajax({\r\n            url: app_url+\"main/main/getLastActionsAJAX\",\r\n            type: \"POST\",\r\n            dataType: \"json\",\r\n            success: function(data){\r\n                if(data.error === false){\r\n                    destroyDataTable(lastDoorMovTable);\r\n                    var events = createDoorsEventsResultBody(data.events);\r\n                    $(\"#lastDoorMov-body\").html(events);\r\n                    lastDoorMovTable = createDataTable(lastDoorMov);\r\n                }\r\n            },\r\n            error: function(request, error) {\r\n                console.log(\"Request: \" + JSON.stringify(request));\r\n                console.log(\"Error: \" + JSON.stringify(error));\r\n            }\r\n        });\r\n    }\r\n    if($(\"#lastDoorMov\").length>0){\r\n        setInterval(updateDefaultTable, generalRefreshTime);\r\n    }\r\n    if($(\"#upScrollToTop\").length > 0){\r\n        $(window).scroll(function(){\r\n            if($(this).scrollTop() > 100){\r\n                $(\"#upScrollToTop\").fadeIn();\r\n                $(\"#upScrollToDown\").fadeOut();\r\n            }else{\r\n                $(\"#upScrollToTop\").fadeOut();\r\n                $(\"#upScrollToDown\").fadeIn();\r\n            }\r\n        });\r\n        $(\"#upScrollToTop\").click(function(){\r\n            $('html, body').animate({scrollTop: 0}, 800);\r\n            return false;\r\n        });\r\n        $(\"#upScrollToDown\").click(function(){\r\n            $('html, body').animate({scrollTop: $(document).height()-$(window).height()}, 800);\r\n            return false;\r\n        });\r\n    }\r\n    $(\".room-level-list-item\").click(function(){\r\n        var valor = $(this).text();\r\n        var target = $('#piso-' + valor);\r\n        if( target.length ) {\r\n            $('html, body').animate({\r\n                scrollTop: target.offset().top + $(\"#main-menu\").height()\r\n            }, 1000);\r\n        }\r\n    });\r\n});","$(document).ready(function() {\r\n    $('.ui.dropdown').dropdown();\r\n    $('.ui.checkbox').checkbox();\r\n    //Tab init\r\n    $('.ui.tabular.menu.settings .item').tab();\r\n    //Vegas Slider Init\r\n\r\n    $(\".start-date\").calendar({\r\n        formatter: {\r\n            date: function (date, settings) {\r\n                if (!date) return '';\r\n                var day = date.getDate();\r\n                var month = date.getMonth() + 1;\r\n                var year = date.getFullYear();\r\n                return day + '-' + month + '-' + year;\r\n            }\r\n        },\r\n        type: 'date'\r\n    });\r\n\r\n    $(\".start-time\").calendar({\r\n        ampm: false,\r\n        type: 'time'\r\n    });\r\n\r\n    $(\".end-date\").calendar({\r\n        monthFirst: false,\r\n        formatter: {\r\n            date: function (date, settings) {\r\n                if (!date) return '';\r\n                var day = date.getDate();\r\n                var month = date.getMonth() + 1;\r\n                var year = date.getFullYear();\r\n                return day + '-' + month + '-' + year;\r\n            }\r\n        },\r\n        type: 'date'\r\n    });\r\n\r\n    $(\".end-time\").calendar({\r\n        ampm: false,\r\n        type: 'time'\r\n    });\r\n    //Calendar init\r\n    $('#calendar').fullCalendar({\r\n        locale: 'es',\r\n        contentHeight: 700,\r\n        aspectRatio: 2,\r\n        googleCalendarApiKey: 'AIzaSyDrzlzwx-cXpWGkvdTA9A4Y_RCAlr7yMe0',\r\n        eventSources: [\r\n            {\r\n                //Actividades Plaza Merú\r\n                googleCalendarId: 'hotelplazameru.com_7vjklt6bgoahjqcdjj46dkr97k@group.calendar.google.com',\r\n                className: 'single-event'\r\n            },\r\n            {\r\n                //Festivos Venezolanos\r\n                googleCalendarId: 'es.ve#holiday@group.v.calendar.google.com',\r\n                className: 've-holidays'\r\n            },\r\n            {\r\n                //Festivos Cristianos\r\n                googleCalendarId: 'es.christian#holiday@group.v.calendar.google.com',\r\n                className: 'christian-holidays'\r\n            },\r\n            {\r\n                //Lunes Bancarios\r\n                googleCalendarId: 'hotelplazameru.com_73u3a4jbirr6eh6b4nvlve7sro@group.calendar.google.com',\r\n                className: 'christian-holidays'\r\n            },\r\n            {\r\n                //Cumpleaños Plaza Marú\r\n                googleCalendarId: 'hotelplazameru.com_fp4rlsjstr7casv20044pabd6k@group.calendar.google.com',\r\n                className: 'event-birthday'\r\n            },\r\n            {\r\n                //Bodas\r\n                googleCalendarId: 'hotelplazameru.com_cuqdhkssdm7e8u02ccnmun6vf0@group.calendar.google.com',\r\n                className: 'event-wedding'\r\n            },\r\n            {\r\n                //Ejecutivos MOD\r\n                googleCalendarId: 'hotelplazameru.com_vpv203etpdor4n9mu8po5o6lto@group.calendar.google.com',\r\n                className: 'event-executive'\r\n            }\r\n        ],\r\n        eventClick: function(calEvent, jsEvent, view) {\r\n            // console.log(calEvent);\r\n            // console.log(jsEvent);\r\n            // console.log(view);\r\n            jsEvent.preventDefault();\r\n            showEventDetailsModal(calEvent);\r\n            if (calEvent.url) {\r\n                return false;\r\n            }\r\n        }\r\n    });\r\n    $(\"#calendar-segment\").vegas({\r\n        slides: [\r\n            { src: \"dist/images/banner.jpg\" },\r\n            { src: \"dist/images/hotels-desktop.jpg\" },\r\n            { src: \"dist/images/restaurant.jpg\" },\r\n            { src: \"dist/images/town.jpg\" }\r\n        ],\r\n        overlay: 'bower_components/vegas/dist/overlays/06.png'\r\n    });\r\n});\r\n","$(document).ready(function(){\r\n    function showEventDetailsModal(event){\r\n        var gMapSearchBasePathES = \"https://maps.google.com/maps?hl=es&q=\";\r\n        // console.log(event);\r\n        //Title\r\n        if(typeof event.title != 'undefined'){\r\n            $(\"#eventTitle\").html(event.title);\r\n        }else{\r\n            $(\"#eventTitle\").html('Evento sin título');\r\n        }\r\n        //Description\r\n        if(typeof event.description != 'undefined'){\r\n            $(\"#descriptionContent\").html(event.description);\r\n            $(\"#eventDescription\").show();\r\n        }else{\r\n            $(\"#eventDescription\").hide();\r\n        }\r\n        //Location\r\n        if(typeof event.location != 'undefined'){\r\n            var formatedLocation = event.location.replace(/ /g, \"+\");\r\n            var mapUrl = gMapSearchBasePathES+formatedLocation;\r\n            var mapLink = \"<a href='\"+mapUrl+\"' target='_blank'>\"+'(Ver mapa)'+\"</a>\";\r\n            $(\"#locationContent\").html(event.location+' '+mapLink);\r\n            $(\"#eventLocation\").show();\r\n        }else{\r\n            $(\"#eventLocation\").hide();\r\n        }\r\n        //Dates\r\n        var duration = moment.duration(event.end.diff(event.start));\r\n        var durationHours = duration.asHours();\r\n        if(durationHours === 24){\r\n            $(\"#singleDate\").html(event.start.format('DD/MM/YYYY'));\r\n            $('#eventDate').show();\r\n            $('#eventDurationStart').hide();\r\n            $('#eventDurationEnd').hide();\r\n        }else{\r\n            $('#eventDate').hide();\r\n            $('#startDate').html(event.start.format('DD/MM/YYYY hh:mm A'));\r\n            $('#endDate').html(event.end.format('DD/MM/YYYY hh:mm A'));\r\n            $('#eventDurationStart').show();\r\n            $('#eventDurationEnd').show();\r\n        }\r\n        // $('#eventModal').modal('show');\r\n        $('.ui.modal')\r\n            .modal({blurring: true})\r\n            .modal('setting', 'transition', 'vertical flip')\r\n            .modal('show');\r\n        return false;\r\n    }\r\n    window.showEventDetailsModal = showEventDetailsModal;\r\n    var show_single_event = true;\r\n    $(\".button.single-event\").click(function(){\r\n        if(show_single_event) {\r\n            $(\".fc-event.single-event\").hide();\r\n            show_single_event = false;\r\n        }else {\r\n            $(\".fc-event.single-event\").show();\r\n            show_single_event = true;\r\n        }\r\n    });\r\n    var show_ve_holidays_event = true;\r\n    $(\".button.ve-holidays\").click(function(){\r\n        if(show_ve_holidays_event) {\r\n            $(\".fc-event.ve-holidays\").hide();\r\n            show_ve_holidays_event = false;\r\n        }else {\r\n            $(\".fc-event.ve-holidays\").show();\r\n            show_ve_holidays_event = true;\r\n        }\r\n    });\r\n    var show_christian_event = true;\r\n    $(\".button.christian-holidays\").click(function(){\r\n        if(show_christian_event) {\r\n            $(\".fc-event.christian-holidays\").hide();\r\n            show_christian_event = false;\r\n        }else {\r\n            $(\".fc-event.christian-holidays\").show();\r\n            show_christian_event = true;\r\n        }\r\n    });\r\n    var show_birthday_event = true;\r\n    $(\".button.event-birthday\").click(function(){\r\n        if(show_birthday_event) {\r\n            $(\".fc-event.event-birthday\").hide();\r\n            show_birthday_event = false;\r\n        }else {\r\n            $(\".fc-event.event-birthday\").show();\r\n            show_birthday_event = true;\r\n        }\r\n    });\r\n    var show_wedding_event = true;\r\n    $(\".button.event-wedding\").click(function(){\r\n        if(show_wedding_event) {\r\n            $(\".fc-event.event-wedding\").hide();\r\n            show_wedding_event = false;\r\n        }else {\r\n            $(\".fc-event.event-wedding\").show();\r\n            show_wedding_event = true;\r\n        }\r\n    });\r\n    var show_executive_event = true;\r\n    $(\".button.event-executive\").click(function(){\r\n        if(show_executive_event) {\r\n            $(\".fc-event.event-executive\").hide();\r\n            show_executive_event = false;\r\n        }else {\r\n            $(\".fc-event.event-executive\").show();\r\n            show_executive_event = true;\r\n        }\r\n    });\r\n    var show_bank_event = true;\r\n    $(\".button.event-bank\").click(function(){\r\n        if(show_bank_event) {\r\n            $(\".fc-event.event-bank\").hide();\r\n            show_bank_event = false;\r\n        }else {\r\n            $(\".fc-event.event-bank\").show();\r\n            show_bank_event = true;\r\n        }\r\n    });\r\n});\r\n"],"sourceRoot":"assets/scripts/"}